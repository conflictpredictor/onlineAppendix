#MS_XXX_MS#
Merge scenario: rev_38ced-63877
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_be8b0-b4ff9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_aa4e9-b2d76
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_38cd5-74aa5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7b6b5-3628a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_de340-774c1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0e060-e599a
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_0e060_e599a\rev_rev_left_0e060-rev_right_e599a\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: []
Right editions: [77, 78]
Merged body: 
// START print_usage({FormalParametersInternal})//static void print_usage()
    {
        System.out.println("usage: java CorfuDBTester");
        System.out.println("\t-m masternode");
        System.out.println("\t[-a testtype] (0==TXTest|1==LinMapTest|2==StreamTest|3==MultiClientTXTest|4==LinCounterTest)");
        System.out.println("\t[-t number of threads]");
        System.out.println("\t[-n number of ops]");
// RIGHT //        System.out.println("\t[-p rpcport]");
// RIGHT //
//        if(dbglog instanceof SimpleLogger)
//            System.out.println("using SimpleLogger: run with -Dorg.slf4j.simpleLogger.defaultLogLevel=debug to " +
//                    "enable debug printouts");
// END print_usage({FormalParametersInternal})//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_0e060_e599a\rev_rev_left_0e060-rev_right_e599a\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [269]
Right editions: [104, 137, 138, 139, 140, 141, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199, 210, 224, 238]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;

        int numclients = 1;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int testnum = 0;
// RIGHT //        int rpcport = 9090;
        String masternode = null;
        if(args.length==0)
        {
            print_usage();
            return;
        }

        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
// RIGHT //                case 'p':
// RIGHT //                    strArg = g.getOptarg();
// RIGHT //                    System.out.println("rpcport = "+ strArg);
// RIGHT //                    rpcport = Integer.parseInt(strArg);
// RIGHT //                    break;
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");
// RIGHT //
// RIGHT //
// RIGHT //        String rpchostname;
// RIGHT //
// RIGHT //        try
// RIGHT //        {
// RIGHT //            rpchostname = InetAddress.getLocalHost().getHostName();
// RIGHT //        }
// RIGHT //        catch (UnknownHostException e)
// RIGHT //        {
// RIGHT //            throw new RuntimeException(e);
// RIGHT //        }

        if(testnum==MULTICLIENTTXTEST)
        {
            if(args.length<4)
            {
                print_usage();
                return;
            }
            numclients = Integer.parseInt(args[2]);
            expernum = Integer.parseInt(args[3]);
        }



        ClientLib crf;

        try
        {
            crf = new ClientLib(masternode);
        }
        catch (CorfuException e)
        {
            throw e;
        }


        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf), new CorfuStreamingSequencer(crf));

        long starttime = System.currentTimeMillis();

        if(testnum==MULTICLIENTTXTEST)
        {
// RIGHT //            TXRuntime TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DirectoryService DS = new DirectoryService(TR);
            CorfuDBCounter barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            barrier.increment();
            while(barrier.read() < numclients) ;
            dbglog.debug("Barrier reached; starting test...");
            testnum = TXTEST;
        }

        if(testnum==LINTEST)
        {
// RIGHT //            SimpleRuntime TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        if(testnum==LINCTRTEST)
        {
// RIGHT //            SimpleRuntime TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// RIGHT //            TXRuntime TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DirectoryService DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));


            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
// LEFT //                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_0e060_e599a\rev_rev_left_0e060-rev_right_e599a\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [269]
Right editions: [104, 137, 138, 139, 140, 141, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199, 210, 224, 238]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;

        int numclients = 1;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int testnum = 0;
// RIGHT //        int rpcport = 9090;
        String masternode = null;
        if(args.length==0)
        {
            print_usage();
            return;
        }

        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
// RIGHT //                case 'p':
// RIGHT //                    strArg = g.getOptarg();
// RIGHT //                    System.out.println("rpcport = "+ strArg);
// RIGHT //                    rpcport = Integer.parseInt(strArg);
// RIGHT //                    break;
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");
// RIGHT //
// RIGHT //
// RIGHT //        String rpchostname;
// RIGHT //
// RIGHT //        try
// RIGHT //        {
// RIGHT //            rpchostname = InetAddress.getLocalHost().getHostName();
// RIGHT //        }
// RIGHT //        catch (UnknownHostException e)
// RIGHT //        {
// RIGHT //            throw new RuntimeException(e);
// RIGHT //        }

        if(testnum==MULTICLIENTTXTEST)
        {
            if(args.length<4)
            {
                print_usage();
                return;
            }
            numclients = Integer.parseInt(args[2]);
            expernum = Integer.parseInt(args[3]);
        }



        ClientLib crf;

        try
        {
            crf = new ClientLib(masternode);
        }
        catch (CorfuException e)
        {
            throw e;
        }


        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf), new CorfuStreamingSequencer(crf));

        long starttime = System.currentTimeMillis();

        if(testnum==MULTICLIENTTXTEST)
        {
// RIGHT //            TXRuntime TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DirectoryService DS = new DirectoryService(TR);
            CorfuDBCounter barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            barrier.increment();
            while(barrier.read() < numclients) ;
            dbglog.debug("Barrier reached; starting test...");
            testnum = TXTEST;
        }

        if(testnum==LINTEST)
        {
// RIGHT //            SimpleRuntime TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        if(testnum==LINCTRTEST)
        {
// RIGHT //            SimpleRuntime TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// RIGHT //            TXRuntime TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DirectoryService DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));


            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
// LEFT //                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ce8c1-98d65
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2c815-955e1
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_2c815_955e1\rev_rev_left_2c815-rev_right_955e1\src\main\java\org\corfudb\runtime\collections\CorfuDBMap.java
Different Spacing: false
Left editions: []
Right editions: [228]
Merged body: 
// START put(K-K-V-V)//public V put(K key, V val)
    {
        MapCommand<K,V> precmd = new MapCommand<K,V>(MapCommand.CMD_PREPUT, key);
// RIGHT //        TR.query_then_update_helper(this, precmd, new MapCommand<K, V>(MapCommand.CMD_PUT, key, val), key.hashCode());
        return (V)precmd.getReturnValue();
// END put(K-K-V-V)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1877d-51a4e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8c72f-181d3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65b4e-bb2a8
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_65b4e_bb2a8\rev_rev_left_65b4e-rev_right_bb2a8\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [81, 82]
Right editions: [84, 85, 86]
Merged body: 
// START print_usage({FormalParametersInternal})//static void print_usage()
    {
        System.out.println("usage: java CorfuDBTester");
        System.out.println("\t-m masternode");
        System.out.println("\t[-a testtype] (0==TXTest|1==LinMapTest|2==StreamTest|3==MultiClientTXTest|4==LinCounterTest)");
        System.out.println("\t[-t number of threads]");
        System.out.println("\t[-n number of ops]");
// LEFT //        System.out.println("\t[-k number of keys used in list tests]");
// LEFT //        System.out.println("\t[-l number of lists used in list tests]");
        System.out.println("\t[-p rpcport]");
// RIGHT //        System.out.println("\t[-e expernum (for MultiClientTXTest)]");
// RIGHT //        System.out.println("\t[-c numclients (for MultiClientTXTest)]");
// RIGHT //        System.out.println("\t[-k numkeys (for TXTest)]");

//        if(dbglog instanceof SimpleLogger)
//            System.out.println("using SimpleLogger: run with -Dorg.slf4j.simpleLogger.defaultLogLevel=debug to " +
//                    "enable debug printouts");
// END print_usage({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_82784-012d6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58c73-68224
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0ebd0-6e1ef
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_de8fb-358c8
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_de8fb_358c8\rev_rev_left_de8fb-rev_right_358c8\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [112, 311, 312, 313, 314, 315, 316, 317, 318]
Right editions: [214]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLISTCOARSE=6;
        final int TXLISTFINE=7;
// LEFT //        final int TXLISTFINEMAP=8;

        int numclients = 2;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        if(args.length==0)
        {
            print_usage();
            return;
        }

        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

// RIGHT //        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new TesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLISTCOARSE) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBTester.<Integer, CorfuDBCoarseList<Integer>>runListTest(
                    TR, rpchostname, rpcport, sf, numthreads,
                    numlists, numops, numkeys, new SeqIntGenerator(), "CorfuDBCoarseList");
        }
        else if(testnum==TXLISTFINE) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBTester.<Integer, CDBList<Integer>>runListTest(
                    TR, rpchostname, rpcport, sf, numthreads,
                    numlists, numops, numkeys, new SeqIntGenerator(), "CDBList");
        }
// LEFT //        else if(testnum==TXLISTFINEMAP) {
// LEFT //            System.out.println("selected CDBMList test...");
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            System.out.println("running CDBMList test...");
// LEFT //            CorfuDBTester.<Integer, CDBList<Integer>>runListTest(
// LEFT //                    TR, rpchostname, rpcport, sf, numthreads,
// LEFT //                    numlists, numops, numkeys, new SeqIntGenerator(), "CDBMList");
// LEFT //        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }


        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_08783-7bac5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_01b9c-2956e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78d7e-3fe07
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_54f3a-0423b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c2d33-9f357
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2f8b3-3cbd3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7e96e-b0bee
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7e96e_b0bee\rev_rev_left_7e96e-rev_right_b0bee\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: []
Right editions: [83]
Merged body: 
// START print_usage({FormalParametersInternal})//static void print_usage()
    {
        System.out.println("usage: java CorfuDBTester");
        System.out.println("\t-m masternode");
        System.out.println("\t[-a testtype] (0==TXTest|1==LinMapTest|2==StreamTest|3==MultiClientTXTest|4==LinCounterTest)");
        System.out.println("\t[-t number of threads]");
        System.out.println("\t[-n number of ops]");
        System.out.println("\t[-k number of keys used in list tests]");
        System.out.println("\t[-l number of lists used in list tests]");
        System.out.println("\t[-p rpcport]");
        System.out.println("\t[-e expernum (for MultiClientTXTest)]");
        System.out.println("\t[-c numclients (for MultiClientTXTest)]");
        System.out.println("\t[-k numkeys (for TXTest)]");
        System.out.println("\t[-v verbose mode...]");
// RIGHT //        System.out.println("\t[-x extreme debug mode (requires -v)]");
        System.out.println("\t[-r read write pct (double)]");

//        if(dbglog instanceof SimpleLogger)
//            System.out.println("using SimpleLogger: run with -Dorg.slf4j.simpleLogger.defaultLogLevel=debug to " +
//                    "enable debug printouts");
// END print_usage({FormalParametersInternal})//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7e96e_b0bee\rev_rev_left_7e96e-rev_right_b0bee\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 263, 272, 290]
Right editions: [129, 134, 135, 136]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLOGICALLIST=6;
        final int TXLINKEDLIST=7;
        final int TXDOUBLYLINKEDLIST=8;
        final int LINZK=9;

        int numclients = 2;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        boolean verbose = false;
        double rwpct = 0.25;

        if(args.length==0)
        {
            print_usage();
            return;
        }

// RIGHT //        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:r:vx");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
// RIGHT //                case 'x':
// RIGHT //                    TXListTester.extremeDebug = true;
// RIGHT //                    break;
                case 'v':
                    verbose = true;
                    break;
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'r':
                    strArg = g.getOptarg();
                    System.out.println("rwpct = "+ strArg);
                    rwpct = Double.parseDouble(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            Map<Integer, Integer> cob1 = null;
// LEFT //            boolean partitionedmap = true;
// LEFT //            if(!partitionedmap)
// LEFT //            {
// LEFT //                cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //            }
// LEFT //            else
// LEFT //            {
// LEFT //                Map<Integer, Integer> partmaparray[] = new Map[10];
// LEFT //                for (int i = 0; i < partmaparray.length; i++)
// LEFT //                    partmaparray[i] = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //                cob1 = new PartitionedMap<Integer, Integer>(partmaparray);
// LEFT //            }
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new MapTesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new CtrTesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// LEFT //            int numpartitions = 10;
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
// LEFT //                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i, numpartitions);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
            }
            for(int i=0;i<numthreads;i++)
                threads[i].start();
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
            {
                System.out.println("Consistency check failed!");
                System.out.println(firsttester.map1);
                System.out.println(firsttester.map2);
            }
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLOGICALLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLogicalList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalList", verbose);
        }
        else if(testnum==TXLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLinkedList", verbose);
        }
        else if(testnum==TXDOUBLYLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBDoublyLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBDoublyLinkedList", verbose);
        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }
        else if(testnum==LINZK)
        {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            IZooKeeper zk = new CorfuDBZK(TR, DS.nameToStreamID("zookeeper"), false, null);
            if(zk.exists("/xyz",  true)==null)
                System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            else
                System.out.println("already exists");
            System.out.println(zk.exists("/xyz",  true));
            zk.setData("/xyz", "AAA".getBytes(), -1);
            System.out.println(new String(zk.getData("/xyz", false, null)));
            zk.delete("/xyz", -1);
            System.out.println(zk.exists("/xyz",  true));
            System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            Thread.sleep(1000);
            int numzops = 100;
            //synchronous testing
            for(int i=0;i<numzops;i++)
                zk.create("/xyz/" + i, "AAA".getBytes(), null, CreateMode.PERSISTENT);
            for(int i=0;i<numzops;i++)
                zk.setData("/xyz/" + i, "BBB".getBytes(), -1);
            for(int i=0;i<numzops;i++)
                zk.exists("/xyz/" + i, false);
            for(int i=0;i<numzops;i++)
                zk.getData("/xyz/" + i, false, null);
            for(int i=0;i<numzops;i++)
                zk.getChildren("/xyz/" + i, false);
            //atomic rename
            int txretries = 0;
            int moves = 0;
            for(int i=0;i<numzops;i++)
            {
                while(true)
                {
                    TR.BeginTX();
                    String src = "/xyz/" + (int)((Math.random()*(double)numzops));
                    String dest = "/xyz/" + (int)((Math.random()*(double)numzops*2));
                    if(zk.exists(src, false)!=null && zk.exists(dest, false)==null)
                    {
                        moves++;
                        byte[] data = zk.getData(src, false, null);
                        zk.delete(src, -1);
                        zk.create(dest, data, null, CreateMode.PERSISTENT); //take mode from old item?
                    }
                    if (TR.EndTX())
                    {
                        break;
                    }
                    else
                        txretries++;
                }
            }
            System.out.println("atomic renames: " + moves + " moves, " + txretries + " TX retries.");
            for(int i=0;i<numzops;i++)
                zk.delete("/xyz/" + i, -1);
            for(int i=0;i<numzops;i++)
                System.out.println("Sequential --- " + zk.create("/xyzaaa", "qwerty".getBytes(), null, CreateMode.PERSISTENT_SEQUENTIAL));
            List<String> childnodes = zk.getChildren("/", false);
            Iterator<String> it = childnodes.iterator();
            while(it.hasNext())
                zk.delete(it.next(), -1);
            zk.create("/abcd", "QWE".getBytes(), null, CreateMode.PERSISTENT);
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7e96e_b0bee\rev_rev_left_7e96e-rev_right_b0bee\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 263, 272, 290]
Right editions: [129, 134, 135, 136]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLOGICALLIST=6;
        final int TXLINKEDLIST=7;
        final int TXDOUBLYLINKEDLIST=8;
        final int LINZK=9;

        int numclients = 2;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        boolean verbose = false;
        double rwpct = 0.25;

        if(args.length==0)
        {
            print_usage();
            return;
        }

// RIGHT //        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:r:vx");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
// RIGHT //                case 'x':
// RIGHT //                    TXListTester.extremeDebug = true;
// RIGHT //                    break;
                case 'v':
                    verbose = true;
                    break;
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'r':
                    strArg = g.getOptarg();
                    System.out.println("rwpct = "+ strArg);
                    rwpct = Double.parseDouble(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            Map<Integer, Integer> cob1 = null;
// LEFT //            boolean partitionedmap = true;
// LEFT //            if(!partitionedmap)
// LEFT //            {
// LEFT //                cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //            }
// LEFT //            else
// LEFT //            {
// LEFT //                Map<Integer, Integer> partmaparray[] = new Map[10];
// LEFT //                for (int i = 0; i < partmaparray.length; i++)
// LEFT //                    partmaparray[i] = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //                cob1 = new PartitionedMap<Integer, Integer>(partmaparray);
// LEFT //            }
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new MapTesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new CtrTesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// LEFT //            int numpartitions = 10;
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
// LEFT //                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i, numpartitions);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
            }
            for(int i=0;i<numthreads;i++)
                threads[i].start();
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
            {
                System.out.println("Consistency check failed!");
                System.out.println(firsttester.map1);
                System.out.println(firsttester.map2);
            }
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLOGICALLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLogicalList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalList", verbose);
        }
        else if(testnum==TXLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLinkedList", verbose);
        }
        else if(testnum==TXDOUBLYLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBDoublyLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBDoublyLinkedList", verbose);
        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }
        else if(testnum==LINZK)
        {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            IZooKeeper zk = new CorfuDBZK(TR, DS.nameToStreamID("zookeeper"), false, null);
            if(zk.exists("/xyz",  true)==null)
                System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            else
                System.out.println("already exists");
            System.out.println(zk.exists("/xyz",  true));
            zk.setData("/xyz", "AAA".getBytes(), -1);
            System.out.println(new String(zk.getData("/xyz", false, null)));
            zk.delete("/xyz", -1);
            System.out.println(zk.exists("/xyz",  true));
            System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            Thread.sleep(1000);
            int numzops = 100;
            //synchronous testing
            for(int i=0;i<numzops;i++)
                zk.create("/xyz/" + i, "AAA".getBytes(), null, CreateMode.PERSISTENT);
            for(int i=0;i<numzops;i++)
                zk.setData("/xyz/" + i, "BBB".getBytes(), -1);
            for(int i=0;i<numzops;i++)
                zk.exists("/xyz/" + i, false);
            for(int i=0;i<numzops;i++)
                zk.getData("/xyz/" + i, false, null);
            for(int i=0;i<numzops;i++)
                zk.getChildren("/xyz/" + i, false);
            //atomic rename
            int txretries = 0;
            int moves = 0;
            for(int i=0;i<numzops;i++)
            {
                while(true)
                {
                    TR.BeginTX();
                    String src = "/xyz/" + (int)((Math.random()*(double)numzops));
                    String dest = "/xyz/" + (int)((Math.random()*(double)numzops*2));
                    if(zk.exists(src, false)!=null && zk.exists(dest, false)==null)
                    {
                        moves++;
                        byte[] data = zk.getData(src, false, null);
                        zk.delete(src, -1);
                        zk.create(dest, data, null, CreateMode.PERSISTENT); //take mode from old item?
                    }
                    if (TR.EndTX())
                    {
                        break;
                    }
                    else
                        txretries++;
                }
            }
            System.out.println("atomic renames: " + moves + " moves, " + txretries + " TX retries.");
            for(int i=0;i<numzops;i++)
                zk.delete("/xyz/" + i, -1);
            for(int i=0;i<numzops;i++)
                System.out.println("Sequential --- " + zk.create("/xyzaaa", "qwerty".getBytes(), null, CreateMode.PERSISTENT_SEQUENTIAL));
            List<String> childnodes = zk.getChildren("/", false);
            Iterator<String> it = childnodes.iterator();
            while(it.hasNext())
                zk.delete(it.next(), -1);
            zk.create("/abcd", "QWE".getBytes(), null, CreateMode.PERSISTENT);
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7e96e_b0bee\rev_rev_left_7e96e-rev_right_b0bee\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [566, 575, 580, 581, 582, 583, 584, 585, 586, 587, 588]
Right editions: []
Merged body: 
// START check_consistency({FormalParametersInternal})//public boolean check_consistency()
    {
        boolean consistent = true;
        int numretries = 10;
        int j = 0;
        for(j=0;j<numretries;j++)
        {
            cr.BeginTX();
            for (int i = 0; i < numkeys; i++)
            {
                if (map1.containsKey(i))
                {
                    if (!map2.containsKey(map1.get(i)) || map2.get(map1.get(i)) != i)
                    {
                        consistent = false;
// LEFT //                        System.out.println("inconsistency on " + i);
                        break;
                    }
                }
                if (map2.containsKey(i))
                {
                    if (!map1.containsKey(map2.get(i)) || map1.get(map2.get(i)) != i)
                    {
                        consistent = false;
// LEFT //                        System.out.println("inconsistency on " + i);
                        break;
                    }
                }
            }
// LEFT //            if (cr.EndTX())
// LEFT //            {
// LEFT //                break;
// LEFT //            }
// LEFT //            else
// LEFT //            {
// LEFT //                consistent = true;
// LEFT //                System.out.println("abort! retrying consistency check...");
// LEFT //            }
        }
        if(j==numretries) throw new RuntimeException("too many aborts on consistency check");
        return consistent;
// END check_consistency({FormalParametersInternal})//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7e96e_b0bee\rev_rev_left_7e96e-rev_right_b0bee\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 263, 272, 290]
Right editions: [129, 134, 135, 136]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLOGICALLIST=6;
        final int TXLINKEDLIST=7;
        final int TXDOUBLYLINKEDLIST=8;
        final int LINZK=9;

        int numclients = 2;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        boolean verbose = false;
        double rwpct = 0.25;

        if(args.length==0)
        {
            print_usage();
            return;
        }

// RIGHT //        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:r:vx");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
// RIGHT //                case 'x':
// RIGHT //                    TXListTester.extremeDebug = true;
// RIGHT //                    break;
                case 'v':
                    verbose = true;
                    break;
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'r':
                    strArg = g.getOptarg();
                    System.out.println("rwpct = "+ strArg);
                    rwpct = Double.parseDouble(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            Map<Integer, Integer> cob1 = null;
// LEFT //            boolean partitionedmap = true;
// LEFT //            if(!partitionedmap)
// LEFT //            {
// LEFT //                cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //            }
// LEFT //            else
// LEFT //            {
// LEFT //                Map<Integer, Integer> partmaparray[] = new Map[10];
// LEFT //                for (int i = 0; i < partmaparray.length; i++)
// LEFT //                    partmaparray[i] = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
// LEFT //                cob1 = new PartitionedMap<Integer, Integer>(partmaparray);
// LEFT //            }
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new MapTesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
// LEFT //                threads[i] = new Thread(new CtrTesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// LEFT //            int numpartitions = 10;
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
// LEFT //                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i, numpartitions);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
            }
            for(int i=0;i<numthreads;i++)
                threads[i].start();
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
            {
                System.out.println("Consistency check failed!");
                System.out.println(firsttester.map1);
                System.out.println(firsttester.map2);
            }
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLOGICALLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLogicalList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalList", verbose);
        }
        else if(testnum==TXLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLinkedList", verbose);
        }
        else if(testnum==TXDOUBLYLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBDoublyLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBDoublyLinkedList", verbose);
        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }
        else if(testnum==LINZK)
        {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            IZooKeeper zk = new CorfuDBZK(TR, DS.nameToStreamID("zookeeper"), false, null);
            if(zk.exists("/xyz",  true)==null)
                System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            else
                System.out.println("already exists");
            System.out.println(zk.exists("/xyz",  true));
            zk.setData("/xyz", "AAA".getBytes(), -1);
            System.out.println(new String(zk.getData("/xyz", false, null)));
            zk.delete("/xyz", -1);
            System.out.println(zk.exists("/xyz",  true));
            System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            Thread.sleep(1000);
            int numzops = 100;
            //synchronous testing
            for(int i=0;i<numzops;i++)
                zk.create("/xyz/" + i, "AAA".getBytes(), null, CreateMode.PERSISTENT);
            for(int i=0;i<numzops;i++)
                zk.setData("/xyz/" + i, "BBB".getBytes(), -1);
            for(int i=0;i<numzops;i++)
                zk.exists("/xyz/" + i, false);
            for(int i=0;i<numzops;i++)
                zk.getData("/xyz/" + i, false, null);
            for(int i=0;i<numzops;i++)
                zk.getChildren("/xyz/" + i, false);
            //atomic rename
            int txretries = 0;
            int moves = 0;
            for(int i=0;i<numzops;i++)
            {
                while(true)
                {
                    TR.BeginTX();
                    String src = "/xyz/" + (int)((Math.random()*(double)numzops));
                    String dest = "/xyz/" + (int)((Math.random()*(double)numzops*2));
                    if(zk.exists(src, false)!=null && zk.exists(dest, false)==null)
                    {
                        moves++;
                        byte[] data = zk.getData(src, false, null);
                        zk.delete(src, -1);
                        zk.create(dest, data, null, CreateMode.PERSISTENT); //take mode from old item?
                    }
                    if (TR.EndTX())
                    {
                        break;
                    }
                    else
                        txretries++;
                }
            }
            System.out.println("atomic renames: " + moves + " moves, " + txretries + " TX retries.");
            for(int i=0;i<numzops;i++)
                zk.delete("/xyz/" + i, -1);
            for(int i=0;i<numzops;i++)
                System.out.println("Sequential --- " + zk.create("/xyzaaa", "qwerty".getBytes(), null, CreateMode.PERSISTENT_SEQUENTIAL));
            List<String> childnodes = zk.getChildren("/", false);
            Iterator<String> it = childnodes.iterator();
            while(it.hasNext())
                zk.delete(it.next(), -1);
            zk.create("/abcd", "QWE".getBytes(), null, CreateMode.PERSISTENT);
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2ed34-3dd80
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_24e9d-2936d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_73fa4-b997c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_53627-9ad4f
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_53627_9ad4f\rev_rev_left_53627-rev_right_9ad4f\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [108, 109, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363]
Right editions: [236, 237, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 284]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLOGICALLIST=6;
        final int TXLINKEDLIST=7;
        final int TXDOUBLYLINKEDLIST=8;
        final int LINZK=9;
// LEFT //        final int TXLOGICALBTREE = 10;
// LEFT //        final int TXPHYSICALBTREE = 11;

        int numclients = 2;
        int expernum = 1; //used by the barrier code

        int c;
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        boolean verbose = false;
        double rwpct = 0.25;

        if(args.length==0)
        {
            print_usage();
            return;
        }

        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:r:vx");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
                case 'x':
                    TXListTester.extremeDebug = true;
                    break;
                case 'v':
                    verbose = true;
                    break;
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'r':
                    strArg = g.getOptarg();
                    System.out.println("rwpct = "+ strArg);
                    rwpct = Double.parseDouble(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

        StreamFactory sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            Map<Integer, Integer> cob1 = null;
// RIGHT //            int numpartitions = 10;
// RIGHT //            if(numpartitions==0)
            {
// RIGHT //                TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
                cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
            }
            else
            {
// RIGHT //                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// RIGHT //                CDBLinkedList<Long> partitionlist = new CDBLinkedList<>(TR, sf, DirectoryService.getUniqueID(sf));
// RIGHT //                while(true)
// RIGHT //                {
// RIGHT //                    TR.BeginTX();
// RIGHT //                    if(partitionlist.size()!=numpartitions)
// RIGHT //                    {
// RIGHT //                        for (int i = 0; i < numpartitions; i++)
// RIGHT //                            partitionlist.add(DirectoryService.getUniqueID(sf));
// RIGHT //                    }
// RIGHT //                    if(TR.EndTX()) break;
// RIGHT //                }
// RIGHT //                cob1 = new PartitionedMap<Integer, Integer>(partitionlist, TR);
            }
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new MapTesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new CtrTesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
// RIGHT //            int numpartitions = 0;
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i, numpartitions);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
            }
            for(int i=0;i<numthreads;i++)
                threads[i].start();
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
            {
                System.out.println("Consistency check failed!");
                System.out.println(firsttester.map1);
                System.out.println(firsttester.map2);
            }
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLOGICALLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLogicalList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalList", verbose);
        }
        else if(testnum==TXLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLinkedList", verbose);
        }
        else if(testnum==TXDOUBLYLINKEDLIST) {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            TXListTester.<Integer, CDBDoublyLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBDoublyLinkedList", verbose);
        }
// LEFT //        else if(testnum==TXLOGICALBTREE) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            BTreeTester.<String, String, CDBLogicalBTree<String, String>>runTest(
// LEFT //                    TR, sf, BTreeTester.testcase.functional,
// LEFT //                    numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalBTree", verbose);
// LEFT //        }
// LEFT //        else if(testnum==TXPHYSICALBTREE) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
// LEFT //            BTreeTester.<String, String, CDBPhysicalBTree<String, String>>runTest(
// LEFT //                    TR, sf, BTreeTester.testcase.functional,
// LEFT //                    numthreads, numlists, numops, numkeys, rwpct, "CDBPhysicalBTree", verbose);
// LEFT //        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }
        else if(testnum==LINZK)
        {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            IZooKeeper zk = new CorfuDBZK(TR, DS.nameToStreamID("zookeeper"), false, null);
            if(zk.exists("/xyz",  true)==null)
                System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            else
                System.out.println("already exists");
            System.out.println(zk.exists("/xyz",  true));
            zk.setData("/xyz", "AAA".getBytes(), -1);
            System.out.println(new String(zk.getData("/xyz", false, null)));
            zk.delete("/xyz", -1);
            System.out.println(zk.exists("/xyz",  true));
            System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            Thread.sleep(1000);
            int numzops = 100;
            //synchronous testing
            for(int i=0;i<numzops;i++)
                zk.create("/xyz/" + i, "AAA".getBytes(), null, CreateMode.PERSISTENT);
            for(int i=0;i<numzops;i++)
                zk.setData("/xyz/" + i, "BBB".getBytes(), -1);
            for(int i=0;i<numzops;i++)
                zk.exists("/xyz/" + i, false);
            for(int i=0;i<numzops;i++)
                zk.getData("/xyz/" + i, false, null);
            for(int i=0;i<numzops;i++)
                zk.getChildren("/xyz/" + i, false);
            //atomic rename
            int txretries = 0;
            int moves = 0;
            for(int i=0;i<numzops;i++)
            {
                while(true)
                {
                    TR.BeginTX();
                    String src = "/xyz/" + (int)((Math.random()*(double)numzops));
                    String dest = "/xyz/" + (int)((Math.random()*(double)numzops*2));
                    if(zk.exists(src, false)!=null && zk.exists(dest, false)==null)
                    {
                        moves++;
                        byte[] data = zk.getData(src, false, null);
                        zk.delete(src, -1);
                        zk.create(dest, data, null, CreateMode.PERSISTENT); //take mode from old item?
                    }
                    if (TR.EndTX())
                    {
                        break;
                    }
                    else
                        txretries++;
                }
            }
            System.out.println("atomic renames: " + moves + " moves, " + txretries + " TX retries.");
            for(int i=0;i<numzops;i++)
                zk.delete("/xyz/" + i, -1);
            for(int i=0;i<numzops;i++)
                System.out.println("Sequential --- " + zk.create("/xyzaaa", "qwerty".getBytes(), null, CreateMode.PERSISTENT_SEQUENTIAL));
            List<String> childnodes = zk.getChildren("/", false);
            Iterator<String> it = childnodes.iterator();
            while(it.hasNext())
                zk.delete(it.next(), -1);
            zk.create("/abcd", "QWE".getBytes(), null, CreateMode.PERSISTENT);
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_69e46-b7144
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_737c1-36965
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6ac39-7e3de
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_6ac39_7e3de\rev_rev_left_6ac39-rev_right_7e3de\src\main\java\org\corfudb\runtime\TXRuntime.java
Different Spacing: false
Left editions: [718]
Right editions: [674, 698, 735]
Merged body: 
// START process_tx_decision(Object-Object-long-long-ITimestamp-ITimestamp)//public void process_tx_decision(Object command, long curstream, ITimestamp timestamp)
    {
        if (txr.trackstats)
        {
            txr.ctr_numtxdec.incrementAndGet();
        }

//        if(trackstats)
//        {
//            if(decision==VAL_COMMIT) ctr_numcommits.incrementAndGet();
//            else if(decision==VAL_ABORT) ctr_numaborts.incrementAndGet();
//            else if(decision==VAL_UNDECIDED) ctr_numundecided.incrementAndGet();
//        }



        TxDec decrec = (TxDec)command;

        dbglog.debug("[" + cob.getID() + "] process_tx_dec " + curstream + "." + timestamp + " for txint at " + curstream + "." + decrec.txint_timestamp);


// RIGHT //        TxInt T = getPending(decrec.txid);
        if(T==null) //already been decided and applied by this TXEngine
        {
            return;
        }

        //we index over all streams here; if stream appends are reliable, we can switch this to only readstreams
        Pair<Boolean, Boolean> P = txr.updateDecisionState(decrec.txid, T.get_allstreams().get(decrec.stream), T.get_allstreams().size(), decrec.decision);

        if(txr.trackstats)
        {
            if(P.first)
            {
                if(P.second) txr.ctr_numcommits.incrementAndGet();
                else txr.ctr_numaborts.incrementAndGet();
            }
        }

        if(P.first) //final decision has been made
        {
            if(P.second) //... and is a commit
            {
                ArrayList<CorfuDBObject> lockset = lockWriteSet(decrec, curstream);
                try {
// RIGHT //                    Iterator<TxIntWriteSetEntry> it = getPending(decrec.txid).get_bufferedupdates().iterator();
                    while (it.hasNext()) {
                        TxIntWriteSetEntry P2 = it.next();
                        //no need to lock since each object can only be modified by its underlying TXEngine, which
                        //in turn is only entered by the underlying SMREngine thread.
                        //todo: do we have to do 2-phase locking?
                        //the only bad thing that can happen is that reads see an inconsistent state
                        //but this can happen anyway, and in this case the transaction will abort
                        //todo: think about providing tx opacity across the board
                        if (P2.objectid != curstream) continue;
                        CorfuDBObject cob = txr.getObject(P2.objectid);
                        if (cob == null) throw new RuntimeException("not a registered object!");
                        //cob.lock(true);
                        try
                        {
                            cob.applyToObject(P2.command, decrec.txint_timestamp);
                        }
                        catch(Exception e)
                        {
                            dbglog.warn(e.toString());
// LEFT //                            System.out.println(e.toString() + " " + e.getStackTrace());
                            ((CorfuDBObjectCommand)P2.command).setException(e);
                        }
                        cob.setTimestamp(decrec.txint_timestamp, P2.key); //use the intention's timestamp
                        //cob.unlock(true);
//                    System.out.println("object " + cob.getID() + " timestamp set to " + cob.getTimestamp());
                    }
                }
                catch(Exception e)
                {
                  throw e;
                }
                finally
                {
                    unlockWriteSet(lockset);
                }
            }
// RIGHT //            removePending(decrec.txid);
            //todo: if it's an abort, we can notify the app earlier
//            if(txr.updateApplyStatus(decrec.txint_timestamp, T.get_updatestreams().get(decrec.stream), T.get_updatestreams().size()))
                txr.updateFinalDecision(decrec.txid, P.second); //notify the application

        }
// END process_tx_decision(Object-Object-long-long-ITimestamp-ITimestamp)//    }

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_6ac39_7e3de\rev_rev_left_6ac39-rev_right_7e3de\src\main\java\org\corfudb\runtime\TXRuntime.java
Different Spacing: false
Left editions: []
Right editions: [749]
Merged body: 
// START lockWriteSet(TxDec-TxDec-long-long)//protected ArrayList<CorfuDBObject> lockWriteSet(TxDec decrec, long curstream) {
        if(true) return null;
        ArrayList<CorfuDBObject> lockset = null;
        if (lockWritesetForCommit) {
            lockset = new ArrayList<CorfuDBObject>();
// RIGHT //            Iterator<TxIntWriteSetEntry> it = getPending(decrec.txid).get_bufferedupdates().iterator();
            while (it.hasNext()) {
                TxIntWriteSetEntry P2 = it.next();
                if (P2.objectid != curstream) continue;
                CorfuDBObject cob = txr.getObject(P2.objectid);
                if (cob == null) throw new RuntimeException("not a registered object!");
                lockset.add(cob);
            }
            Collections.sort(lockset);
            Iterator<CorfuDBObject> lit = lockset.iterator();
            while (lit.hasNext()) {
                CorfuDBObject cob = lit.next();
                // System.out.format("  write-locking %d for commit updates\n", cob.getID());
                cob.lock(true);
            }
        }
        return lockset;
// END lockWriteSet(TxDec-TxDec-long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_6ac39_7e3de\rev_rev_left_6ac39-rev_right_7e3de\src\main\java\org\corfudb\runtime\TXRuntime.java
Different Spacing: false
Left editions: [718]
Right editions: [674, 698, 735]
Merged body: 
// START process_tx_decision(Object-Object-long-long-ITimestamp-ITimestamp)//public void process_tx_decision(Object command, long curstream, ITimestamp timestamp)
    {
        if (txr.trackstats)
        {
            txr.ctr_numtxdec.incrementAndGet();
        }

//        if(trackstats)
//        {
//            if(decision==VAL_COMMIT) ctr_numcommits.incrementAndGet();
//            else if(decision==VAL_ABORT) ctr_numaborts.incrementAndGet();
//            else if(decision==VAL_UNDECIDED) ctr_numundecided.incrementAndGet();
//        }



        TxDec decrec = (TxDec)command;

        dbglog.debug("[" + cob.getID() + "] process_tx_dec " + curstream + "." + timestamp + " for txint at " + curstream + "." + decrec.txint_timestamp);


// RIGHT //        TxInt T = getPending(decrec.txid);
        if(T==null) //already been decided and applied by this TXEngine
        {
            return;
        }

        //we index over all streams here; if stream appends are reliable, we can switch this to only readstreams
        Pair<Boolean, Boolean> P = txr.updateDecisionState(decrec.txid, T.get_allstreams().get(decrec.stream), T.get_allstreams().size(), decrec.decision);

        if(txr.trackstats)
        {
            if(P.first)
            {
                if(P.second) txr.ctr_numcommits.incrementAndGet();
                else txr.ctr_numaborts.incrementAndGet();
            }
        }

        if(P.first) //final decision has been made
        {
            if(P.second) //... and is a commit
            {
                ArrayList<CorfuDBObject> lockset = lockWriteSet(decrec, curstream);
                try {
// RIGHT //                    Iterator<TxIntWriteSetEntry> it = getPending(decrec.txid).get_bufferedupdates().iterator();
                    while (it.hasNext()) {
                        TxIntWriteSetEntry P2 = it.next();
                        //no need to lock since each object can only be modified by its underlying TXEngine, which
                        //in turn is only entered by the underlying SMREngine thread.
                        //todo: do we have to do 2-phase locking?
                        //the only bad thing that can happen is that reads see an inconsistent state
                        //but this can happen anyway, and in this case the transaction will abort
                        //todo: think about providing tx opacity across the board
                        if (P2.objectid != curstream) continue;
                        CorfuDBObject cob = txr.getObject(P2.objectid);
                        if (cob == null) throw new RuntimeException("not a registered object!");
                        //cob.lock(true);
                        try
                        {
                            cob.applyToObject(P2.command, decrec.txint_timestamp);
                        }
                        catch(Exception e)
                        {
                            dbglog.warn(e.toString());
// LEFT //                            System.out.println(e.toString() + " " + e.getStackTrace());
                            ((CorfuDBObjectCommand)P2.command).setException(e);
                        }
                        cob.setTimestamp(decrec.txint_timestamp, P2.key); //use the intention's timestamp
                        //cob.unlock(true);
//                    System.out.println("object " + cob.getID() + " timestamp set to " + cob.getTimestamp());
                    }
                }
                catch(Exception e)
                {
                  throw e;
                }
                finally
                {
                    unlockWriteSet(lockset);
                }
            }
// RIGHT //            removePending(decrec.txid);
            //todo: if it's an abort, we can notify the app earlier
//            if(txr.updateApplyStatus(decrec.txint_timestamp, T.get_updatestreams().get(decrec.stream), T.get_updatestreams().size()))
                txr.updateFinalDecision(decrec.txid, P.second); //notify the application

        }
// END process_tx_decision(Object-Object-long-long-ITimestamp-ITimestamp)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_6ac39_7e3de\rev_rev_left_6ac39-rev_right_7e3de\src\main\java\org\corfudb\runtime\CorfuDBTester.java
Different Spacing: false
Left editions: [354, 359, 364, 369, 374]
Right editions: [211, 212, 213, 214, 235, 236, 237, 238, 239, 240, 241]
Merged body: 
// START main(String[]-String[])//public static void main(String[] args) throws Exception
    {
        final int TXTEST=0;
        final int LINTEST=1;
        final int STREAMTEST=2;
        final int MULTICLIENTTXTEST=3;
        final int LINCTRTEST=4;
        final int REMOBJTEST=5;
        final int TXLOGICALLIST=6;
        final int TXLINKEDLIST=7;
        final int TXDOUBLYLINKEDLIST=8;
        final int LINZK=9;
        final int TXLOGICALBTREE = 10;
        final int TXPHYSICALBTREE = 11;

        int c;
        int numclients = 2;
        int expernum = 1; //used by the barrier code
        String strArg;
        int numthreads = 1;
        int numops = 1000;
        int numkeys = 100;
        int numlists = 2;
        int testnum = 0;
        int rpcport = 9090;
        String masternode = null;
        boolean verbose = false;
        double rwpct = 0.25;
        String testCase = "functional";

        if(args.length==0)
        {
            print_usage();
            return;
        }

        Getopt g = new Getopt("CorfuDBTester", args, "a:m:t:n:p:e:k:c:l:r:vxT:");
        while ((c = g.getopt()) != -1)
        {
            switch(c)
            {
                case 'T':
                    testCase = g.getOptarg();
                    break;
                case 'x':
                    TXListTester.extremeDebug = true;
                    BTreeTester.extremeDebug = true;
                    BTreeTester.trackOps = true;
                    break;
                case 'v':
                    verbose = true;
                    break;
                case 'a':
                    strArg = g.getOptarg();
                    System.out.println("testtype = "+ strArg);
                    testnum = Integer.parseInt(strArg);
                    break;
                case 'r':
                    strArg = g.getOptarg();
                    System.out.println("rwpct = "+ strArg);
                    rwpct = Double.parseDouble(strArg);
                    break;
                case 'm':
                    masternode = g.getOptarg();
                    masternode = masternode.trim();
                    System.out.println("master = " + masternode);
                    break;
                case 't':
                    strArg = g.getOptarg();
                    System.out.println("numthreads = "+ strArg);
                    numthreads = Integer.parseInt(strArg);
                    break;
                case 'n':
                    strArg = g.getOptarg();
                    System.out.println("numops = "+ strArg);
                    numops = Integer.parseInt(strArg);
                    break;
                case 'k':
                    strArg = g.getOptarg();
                    System.out.println("numkeys = "+ strArg);
                    numkeys = Integer.parseInt(strArg);
                    break;
                case 'l':
                    strArg = g.getOptarg();
                    System.out.println("numlists = "+ strArg);
                    numlists = Integer.parseInt(strArg);
                    break;
                case 'p':
                    strArg = g.getOptarg();
                    System.out.println("rpcport = "+ strArg);
                    rpcport = Integer.parseInt(strArg);
                    break;
                case 'c':
                    strArg = g.getOptarg();
                    System.out.println("numbarrier = " + strArg);
                    numclients = Integer.parseInt(strArg);
                    break;
                case 'e':
                    strArg = g.getOptarg();
                    System.out.println("expernum = " + strArg);
                    expernum = Integer.parseInt(strArg);
                default:
                    System.out.print("getopt() returned " + c + "\n");
            }
        }

        if(masternode == null)
            throw new Exception("must provide master http address using -m flag");
        if(numthreads < 1)
            throw new Exception("need at least one thread!");
        if(numops < 1)
            throw new Exception("need at least one op!");


// RIGHT //        final int DUMMYSTREAMIMPL = 0;
// RIGHT //        final int HOPSTREAMIMPL = 1;
// RIGHT //        int streamimpl = DUMMYSTREAMIMPL;
// RIGHT //
        String rpchostname;

        try
        {
            rpchostname = InetAddress.getLocalHost().getHostName();
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }


        CorfuDBClient crf;

        crf = new CorfuDBClient(masternode);
        crf.startViewManager();
        crf.waitForViewReady();

        Thread[] threads = new Thread[numthreads];

// RIGHT //        StreamFactory sf;
// RIGHT //        if(streamimpl==DUMMYSTREAMIMPL)
// RIGHT //            sf = new StreamFactoryImpl(new CorfuLogAddressSpace(crf, 0), new CorfuStreamingSequencer(crf)); //todo: fill in the right logid
// RIGHT //        else if(streamimpl==HOPSTREAMIMPL)
// RIGHT //            sf = new HopAdapterStreamFactoryImpl(crf);
// RIGHT //        else
// RIGHT //            throw new RuntimeException("unknown stream implementation");

        long starttime = System.currentTimeMillis();

        AbstractRuntime TR = null;
        DirectoryService DS = null;
        CorfuDBCounter barrier=null;

        if(testnum==LINTEST)
        {
            Map<Integer, Integer> cob1 = null;
            int numpartitions = 10;
            if(numpartitions==0)
            {
                TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
                cob1 = new CorfuDBMap<Integer, Integer>(TR, DirectoryService.getUniqueID(sf));
            }
            else
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
                CDBLinkedList<Long> partitionlist = new CDBLinkedList<>(TR, sf, DirectoryService.getUniqueID(sf));
                while(true)
                {
                    TR.BeginTX();
                    if(partitionlist.size()!=numpartitions)
                    {
                        for (int i = 0; i < numpartitions; i++)
                            partitionlist.add(DirectoryService.getUniqueID(sf));
                    }
                    if(TR.EndTX()) break;
                }
                cob1 = new PartitionedMap<Integer, Integer>(partitionlist, TR);
            }
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new MapTesterThread(cob1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==LINCTRTEST)
        {
            TR = new SimpleRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            CorfuDBCounter ctr1 = new CorfuDBCounter(TR, DirectoryService.getUniqueID(sf));
            for (int i = 0; i < numthreads; i++)
            {
                //linearizable tester
                threads[i] = new Thread(new CtrTesterThread(ctr1));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test succeeded!");
        }
        else if(testnum==TXTEST)
        {
            int numpartitions = 0;
            boolean perthreadstack = true;
            CorfuDBMap<Integer, Integer> cob1 = null;
            CorfuDBMap<Integer, Integer> cob2 = null;
            if(!perthreadstack)
            {
                TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

                DS = new DirectoryService(TR);
                cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap1"));
                cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap2"));
            }
            TXTesterThread firsttester = null;
            for (int i = 0; i < numthreads; i++)
            {
                TXTesterThread ttt = null;
                //transactional tester
                if(perthreadstack)
                    ttt = new TXTesterThread(numkeys, numops, sf, rpchostname, rpcport+i, numpartitions);
                else
                    ttt = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
                if(i==0) firsttester = ttt;
                threads[i] = new Thread(ttt);
            }
            for(int i=0;i<numthreads;i++)
                threads[i].start();
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            System.out.println("Test done! Checking consistency...");
            if(firsttester.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
            {
                System.out.println("Consistency check failed!");
                System.out.println(firsttester.map1);
                System.out.println(firsttester.map2);
            }
            System.out.println(TR);
        }
        else if(testnum==STREAMTEST)
        {
            Stream sb = sf.newStream(1234);

            //trim the stream to get rid of entries from previous tests
            //sb.prefixTrim(sb.checkTail()); //todo: turning off, trim not yet implemented at log level
            for(int i=0;i<numthreads;i++)
            {
                threads[i] = new Thread(new StreamTester(sb, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
        }
        else if(testnum==TXLOGICALLIST) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport, true);
            TXListTester.<Integer, CDBLogicalList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalList", verbose);
        }
        else if(testnum==TXLINKEDLIST) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport, true);
            TXListTester.<Integer, CDBLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLinkedList", verbose);
        }
        else if(testnum==TXDOUBLYLINKEDLIST) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport, true);
            TXListTester.<Integer, CDBDoublyLinkedList<Integer>>runListTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBDoublyLinkedList", verbose);
        }
        else if(testnum==TXLOGICALBTREE) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport, true);
            BTreeTester.<String, String, CDBLogicalBTree<String, String>>runTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBLogicalBTree", testCase, verbose);
        }
        else if(testnum==TXPHYSICALBTREE) {
// LEFT //            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport, true);
            BTreeTester.<String, String, CDBPhysicalBTree<String, String>>runTest(
                    TR, sf, numthreads, numlists, numops, numkeys, rwpct, "CDBPhysicalBTree", testCase, verbose);
        }
        else if(testnum==REMOBJTEST)
        {
            //create two maps, one local, one remote
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);

            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);
            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2) + " " + cob2.getID());


            System.out.println("sleeping");
            Thread.sleep(10000);
            System.out.println("woke up");

            cob1.put(100, 55);
            System.out.println(cob1.size());
            System.out.println(cob2.size());
            Thread.sleep(5000);
            System.out.println("Test succeeded!");
        }
        else if(testnum==MULTICLIENTTXTEST)
        {
            //barrier code
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            CorfuDBMap<Integer, Integer> cob1 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + (rpcport%2)));
            CorfuDBMap<Integer, Integer> cob2 = new CorfuDBMap(TR, DS.nameToStreamID("testmap" + ((rpcport+1)%2)), true);

            barrier = new CorfuDBCounter(TR, DS.nameToStreamID("barrier" + expernum));
            if(barrier.read()>numclients)
            {
                System.out.println("This experiment number has been used before! Use a new number for the -e flag, or check" +
                        " that the -c flag correctly specifies the number of clients.");
                System.exit(0);
            }
            barrier.increment();
            long lastprinttime = System.currentTimeMillis();
            int curnumclients = 0;
            while((curnumclients = barrier.read()) < numclients)
            {
                if(System.currentTimeMillis()-lastprinttime>3000)
                {
                    System.out.println("current number of clients in barrier " + expernum + " = " + curnumclients);
                    lastprinttime = System.currentTimeMillis();
                }
            }
            dbglog.debug("Barrier reached; starting test...");

            System.out.println("local map = testmap" + (rpcport%2) + " " + cob1.getID());
            System.out.println("remote map = testmap" + ((rpcport+1)%2)+ " " + cob2.getID());

            for (int i = 0; i < numthreads; i++)
            {
                //transactional tester
                threads[i] = new Thread(new TXTesterThread(cob1, cob2, TR, numkeys, numops));
                threads[i].start();
            }
            for(int i=0;i<numthreads;i++)
                threads[i].join();
            barrier.increment();
            while(barrier.read() < 2*numclients)
                cob1.size(); //this ensures that we're still processing txints and issuing partial decisions to help other nodes
                             //need a cleaner way to ensure this
            dbglog.debug("second barrier reached; checking consistency...");
            System.out.println("Checking consistency...");
            TXTesterThread tx = new TXTesterThread(cob1, cob2, TR, numkeys, numops);
            if(tx.check_consistency())
                System.out.println("Consistency check passed --- test successful!");
            else
                System.out.println("Consistency check failed!");
            System.out.println(TR);
            barrier.increment();
            while(barrier.read() < 3*numclients);
            dbglog.debug("third barrier reached; test done");
            System.out.println("Test done!");
        }
        else if(testnum==LINZK)
        {
            TR = new TXRuntime(sf, DirectoryService.getUniqueID(sf), rpchostname, rpcport);
            DS = new DirectoryService(TR);
            IZooKeeper zk = new CorfuDBZK(TR, DS.nameToStreamID("zookeeper"), false, null);
            if(zk.exists("/xyz",  true)==null)
                System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            else
                System.out.println("already exists");
            System.out.println(zk.exists("/xyz",  true));
            zk.setData("/xyz", "AAA".getBytes(), -1);
            System.out.println(new String(zk.getData("/xyz", false, null)));
            zk.delete("/xyz", -1);
            System.out.println(zk.exists("/xyz",  true));
            System.out.println(zk.create("/xyz", "ABCD".getBytes(), null, CreateMode.PERSISTENT));
            Thread.sleep(1000);
            int numzops = 100;
            //synchronous testing
            for(int i=0;i<numzops;i++)
                zk.create("/xyz/" + i, "AAA".getBytes(), null, CreateMode.PERSISTENT);
            for(int i=0;i<numzops;i++)
                zk.setData("/xyz/" + i, "BBB".getBytes(), -1);
            for(int i=0;i<numzops;i++)
                zk.exists("/xyz/" + i, false);
            for(int i=0;i<numzops;i++)
                zk.getData("/xyz/" + i, false, null);
            for(int i=0;i<numzops;i++)
                zk.getChildren("/xyz/" + i, false);
            //atomic rename
            int txretries = 0;
            int moves = 0;
            for(int i=0;i<numzops;i++)
            {
                while(true)
                {
                    TR.BeginTX();
                    String src = "/xyz/" + (int)((Math.random()*(double)numzops));
                    String dest = "/xyz/" + (int)((Math.random()*(double)numzops*2));
                    if(zk.exists(src, false)!=null && zk.exists(dest, false)==null)
                    {
                        moves++;
                        byte[] data = zk.getData(src, false, null);
                        zk.delete(src, -1);
                        zk.create(dest, data, null, CreateMode.PERSISTENT); //take mode from old item?
                    }
                    if (TR.EndTX())
                    {
                        break;
                    }
                    else
                        txretries++;
                }
            }
            System.out.println("atomic renames: " + moves + " moves, " + txretries + " TX retries.");
            for(int i=0;i<numzops;i++)
                zk.delete("/xyz/" + i, -1);
            for(int i=0;i<numzops;i++)
                System.out.println("Sequential --- " + zk.create("/xyzaaa", "qwerty".getBytes(), null, CreateMode.PERSISTENT_SEQUENTIAL));
            List<String> childnodes = zk.getChildren("/", false);
            Iterator<String> it = childnodes.iterator();
            while(it.hasNext())
                zk.delete(it.next(), -1);
            zk.create("/abcd", "QWE".getBytes(), null, CreateMode.PERSISTENT);
        }

        System.out.println("Test done in " + (System.currentTimeMillis()-starttime));

        System.exit(0);

// END main(String[]-String[])//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58b30-a6f87
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_006aa-f20ab
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f096a-d87b4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_68656-ffdea
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0b2be-435f7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_170fa-55399
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4ad71-3458d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1df12-911ab
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d55a8-aa25e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_12719-d5e7e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_24fa7-2243c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16dcd-dc737
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6ccd9-ec250
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3a550-51426
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cbe02-42ea6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_06e88-b1092
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d173f-fa3df
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_54c59-df08f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_66a2c-bb227
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65383-1d981
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_12e2f-78664
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5a579-e5f0c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7942e-b3ddb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_18ecf-0ffbe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_24c97-d5316
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e3a82-62771
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1345e-20865
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_69806-d5ad1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_09fa4-311be
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_247aa-2be2f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e5d5c-b5a19
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b4929-d004f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e0796-1a170
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_131cf-50e97
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ba6a8-61e0a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f4ab1-4299f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78923-1a586
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_20e13-ef050
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b3d60-f5028
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c43c8-c5cc2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4ac17-b65c6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b98b2-58030
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58030-0c2f3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58030-e96a9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e96a9-8825e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5a65f-8eb01
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_14c3e-67cb8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_67cb8-201f8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_39ff0-b665a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b665a-ea978
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_99bb7-aff17
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_99e9b-4732b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_676c2-1e0e0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bae0b-0e30e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_32d5b-c70e0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_20829-c4389
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_99a99-6ffc2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_94653-aaf2f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_95604-bd96b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fe769-75db3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0c01d-7dfe8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5997c-68709
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2b80c-e544e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0d07b-a36ed
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ac058-94516
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e463c-a07d2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_57920-e364a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5739e-d1077
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bb636-5d78c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ea99e-4e50b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b1e75-94ffc
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_b1e75_94ffc\rev_rev_left_b1e75-rev_right_94ffc\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [306]
Right editions: [310, 311]
Merged body: 
// START handleEviction(Long-Long-LogUnitEntry-LogUnitEntry-RemovalCause-RemovalCause)//// LEFT //public synchronized void handleEviction(Long address, LogUnitEntry entry, RemovalCause cause) {
        log.trace("Eviction[{}]: {}", address, cause);
        if (entry.buffer != null) {
            if (fc == null) {
// RIGHT //                log.warn("This is an in-memory log unit, data@{} will be trimmed and lost due to {}!", address, cause);
// RIGHT //                trimRange.add(Range.closed(address, address));
            } else if (!entry.isPersisted) { //don't persist an entry twice.
                //evict the data by getting the next pointer.
                try {
                    ByteBuf metadataBuffer = Unpooled.buffer();
                    LogUnitMetadataMsg.bufferFromMap(metadataBuffer, entry.getMetadataMap());
                    int entrySize = entry.getBuffer().writerIndex() + metadataBuffer.writerIndex() + 21;
                    long entryPointer = filePointer.getAndAdd(entrySize);
                    log.trace("Eviction[{}]: Mapped to {}", address, entryPointer);
                    ByteBuffer pointerBuffer = fc.map(FileChannel.MapMode.READ_WRITE, entryPointer, 21);
                    pointerBuffer.putInt(0xDEAD);
                    pointerBuffer.putInt(entrySize);
                    pointerBuffer.putLong(address);
                    pointerBuffer.putInt(metadataBuffer.writerIndex());
                    fc.write(metadataBuffer.nioBuffer(), entryPointer + 21);
                    fc.write(entry.buffer.nioBuffer(), entryPointer + 21 + metadataBuffer.writerIndex());
                    fc.force(true);
                    metadataBuffer.release();
                    pointerBuffer.put((byte) 1);
                    pointerBuffer.flip();
                    log.info("Eviction[{}]: Written to disk.", address);
                }
                catch (Exception e)
                {
                    log.error("Eviction[{}]: Exception", address, e);
                }
            }
            // Free the internal buffer once the data has been evicted (in the case the server is not sync).
            entry.buffer.release();
        }
// END handleEviction(Long-Long-LogUnitEntry-LogUnitEntry-RemovalCause-RemovalCause)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4ff3d-52830
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_4ff3d_52830\rev_rev_left_4ff3d-rev_right_52830\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [459]
Right editions: [461, 466, 468, 469, 470, 472]
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
// RIGHT //        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
// RIGHT //        FileHandle fh = getChannelForAddress(address);
            try {
// RIGHT //            log.info("Got header {}", readHeader(fh.getChannel()));
// RIGHT //            return readEntry(getChannelForAddress(address), address);
// RIGHT //        } catch (Exception e)
                    {
// RIGHT //            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_4ff3d_52830\rev_rev_left_4ff3d-rev_right_52830\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [477]
Right editions: [480]
Merged body: 
// START handleEviction(Long-Long-LogUnitEntry-LogUnitEntry-RemovalCause-RemovalCause)//// LEFT //public synchronized void handleEviction(Long address, LogUnitEntry entry, RemovalCause cause) {
        log.trace("Eviction[{}]: {}", address, cause);
        if (entry.buffer != null) {
// RIGHT //            if (prefix == null) {
                log.warn("This is an in-memory log unit, data@{} will be trimmed and lost due to {}!", address, cause);
                trimRange.add(Range.closed(address, address));
            }
            // Free the internal buffer once the data has been evicted (in the case the server is not sync).
            entry.buffer.release();
        }
// END handleEviction(Long-Long-LogUnitEntry-LogUnitEntry-RemovalCause-RemovalCause)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7f294-36780
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7f294_36780\rev_rev_left_7f294-rev_right_36780\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [310, 311]
Merged body: 
// START readEntry(FileHandle-FileHandle-long-long)//public LogUnitEntry readEntry(FileHandle fh, long address)
        throws IOException
    {
        MappedByteBuffer o = fh.getChannel().map(FileChannel.MapMode.READ_ONLY, 64L, fh.getChannel().size());
        while (o.hasRemaining())
        {
            short magic = o.getShort();
            if (magic != 0x4C45)
            {
                return null;
            }
            short flags = o.getShort();
            long addr = o.getLong();
// RIGHT //            if (address == -1) {
// RIGHT //            fh.knownAddresses.add(Range.singleton(addr)); }
            int size = o.getInt();
            if (addr != address)
            {
                o.position(o.position() + size-16); //skip over (size-20 is what we haven't read).
                log.trace("Read address {}, not match, skipping. (remain={})", addr, o.remaining());
            }
            else {
                log.debug("Entry at {} hit, reading.", address);
                if (flags % 2 == 0) {
                    log.error("Read a log entry but the write was torn, aborting!");
                    throw new IOException("Torn write detected!");
                }
                int metadataMapSize = o.getInt();
                ByteBuf mBuf = Unpooled.wrappedBuffer(o.slice());
                o.position(o.position() + metadataMapSize);
                ByteBuffer dBuf = o.slice();
                dBuf.limit(size - metadataMapSize - 24);
                return new LogUnitEntry(Unpooled.wrappedBuffer(dBuf),
                        LogUnitMetadataMsg.mapFromBuffer(mBuf),
                        false,
                        true);
            }
        }
        return null;
// END readEntry(FileHandle-FileHandle-long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7f294_36780\rev_rev_left_7f294-rev_right_36780\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [498]
Right editions: []
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
        FileHandle fh = getChannelForAddress(address);
        try {
            log.info("Got header {}", readHeader(fh.getChannel()));
            return readEntry(getChannelForAddress(address), address);
        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7f294_36780\rev_rev_left_7f294-rev_right_36780\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [352, 355, 356, 357, 358, 359, 360]
Merged body: 
// START getChannelForAddress(long-long)//public FileHandle getChannelForAddress(long address)
    {
        return channelMap.computeIfAbsent(address/10000, a -> {
            String filePath = prefix + a.toString();
            try {
                FileChannel fc = FileChannel.open(FileSystems.getDefault().getPath(filePath),
                        EnumSet.of(StandardOpenOption.READ, StandardOpenOption.WRITE,
                                StandardOpenOption.CREATE, StandardOpenOption.SPARSE));
// RIGHT //
                AtomicLong fp = new AtomicLong();
                writeHeader(fc, fp, 1, 0);
// RIGHT //                log.info("Opened new log file at {}", filePath);
// RIGHT //                FileHandle fh = new FileHandle(fp, fc);
// RIGHT //                // The first time we open a file we should read to the end, to load the
// RIGHT //                // map of entries we already have.
// RIGHT //                readEntry(fh, -1);
// RIGHT //                return fh;
            }
            catch (IOException e)
            {
                log.error("Error opening file {}", a, e);
                throw new RuntimeException(e);
            }
        });
// END getChannelForAddress(long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_7f294_36780\rev_rev_left_7f294-rev_right_36780\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [498]
Right editions: []
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
        FileHandle fh = getChannelForAddress(address);
        try {
            log.info("Got header {}", readHeader(fh.getChannel()));
            return readEntry(getChannelForAddress(address), address);
        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e2bf9-71b10
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d7483-474bc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d141c-129a4
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_d141c_129a4\rev_rev_left_d141c-rev_right_129a4\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [327, 343, 346]
Merged body: 
// START readEntry(FileHandle-FileHandle-long-long)//public LogUnitEntry readEntry(FileHandle fh, long address)
        throws IOException
    {
// RIGHT //        ByteBuffer o = fh.getMapForRegion(64, (int)fh.getChannel().size());
        while (o.hasRemaining())
        {
            short magic = o.getShort();
            if (magic != 0x4C45)
            {
                return null;
            }
            short flags = o.getShort();
            long addr = o.getLong();
            if (address == -1) {
            fh.knownAddresses.add(Range.singleton(addr)); }
            int size = o.getInt();
            if (addr != address)
            {
                o.position(o.position() + size-16); //skip over (size-20 is what we haven't read).
// RIGHT //                log.trace("Read address {}, not match {}, skipping. (remain={})", addr, address, o.remaining());
            }
            else {
// RIGHT //                log.debug("Entry at {} hit, reading (size={}).", address, size);
                if (flags % 2 == 0) {
                    log.error("Read a log entry but the write was torn, aborting!");
                    throw new IOException("Torn write detected!");
                }
                int metadataMapSize = o.getInt();
                ByteBuf mBuf = Unpooled.wrappedBuffer(o.slice());
                o.position(o.position() + metadataMapSize);
                ByteBuffer dBuf = o.slice();
                dBuf.limit(size - metadataMapSize - 24);
                return new LogUnitEntry(Unpooled.wrappedBuffer(dBuf),
                        LogUnitMetadataMsg.mapFromBuffer(mBuf),
                        false,
                        true);
            }
        }
        return null;
// END readEntry(FileHandle-FileHandle-long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_d141c_129a4\rev_rev_left_d141c-rev_right_129a4\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [527]
Right editions: []
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
        FileHandle fh = getChannelForAddress(address);
        try {
            log.info("Got header {}", readHeader(fh.getChannel()));
            return readEntry(getChannelForAddress(address), address);
        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4abe8-24c9e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1fbac-51200
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1959c-daef4
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_1959c_daef4\rev_rev_left_1959c-rev_right_daef4\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [440]
Merged body: 
// START readEntry(FileHandle-FileHandle-long-long)//public LogUnitEntry readEntry(FileHandle fh, long address)
        throws IOException
    {
        ByteBuffer o = fh.getMapForRegion(64, (int)fh.getChannel().size());
        while (o.hasRemaining())
        {
            short magic = o.getShort();
            if (magic != 0x4C45)
            {
                return null;
            }
            short flags = o.getShort();
            long addr = o.getLong();
            if (address == -1) {
// RIGHT //            fh.knownAddresses.add(addr); }
            int size = o.getInt();
            if (addr != address)
            {
                o.position(o.position() + size-16); //skip over (size-20 is what we haven't read).
                log.trace("Read address {}, not match {}, skipping. (remain={})", addr, address, o.remaining());
            }
            else {
                log.debug("Entry at {} hit, reading (size={}).", address, size);
                if (flags % 2 == 0) {
                    log.error("Read a log entry but the write was torn, aborting!");
                    throw new IOException("Torn write detected!");
                }
                int metadataMapSize = o.getInt();
                ByteBuf mBuf = Unpooled.wrappedBuffer(o.slice());
                o.position(o.position() + metadataMapSize);
                ByteBuffer dBuf = o.slice();
                dBuf.limit(size - metadataMapSize - 24);
                return new LogUnitEntry(Unpooled.wrappedBuffer(dBuf),
                        LogUnitMetadataMsg.mapFromBuffer(mBuf),
                        false,
                        true);
            }
        }
        return null;
// END readEntry(FileHandle-FileHandle-long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_1959c_daef4\rev_rev_left_1959c-rev_right_daef4\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [704]
Right editions: []
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
        FileHandle fh = getChannelForAddress(address);
        try {
            log.info("Got header {}", readHeader(fh.getChannel()));
            return readEntry(getChannelForAddress(address), address);
        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fdf97-7ade8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35572-44925
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3d6d1-48399
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5a44c-8e6da
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ce641-b7463
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7c6c5-f6f70
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_91919-ed286
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e2070-376c1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_49d87-09188
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35830-9a1be
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4f326-263fd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_85016-880d5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a8416-81ba7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c2d3d-63fec
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5304f-e70ec
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b5611-f3d12
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_03b15-f5fb8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c867c-6632f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_06904-8a7db
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8e5dd-05cd9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ee2b9-b4a5a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6a2a4-13779
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dee85-abb62
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7c79b-6cffc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_89818-3766c
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_89818_3766c\rev_rev_left_89818-rev_right_3766c\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [502, 503, 507]
Merged body: 
// START getChannelForAddress(long-long)//public FileHandle getChannelForAddress(long address)
    {
        return channelMap.computeIfAbsent(address/10000, a -> {
            String filePath = prefix + a.toString();
            try {
                FileChannel fc = FileChannel.open(FileSystems.getDefault().getPath(filePath),
                        EnumSet.of(StandardOpenOption.READ, StandardOpenOption.WRITE,
                                StandardOpenOption.CREATE, StandardOpenOption.SPARSE));

// RIGHT //                FileLock fl = fc.lock();
// RIGHT //
                AtomicLong fp = new AtomicLong();
                writeHeader(fc, fp, 1, 0);
                log.info("Opened new log file at {}", filePath);
// RIGHT //                FileHandle fh = new FileHandle(fp, fc, fl);
                // The first time we open a file we should read to the end, to load the
                // map of entries we already have.
                readEntry(fh, -1);
                return fh;
            }
            catch (IOException e)
            {
                log.error("Error opening file {}", a, e);
                throw new RuntimeException(e);
            }
        });
// END getChannelForAddress(long-long)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_89818_3766c\rev_rev_left_89818-rev_right_3766c\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [738]
Right editions: []
Merged body: 
// START handleRetrieval(Long-Long)//// LEFT //public synchronized LogUnitEntry handleRetrieval(Long address) {
        log.trace("Retrieve[{}]", address);
        if (prefix == null)
        {
            log.trace("This is an in-memory log unit, but a load was requested.");
            return null;
        }
        FileHandle fh = getChannelForAddress(address);
        try {
            log.info("Got header {}", readHeader(fh.getChannel()));
            return readEntry(getChannelForAddress(address), address);
        } catch (Exception e)
        {
            throw new RuntimeException(e);
        }
// END handleRetrieval(Long-Long)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2463c-bb31a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77117-a27bf
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_817fb-2f24c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a3bb7-3e070
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_88674-521c2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f968c-1ccdc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5cadd-4d48e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_97942-e43b7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a5672-7bd4d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c2d2a-d1567
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e9164-67ec4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_73b86-0c447
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ee47f-bd0a3
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_ee47f_bd0a3\rev_rev_left_ee47f-rev_right_bd0a3\src\main\java\org\corfudb\infrastructure\LayoutServer.java
Different Spacing: false
Left editions: [181]
Right editions: [199, 200]
Merged body: 
// START handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//@Override
    public void handleMessage(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {
        // This server has not been bootstrapped yet, ignore ALL requests except for LAYOUT_BOOTSTRAP
        if (currentLayout == null)
        {
            if (msg.getMsgType().equals(CorfuMsg.CorfuMsgType.LAYOUT_BOOTSTRAP))
            {
                log.info("Bootstrap with new layout={}", ((LayoutMsg)msg).getLayout());
                currentLayout = ((LayoutMsg)msg).getLayout();
// LEFT //                saveCurrentLayout();
                //send a response that the bootstrap was successful.
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            else {
                log.warn("Received message but not bootstrapped! Message={}", msg);
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_NOBOOTSTRAP));
            }
            return;
        }

        switch (msg.getMsgType())
        {
            case LAYOUT_REQUEST:
                r.sendResponse(ctx, msg, new LayoutMsg(currentLayout, CorfuMsg.CorfuMsgType.LAYOUT_RESPONSE));
            break;
            case LAYOUT_BOOTSTRAP:
                // We are already bootstrapped, bootstrap again is not allowed.
// RIGHT //                log.warn("Got a request to bootstrap a server which is already bootstrapped, rejecting!");
// RIGHT //                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));
            break;
            case LAYOUT_PREPARE:
            {
                LayoutRankMsg m = (LayoutRankMsg)msg;
                // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.
                if (m.getRank() <= phase1Rank) {
                    log.debug("Rejected phase 1 prepare of rank={}, phase1Rank={}", m.getRank(), phase1Rank);
                    r.sendResponse(ctx, msg, new LayoutRankMsg(null, phase1Rank, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_REJECT));
                }
                else
                {
                    phase1Rank = ((LayoutRankMsg) msg).getRank();
                    log.debug("New phase 1 rank={}", phase1Rank);
                    r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
                }
            }
            break;
            case LAYOUT_PROPOSE:
            {
                LayoutRankMsg m = (LayoutRankMsg)msg;
                // This is a propose. If the rank is less than or equal to the phase 1 rank, reject.
                if (m.getRank() != phase1Rank) {
                    log.debug("Rejected phase 2 propose of rank={}, phase1Rank={}", m.getRank(), phase1Rank);
                    r.sendResponse(ctx, msg, new LayoutRankMsg(null, phase1Rank, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT));
                }
                // In addition, if the rank is equal to the current phase 2 rank (already accepted message), reject.
                else if (m.getRank() == phase2Rank)
                {
                    log.debug("Rejected phase 2 propose of rank={}, phase2Rank={}", m.getRank(), phase2Rank);
                    r.sendResponse(ctx, msg, new LayoutRankMsg(null, phase2Rank, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT));
                }
                else
                {
                    log.debug("New phase 2 rank={}, old rank={}, layout={}", ((LayoutRankMsg) msg).getRank(), phase2Rank,
                            ((LayoutRankMsg) msg).getLayout());
                    phase2Rank = ((LayoutRankMsg) msg).getRank();
                    currentLayout =  ((LayoutRankMsg) msg).getLayout();
                    saveCurrentLayout();
                    r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
                }
            }
            break;
            case LAYOUT_COMMITTED:
            {
                // Currently we just acknowledge the commit. We could do more than
                // just that.
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            break;
            default:
                log.warn("Unknown message type {} passed to handler!", msg.getMsgType());
                throw new RuntimeException("Unsupported message passed to handler!");
        }
// END handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3e603-a0e69
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16441-05341
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_40b4a-195a2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cb69c-d99c5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1bbc3-b5755
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7f0be-f2b0a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fe993-f0cda
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_232d8-b451e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8d9a5-173fc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4df41-073c1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9e15e-7bc38
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7bc38-d9e56
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_790db-56490
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_790db_56490\rev_rev_left_790db-rev_right_56490\src\test\java\org\corfudb\infrastructure\LogUnitServerTest.java
Different Spacing: false
Left editions: [48]
Right editions: [61]
Merged body: 
// START checkHeapLeak({FormalParametersInternal})//@Test
    public void checkHeapLeak() throws Exception {

// LEFT //        LogUnitServer s1 = new LogUnitServer(new ServerConfigBuilder().build());

        this.router.setServerUnderTest(s1);
        long address = 0L;
        LogUnitWriteMsg m = new LogUnitWriteMsg(address);
        //write at 0
        m.setStreams(Collections.singleton(CorfuRuntime.getStreamID("a")));
        m.setRank(0L);
        m.setBackpointerMap(Collections.emptyMap());
        byte[] payload = "0".getBytes();
        m.setPayload(payload);
        sendMessage(m);

// RIGHT //        LoadingCache<Long, LogUnitServer.LogUnitEntry> dataCache = s1.getDataCache();
        // Make sure that extra bytes are truncated from the payload byte buf
        assertThat(dataCache.get(address).getBuffer().capacity()).isEqualTo(payload.length);

// END checkHeapLeak({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_790db_56490\rev_rev_left_790db-rev_right_56490\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [546]
Right editions: [581]
Merged body: 
// START handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//@Override
    public void handleMessage(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {
// LEFT //        if (isShutdown()) return;
        switch(msg.getMsgType())
        {
            case WRITE:
                LogUnitWriteMsg writeMsg = (LogUnitWriteMsg) msg;
                log.trace("Handling write request for address {}", writeMsg.getAddress());
                write(writeMsg, ctx, r);
                break;
            case READ_REQUEST:
                LogUnitReadRequestMsg readMsg = (LogUnitReadRequestMsg) msg;
                log.trace("Handling read request for address {}", readMsg.getAddress());
                read(readMsg, ctx, r);
                break;
            case READ_RANGE:
                CorfuRangeMsg rangeReadMsg = (CorfuRangeMsg) msg;
                log.trace("Handling read request for address ranges {}", rangeReadMsg.getRanges());
                read(rangeReadMsg, ctx, r);
                break;
            case GC_INTERVAL:
            {
                LogUnitGCIntervalMsg m = (LogUnitGCIntervalMsg) msg;
                log.info("Garbage collection interval set to {}", m.getInterval());
                gcRetry.setRetryInterval(m.getInterval());
            }
            break;
            case FORCE_GC:
            {
                log.info("GC forced by client {}", msg.getClientID());
                gcThread.interrupt();
            }
            break;
            case FILL_HOLE:
            {
                LogUnitFillHoleMsg m = (LogUnitFillHoleMsg) msg;
                log.debug("Hole fill requested at {}", m.getAddress());
// RIGHT //                dataCache.get(m.getAddress(), (address) -> new LogUnitEntry(address));
                r.sendResponse(ctx, m, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            break;
            case TRIM:
            {
                LogUnitTrimMsg m = (LogUnitTrimMsg) msg;
                trimMap.compute(m.getStreamID(), (key, prev) ->
                        prev == null ? m.getPrefix() : Math.max(prev, m.getPrefix()));
                log.debug("Trim requested at prefix={}", m.getPrefix());
            }
            break;
            case FORCE_COMPACT:
            {
                log.info("Compaction forced by client {}", msg.getClientID());
                compactTail();
            }
            break;
            case GET_CONTIGUOUS_TAIL: {
                CorfuUUIDMsg m = (CorfuUUIDMsg) msg;
                if (m.getId() == null) {
                    r.sendResponse(ctx, m, new LogUnitTailMsg(contiguousTail));
                } else {
                    r.sendResponse(ctx, m, new LogUnitTailMsg(contiguousTail, streamCache.get(m.getId())));
                }
            }
            break;
            case STREAM_READ: {
                CorfuUUIDMsg m = (CorfuUUIDMsg) msg;
                if (m.getId() == null) {
                    r.sendResponse(ctx, m, new CorfuMsg(CorfuMsg.CorfuMsgType.NACK));
                } else {
                    CorfuRangeMsg rm = new CorfuRangeMsg(streamCache.get(m.getId()));
                    rm.copyBaseFields(m);
                    read(rm, ctx, r);
                }
            }
            break;
        }
// END handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_790db_56490\rev_rev_left_790db-rev_right_56490\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: []
Right editions: [841, 842, 844, 852, 855]
Merged body: 
// START write(LogUnitWriteMsg-LogUnitWriteMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//public void write(LogUnitWriteMsg msg, ChannelHandlerContext ctx, IServerRouter r)
    {
// RIGHT //        long address = msg.getAddress();
// RIGHT //        log.trace("Write[{}]", address);
        //TODO: locking of trimRange.
// RIGHT //        if (trimRange.contains (address))
        {
            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ERROR_TRIMMED));
        }
        else {
            // The payload in the message is a view of a larger buffer allocated
            // by netty, thus direct memory can leak. Copy the view and release the
            // underlying buffer
// RIGHT //            LogUnitEntry e = new LogUnitEntry(address, msg.getData().copy(), msg.getMetadataMap(), false);
            msg.getData().release();
            try {
// RIGHT //                dataCache.put(e.getAddress(), e);
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ERROR_OK));
            } catch (Exception ex)
            {
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ERROR_OVERWRITE));
                e.getBuffer().release();
            }
        }
// END write(LogUnitWriteMsg-LogUnitWriteMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_790db_56490\rev_rev_left_790db-rev_right_56490\src\main\java\org\corfudb\infrastructure\LogUnitServer.java
Different Spacing: false
Left editions: [546]
Right editions: [581]
Merged body: 
// START handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//@Override
    public void handleMessage(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {
// LEFT //        if (isShutdown()) return;
        switch(msg.getMsgType())
        {
            case WRITE:
                LogUnitWriteMsg writeMsg = (LogUnitWriteMsg) msg;
                log.trace("Handling write request for address {}", writeMsg.getAddress());
                write(writeMsg, ctx, r);
                break;
            case READ_REQUEST:
                LogUnitReadRequestMsg readMsg = (LogUnitReadRequestMsg) msg;
                log.trace("Handling read request for address {}", readMsg.getAddress());
                read(readMsg, ctx, r);
                break;
            case READ_RANGE:
                CorfuRangeMsg rangeReadMsg = (CorfuRangeMsg) msg;
                log.trace("Handling read request for address ranges {}", rangeReadMsg.getRanges());
                read(rangeReadMsg, ctx, r);
                break;
            case GC_INTERVAL:
            {
                LogUnitGCIntervalMsg m = (LogUnitGCIntervalMsg) msg;
                log.info("Garbage collection interval set to {}", m.getInterval());
                gcRetry.setRetryInterval(m.getInterval());
            }
            break;
            case FORCE_GC:
            {
                log.info("GC forced by client {}", msg.getClientID());
                gcThread.interrupt();
            }
            break;
            case FILL_HOLE:
            {
                LogUnitFillHoleMsg m = (LogUnitFillHoleMsg) msg;
                log.debug("Hole fill requested at {}", m.getAddress());
// RIGHT //                dataCache.get(m.getAddress(), (address) -> new LogUnitEntry(address));
                r.sendResponse(ctx, m, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            break;
            case TRIM:
            {
                LogUnitTrimMsg m = (LogUnitTrimMsg) msg;
                trimMap.compute(m.getStreamID(), (key, prev) ->
                        prev == null ? m.getPrefix() : Math.max(prev, m.getPrefix()));
                log.debug("Trim requested at prefix={}", m.getPrefix());
            }
            break;
            case FORCE_COMPACT:
            {
                log.info("Compaction forced by client {}", msg.getClientID());
                compactTail();
            }
            break;
            case GET_CONTIGUOUS_TAIL: {
                CorfuUUIDMsg m = (CorfuUUIDMsg) msg;
                if (m.getId() == null) {
                    r.sendResponse(ctx, m, new LogUnitTailMsg(contiguousTail));
                } else {
                    r.sendResponse(ctx, m, new LogUnitTailMsg(contiguousTail, streamCache.get(m.getId())));
                }
            }
            break;
            case STREAM_READ: {
                CorfuUUIDMsg m = (CorfuUUIDMsg) msg;
                if (m.getId() == null) {
                    r.sendResponse(ctx, m, new CorfuMsg(CorfuMsg.CorfuMsgType.NACK));
                } else {
                    CorfuRangeMsg rm = new CorfuRangeMsg(streamCache.get(m.getId()));
                    rm.copyBaseFields(m);
                    read(rm, ctx, r);
                }
            }
            break;
        }
// END handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d824e-e3811
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_d824e_e3811\rev_rev_left_d824e-rev_right_e3811\src\main\java\org\corfudb\infrastructure\LayoutServer.java
Different Spacing: false
Left editions: [171, 172, 173, 198, 200, 201, 202, 206, 208, 215, 216, 218, 219, 220, 223, 226, 230, 231, 232, 233]
Right editions: [163]
Merged body: 
// START handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//@Override
    public void handleMessage(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {
// RIGHT //        if (isShutdown()) return;
        // This server has not been bootstrapped yet, ignore ALL requests except for LAYOUT_BOOTSTRAP
        if (currentLayout == null)
        {
            if (msg.getMsgType().equals(CorfuMsg.CorfuMsgType.LAYOUT_BOOTSTRAP))
            {
                log.info("Bootstrap with new layout={}", ((LayoutMsg)msg).getLayout());

// LEFT //                saveCurrentLayout(((LayoutMsg)msg).getLayout());
// LEFT //                System.out.println(getServerRouter());
// LEFT //                System.out.println(currentLayout);
                getServerRouter().setServerEpoch(currentLayout.getEpoch());
                //send a response that the bootstrap was successful.
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            else {
                log.warn("Received message but not bootstrapped! Message={}", msg);
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_NOBOOTSTRAP));
            }
            return;
        }

        switch (msg.getMsgType())
        {
            case LAYOUT_REQUEST:
                r.sendResponse(ctx, msg, new LayoutMsg(currentLayout, CorfuMsg.CorfuMsgType.LAYOUT_RESPONSE));
            break;
            case LAYOUT_BOOTSTRAP:
                // We are already bootstrapped, bootstrap again is not allowed.
                log.warn("Got a request to bootstrap a server which is already bootstrapped, rejecting!");
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));
            break;
            case LAYOUT_PREPARE:
            {
                LayoutRankMsg m = (LayoutRankMsg)msg;
// LEFT //                Rank prepareRank = getRank(m);
                // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.
// LEFT //                if (phase1Rank != null && prepareRank.compareTo(phase1Rank) <= 0) {
// LEFT //                    log.debug("Rejected phase 1 prepare of rank={}, phase1Rank={}", prepareRank, phase1Rank);
// LEFT //                    r.sendResponse(ctx, msg, new LayoutRankMsg(proposedLayout, phase1Rank.getRank(), CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_REJECT));
                }
                else
                {
// LEFT //                    savePhase1Data(prepareRank);
                    log.debug("New phase 1 rank={}", phase1Rank);
// LEFT //                    r.sendResponse(ctx, msg, new LayoutRankMsg(proposedLayout, phase1Rank.getRank(), CorfuMsg.CorfuMsgType.ACK));
                }
            }
            break;
            case LAYOUT_PROPOSE:
            {
                LayoutRankMsg m = (LayoutRankMsg)msg;
// LEFT //                Rank proposeRank = getRank(m);
// LEFT //                Layout proposeLayout = ((LayoutRankMsg) msg).getLayout();
                // This is a propose. If the rank is less than or equal to the phase 1 rank, reject.
// LEFT //                if (phase1Rank != null && proposeRank.compareTo(phase1Rank) != 0) {
// LEFT //                    log.debug("Rejected phase 2 propose of rank={}, phase1Rank={}", proposeRank, phase1Rank);
// LEFT //                    r.sendResponse(ctx, msg, new LayoutRankMsg(null, phase1Rank.getRank(), CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT));
                }
                // In addition, if the rank is equal to the current phase 2 rank (already accepted message), reject.
// LEFT //                else if (phase2Rank != null && proposeRank.compareTo(phase2Rank) == 0)
                {
                    log.debug("Rejected phase 2 propose of rank={}, phase2Rank={}", m.getRank(), phase2Rank);
// LEFT //                    r.sendResponse(ctx, msg, new LayoutRankMsg(null, phase2Rank.getRank(), CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT));
                }
                else
                {
// LEFT //                    log.debug("New phase 2 rank={},  layout={}", proposeRank, proposeLayout);
// LEFT //                    savePhase2Data(proposeRank, proposeLayout);
// LEFT //                    //TODO this should be moved into commit message handling as this is for committed layouts.
// LEFT //                    commitLayout(proposeLayout);
                    r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
                }
            }
            break;
            case LAYOUT_COMMITTED:
            {
                // Currently we just acknowledge the commit. We could do more than
                // just that.
                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsg.CorfuMsgType.ACK));
            }
            break;
            default:
                log.warn("Unknown message type {} passed to handler!", msg.getMsgType());
                throw new RuntimeException("Unsupported message passed to handler!");
        }
// END handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_d824e_e3811\rev_rev_left_d824e-rev_right_e3811\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [199, 201, 213, 215]
Right editions: [179, 180, 181, 182, 186, 187, 204, 205, 206, 207]
Merged body: 
// START checkThatLayoutIsPersisted({FormalParametersInternal})//@Test
    public void checkThatLayoutIsPersisted()
            throws Exception
    {
        String serviceDir = getTempDir();

// RIGHT //        LayoutServer s1 = new LayoutServer(new ServerConfigBuilder()
// RIGHT //                .setSingle(false)
// RIGHT //                .setMemory(false)
// RIGHT //                .setLogPath(serviceDir)
                .build(), getRouter());

        setServer(s1);
// RIGHT //        bootstrapServer(TestLayoutBuilder.single(9000));
// RIGHT //        Layout l100 = TestLayoutBuilder.single(9000);
        l100.setEpoch(100);
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
        assertThat(getLastMessage().getMsgType())
                .isEqualTo(CorfuMsg.CorfuMsgType.ACK);
        sendMessage(new LayoutRankMsg(l100, 100, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));

        assertThat(getLastMessage().getMsgType())
                .isEqualTo(CorfuMsg.CorfuMsgType.ACK);
        assertThat(s1)
                .isInEpoch(100);
        assertThat(s1)
// LEFT //                .isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s1)
// LEFT //                .isPhase2Rank(new Rank(100L, AbstractServerTest.testClientId));
        s1.shutdown();

// RIGHT //        LayoutServer s2 = new LayoutServer(new ServerConfigBuilder()
// RIGHT //                .setSingle(false)
// RIGHT //                .setMemory(false)
// RIGHT //                .setLogPath(serviceDir)
                .build(), getRouter());
        this.router.setServerUnderTest(s2);
        assertThat(s2)
                .isInEpoch(100);
        assertThat(s2)
// LEFT //                .isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s2)
// LEFT //                .isPhase2Rank(new Rank(100L, AbstractServerTest.testClientId));

        sendMessage(new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_REQUEST));
        assertThat(getLastMessage().getMsgType())
                .isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_RESPONSE);
        assertThat(((LayoutMsg)getLastMessage()).getLayout().getEpoch())
                .isEqualTo(100);
// END checkThatLayoutIsPersisted({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d9e56-9f24b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e3811-77bc6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_21555-75a92
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_75a92-7fcaf
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_feb0c-b071b
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_feb0c_b071b\rev_rev_left_feb0c-rev_right_b071b\src\test\java\org\corfudb\runtime\clients\NettyCommTest.java
Different Spacing: false
Left editions: []
Right editions: [228]
Merged body: 
// START bootstrapServer({FormalParametersInternal})//void bootstrapServer() throws Exception {
            NettyServerRouter nsr = new NettyServerRouter();
            bossGroup = new NioEventLoopGroup(1, new ThreadFactory() {
                final AtomicInteger threadNum = new AtomicInteger(0);

                @Override
                public Thread newThread(Runnable r) {
                    Thread t = new Thread(r);
                    t.setName("accept-" + threadNum.getAndIncrement());
                    return t;
                }
            });

            workerGroup = new NioEventLoopGroup(Runtime.getRuntime().availableProcessors() * 2, new ThreadFactory() {
                final AtomicInteger threadNum = new AtomicInteger(0);

                @Override
                public Thread newThread(Runnable r) {
                    Thread t = new Thread(r);
                    t.setName("io-" + threadNum.getAndIncrement());
                    return t;
                }
            });

            ee = new DefaultEventExecutorGroup(Runtime.getRuntime().availableProcessors() * 2, new ThreadFactory() {

                final AtomicInteger threadNum = new AtomicInteger(0);

                @Override
                public Thread newThread(Runnable r) {
                    Thread t = new Thread(r);
                    t.setName("event-" + threadNum.getAndIncrement());
                    return t;
                }
            });

            b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .channel(NioServerSocketChannel.class)
                    .option(ChannelOption.SO_BACKLOG, 100)
                    .childOption(ChannelOption.SO_KEEPALIVE, true)
// RIGHT //                    .childOption(ChannelOption.SO_REUSEADDR, true)
                    .childOption(ChannelOption.TCP_NODELAY, true)
                    .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
                    .handler(new LoggingHandler(LogLevel.INFO))
                    .childHandler(new ChannelInitializer<SocketChannel>() {
                        @Override
                        public void initChannel(io.netty.channel.socket.SocketChannel ch) throws Exception {
                            ch.pipeline().addLast(new LengthFieldPrepender(4));
                            ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4));
                            ch.pipeline().addLast(ee, new NettyCorfuMessageDecoder());
                            ch.pipeline().addLast(ee, new NettyCorfuMessageEncoder());
                            ch.pipeline().addLast(ee, nsr);
                        }
                    });
            f = b.bind(port).sync();
// END bootstrapServer({FormalParametersInternal})//        }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_feb0c_b071b\rev_rev_left_feb0c-rev_right_b071b\src\test\java\org\corfudb\runtime\clients\NettyCommTest.java
Different Spacing: false
Left editions: [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]
Right editions: []
Merged body: 
// START nettyServerClientPingableAfterFailure({FormalParametersInternal})//@Test
    public void nettyServerClientPingableAfterFailure() throws Exception {
        runWithBaseServer((r, d) -> {
            assertThat(r.getClient(BaseClient.class).pingSync())
                    .isTrue();
            d.shutdownServer();
            d.bootstrapServer();
// LEFT //            // We are now racing with the server's startup.  Immediate attempts
// LEFT //            // to ping the server will fail immediately due to client-side
// LEFT //            // rejection because the TCP session isn't yet connected.  Retry
// LEFT //            // for up to 60 seconds before giving up: TravisCI can be truly
// LEFT //            // unpredictably slow.
// LEFT //            int sleep_incr = 10;
// LEFT //            for (int i = 0; i < 60000; i += sleep_incr) {
// LEFT //                if (r.getClient(BaseClient.class).pingSync() == true)
// LEFT //                    break;
// LEFT //                Thread.sleep(sleep_incr);
// LEFT //            }
            assertThat(r.getClient(BaseClient.class).pingSync())
                    .isTrue();
        });
// END nettyServerClientPingableAfterFailure({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_57262-0a43c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4870a-ad923
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_50fed-43c05
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dd03c-24719
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a9cf6-aa9c4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bec83-c1285
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LogUnitServerTest.java
Different Spacing: false
Left editions: [42, 43]
Right editions: [54]
Merged body: 
// START checkHeapLeak({FormalParametersInternal})//@Test
    public void checkHeapLeak() throws Exception {

        LogUnitServer s1 = new LogUnitServer(new ServerConfigBuilder().build());

// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s1);
        long address = 0L;
        LogUnitWriteMsg m = new LogUnitWriteMsg(address);
        //write at 0
        m.setStreams(Collections.singleton(CorfuRuntime.getStreamID("a")));
        m.setRank(0L);
        m.setBackpointerMap(Collections.emptyMap());
        byte[] payload = "0".getBytes();
        m.setPayload(payload);
        sendMessage(m);

// RIGHT //        LoadingCache<Long, LogUnitEntry> dataCache = s1.getDataCache();
        // Make sure that extra bytes are truncated from the payload byte buf
        assertThat(dataCache.get(address).getBuffer().capacity()).isEqualTo(payload.length);

// END checkHeapLeak({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [210, 211]
Right editions: [192]
Merged body: 
// START checkThatLayoutIsPersisted({FormalParametersInternal})//@Test
    public void checkThatLayoutIsPersisted()
            throws Exception {
        String serviceDir = getTempDir();

        LayoutServer s1 = new LayoutServer(new ServerConfigBuilder()
                .setSingle(false)
                .setMemory(false)
                .setLogPath(serviceDir)
                .build(), getRouter());

        setServer(s1);
        bootstrapServer(TestLayoutBuilder.single(9000));
        Layout l100 = TestLayoutBuilder.single(9000);
        l100.setEpoch(100);
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
        assertThat(getLastMessage().getMsgType())
// RIGHT //                .isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);
        sendMessage(new LayoutRankMsg(l100, 100, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));

        assertThat(getLastMessage().getMsgType())
                .isEqualTo(CorfuMsg.CorfuMsgType.ACK);
        assertThat(s1)
                .isInEpoch(100);
        assertThat(s1)
                .isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s1)
                .isPhase2Rank(new Rank(100L, AbstractServerTest.testClientId));
        s1.shutdown();

        LayoutServer s2 = new LayoutServer(new ServerConfigBuilder()
                .setSingle(false)
                .setMemory(false)
                .setLogPath(serviceDir)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s2);
        assertThat(s2)
                .isInEpoch(100);
        assertThat(s2)
                .isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s2)
                .isPhase2Rank(new Rank(100L, AbstractServerTest.testClientId));

        sendMessage(new CorfuMsg(CorfuMsg.CorfuMsgType.LAYOUT_REQUEST));
        assertThat(getLastMessage().getMsgType())
                .isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_RESPONSE);
        assertThat(((LayoutMsg) getLastMessage()).getLayout().getEpoch())
                .isEqualTo(100);
// END checkThatLayoutIsPersisted({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [262, 263, 278, 279]
Right editions: [251]
Merged body: 
// START checkPaxosPhasesPersisted({FormalParametersInternal})//@Test
    public void checkPaxosPhasesPersisted() throws Exception {
        String serviceDir = getTempDir();

        LayoutServer s1 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--memory", false)
                .put("--single", false)
                .build(), getRouter());

        setServer(s1);
        Layout l100 = TestLayoutBuilder.single(9000);
        bootstrapServer(l100);

        l100.setEpoch(100);

        // validate phase 1
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);

//        assertThat(s1).isInEpoch(0);
        assertThat(s1).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        s1.shutdown();

        LayoutServer s2 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s2);
        assertThat(s2).isInEpoch(0);
        assertThat(s2).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));

        // validate phase2 data persistence

        sendMessage(new LayoutRankMsg(l100, 100, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.ACK);
        s2.shutdown();

        LayoutServer s3 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s3);
        assertThat(s3).isInEpoch(100);
        assertThat(s3).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s3).isPhase2Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s3).isProposedLayout(l100);

// END checkPaxosPhasesPersisted({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [321, 322]
Right editions: [310, 333]
Merged body: 
// START checkMessagesValidatedAgainstPhase1PersistedData({FormalParametersInternal})//@Test
    public void checkMessagesValidatedAgainstPhase1PersistedData() throws Exception {
        String serviceDir = getTempDir();

        LayoutServer s1 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--memory", false)
                .put("--single", false)
                .build(), getRouter());

        setServer(s1);
        Layout l100 = TestLayoutBuilder.single(9000);
        bootstrapServer(l100);

        // validate phase 1
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);

        assertThat(s1).isInEpoch(0);
        assertThat(s1).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        s1.shutdown();

        LayoutServer s2 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s2);
        assertThat(s2).isInEpoch(0);
        assertThat(s2).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));

        //new LAYOUT_PREPARE message with a lower phase1 rank should be rejected
        sendMessage(new LayoutRankMsg(null, 99, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_REJECT);


        //new LAYOUT_PREPARE message with a higher phase1 rank should be accepted
        sendMessage(new LayoutRankMsg(null, 101, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);
// END checkMessagesValidatedAgainstPhase1PersistedData({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [375, 376, 399, 400]
Right editions: [363]
Merged body: 
// START checkMessagesValidatedAgainstPhase2PersistedData({FormalParametersInternal})//@Test
    public void checkMessagesValidatedAgainstPhase2PersistedData() throws Exception {
        String serviceDir = getTempDir();

        LayoutServer s1 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--memory", false)
                .put("--single", false)
                .build(), getRouter());

        setServer(s1);
        Layout l100 = TestLayoutBuilder.single(9000);
        bootstrapServer(l100);
        l100.setEpoch(100);
        // validate phase 1
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);

        // the epoch should not change yet.
//        assertThat(s1).isInEpoch(0);
        assertThat(s1).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        s1.shutdown();

        LayoutServer s2 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s2);
        assertThat(s2).isInEpoch(0);
        assertThat(s2).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));

        //new LAYOUT_PROPOSE message with a lower phase2 rank should be rejected
        sendMessage(new LayoutRankMsg(l100, 99, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT);


        //new LAYOUT_PREPARE message with a higher phase2 rank should be rejected
        sendMessage(new LayoutRankMsg(l100, 101, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT);

        //new LAYOUT_PREPARE message with same phase2 rank should be accepted
        sendMessage(new LayoutRankMsg(l100, 100, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.ACK);
        s2.shutdown();

        LayoutServer s3 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s3);
        // the epoch should have changed by now.
        assertThat(s3).isInEpoch(100);
        assertThat(s3).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));
        assertThat(s3).isProposedLayout(l100);
// END checkMessagesValidatedAgainstPhase2PersistedData({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_bec83_c1285\rev_rev_left_bec83-rev_right_c1285\src\test\java\org\corfudb\infrastructure\LayoutServerTest.java
Different Spacing: false
Left editions: [461, 462]
Right editions: [434, 446, 450]
Merged body: 
// START checkPhase1AndPhase2MessagesFromMultipleClients({FormalParametersInternal})//@Test
    public void checkPhase1AndPhase2MessagesFromMultipleClients() throws Exception {
        String serviceDir = getTempDir();

        LayoutServer s1 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--memory", false)
                .put("--single", false)
                .build(), getRouter());

        setServer(s1);
        Layout l100 = TestLayoutBuilder.single(9000);
        bootstrapServer(l100);
        l100.setEpoch(100);
        /* validate phase 1 */
        sendMessage(new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);

        // the epoch should not change yet.
//        assertThat(s1).isInEpoch(0);
        assertThat(s1).isPhase1Rank(new Rank(100L, AbstractServerTest.testClientId));

        // message from a different client with same rank should be rejected or accepted based on
        // whether the uuid is greater of smaller.
        sendMessage(UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes()), new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_REJECT);

        sendMessage(UUID.nameUUIDFromBytes("TEST_CLIENT_OTHER".getBytes()), new LayoutRankMsg(null, 100, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);

        // message from a different client but with a higher rank gets accepted
        sendMessage(UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes()), new LayoutRankMsg(null, 101, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
// RIGHT //        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_ACK);
        assertThat(s1).isPhase1Rank(new Rank(101L, UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes())));
//        assertThat(s1).isInEpoch(0);

        // testing behaviour after server restart
        s1.shutdown();
        LayoutServer s2 = new LayoutServer(new ImmutableMap.Builder<String, Object>()
                .put("--log-path", serviceDir)
                .put("--single", false)
                .put("--memory", false)
                .build(), getRouter());
// LEFT //        this.router.reset();
// LEFT //        this.router.addServer(s2);
        assertThat(s2).isInEpoch(0);
        assertThat(s2).isPhase1Rank(new Rank(101L, UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes())));
        //duplicate message to be rejected
        sendMessage(UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes()), new LayoutRankMsg(null, 101, CorfuMsg.CorfuMsgType.LAYOUT_PREPARE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PREPARE_REJECT);

        /* validate phase 2 */

        //phase2 message from a different client than the one whose phase1 was last accepted is rejected
        sendMessage(new LayoutRankMsg(null, 101, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE_REJECT);

        // phase2 from same client with same rank as in phase1 gets accepted
        sendMessage(UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes()), new LayoutRankMsg(l100, 101, CorfuMsg.CorfuMsgType.LAYOUT_PROPOSE));
        assertThat(getLastMessage().getMsgType()).isEqualTo(CorfuMsg.CorfuMsgType.ACK);

        //TODO fix this epoch needs to be fixed and should still be 0 till COMMIT
        assertThat(s2).isInEpoch(100);
        assertThat(s2).isPhase1Rank(new Rank(101L, UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes())));
        assertThat(s2).isPhase2Rank(new Rank(101L, UUID.nameUUIDFromBytes("OTHER_CLIENT".getBytes())));
        assertThat(s2).isProposedLayout(l100);

        s2.shutdown();
// END checkPhase1AndPhase2MessagesFromMultipleClients({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c1285-7a37d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fd872-4d113
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cb487-e5b1e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c7e6e-e3084
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_178a2-b0ce5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8383e-0fe7d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8a0d8-cac74
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2e687-c45e9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_19488-0ee6b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65741-d7412
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6de73-84422
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2f513-6561f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_08404-958b3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_472a9-4e5f4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_72d5f-cf60c
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_72d5f_cf60c\rev_rev_left_72d5f-rev_right_cf60c\src\main\java\org\corfudb\runtime\object\CorfuSMRObjectProxy.java
Different Spacing: false
Left editions: []
Right editions: [452, 454]
Merged body: 
// START applySMRUpdate(long-long-SMREntry-SMREntry-P-P)//boolean applySMRUpdate(long address, SMREntry entry, P obj) {
        log.trace("Apply SMR update at {} : {}", address, entry);
        // Look for the uninstrumented method
        try {
            // Find the method by using the method name hash table.
            Method m = methodHashTable.computeIfAbsent(entry.getSMRMethod(),
                    s -> {
                        try {
                            return obj.getClass().getMethod(ReflectionUtils.getMethodNameOnlyFromString(entry.getSMRMethod()),
                                    ReflectionUtils.getArgumentTypesFromString(entry.getSMRMethod()));
                        } catch (NoSuchMethodException nsme) {
                            return null;
                        }
                    });

            if (m == null) {
                throw new NoSuchMethodException(entry.getSMRMethod());
            }
            // Execute the SMR command
// RIGHT //            methodAccessMode.set(true);
            Object ret = m.invoke(obj, entry.getSMRArguments());
// RIGHT //            methodAccessMode.set(false);
            // Update the current timestamp.
            timestamp = address;
            log.trace("Timestamp for [{}] updated to {}", sv.getStreamID(), address);
            if (completableFutureMap.containsKey(address)) {
                completableFutureMap.get(address).complete(ret);
            }
            if (postHandler != null) {
                postHandler.handle(entry.getSMRMethod(), entry.getSMRArguments(), obj);
            }
            return true;
        } catch (NoSuchMethodException n) {
            log.error("Couldn't find method {} during apply update", entry.getSMRMethod(), n);
            if (completableFutureMap.containsKey(address)) {
                completableFutureMap.get(address).completeExceptionally(n);
            }
        } catch (InvocationTargetException | IllegalAccessException iae) {
            log.error("Couldn't dispatch method {} during apply update", entry.getSMRMethod(), iae);
            if (completableFutureMap.containsKey(address)) {
                completableFutureMap.get(address).completeExceptionally(iae);
            }
        } catch (Exception e) {
            log.warn("Exception during application of SMR method {}", entry.getSMRMethod());
            if (completableFutureMap.containsKey(address)) {
                completableFutureMap.get(address).completeExceptionally(e);
            }
        }
        return false;
// END applySMRUpdate(long-long-SMREntry-SMREntry-P-P)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_72d5f_cf60c\rev_rev_left_72d5f-rev_right_cf60c\src\main\java\org\corfudb\runtime\object\CorfuSMRObjectProxy.java
Different Spacing: false
Left editions: [520, 521]
Right editions: []
Merged body: 
// START applyUpdate(long-long-LogEntry-LogEntry-P-P)//boolean applyUpdate(long address, LogEntry entry, P obj) {
        if (entry instanceof SMREntry) {
            return applySMRUpdate(address, (SMREntry) entry, obj);
        } else if (entry instanceof TXEntry) {
            TXEntry txEntry = (TXEntry) entry;
            log.trace("Apply TX update at {}: {}", address, txEntry);
            // First, determine if the TX is abort.
            if (txEntry.isAborted()) {
                return false;
            }
            txEntry.getTxMap().get(sv.getStreamID())
                    .getUpdates().stream()
                    .forEach(x -> applySMRUpdate(address, x, obj));

            return true;
        } else if (entry instanceof TXLambdaReferenceEntry) {
            log.debug("Apply TXLambdaRef {} at {}", ((TXLambdaReferenceEntry) entry).getMethod().toString(), address);
            try (TXLambdaReferenceEntry.LambdaLock ll = TXLambdaReferenceEntry.getLockForTXAddress(address)) {
                // unlock the sync lock :::
                // TODO: fixme this is ugly
                rwLock.writeLock().unlock();
                try {
                    ll.getLock().lock();
                    // check if the timestamp has moved past this lambda ref (due to another thread applying the same TX)
                    log.info("Object[{}]: execute TXLambdaRef@{}", getStreamID(), address);
                    if (timestamp < address) {
                        TransactionalContext.newContext(new LambdaTransactionalContext(runtime, address));
                        ((TXLambdaReferenceEntry) entry).invoke();
                        TransactionalContext.removeContext();
                    }
                } finally {
                    rwLock.writeLock().lock();
                }
            }
            return true;
// LEFT //        } else if (entry instanceof OptimizedTXEntry) {
// LEFT //            ((OptimizedTXEntry)entry).getUpdates().stream().forEach(x -> applySMRUpdate(address, x, obj));
        }
        return false;
// END applyUpdate(long-long-LogEntry-LogEntry-P-P)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_72d5f_cf60c\rev_rev_left_72d5f-rev_right_cf60c\src\main\java\org\corfudb\runtime\object\CorfuSMRObjectProxy.java
Different Spacing: false
Left editions: [535, 536]
Right editions: [528]
Merged body: 
// START sync(P-P-long-long)//@Override
// RIGHT //    public synchronized void sync(P obj, long maxPos) {
            LogData[] entries = sv.readTo(maxPos);
            log.trace("Object[{}] sync to pos {}, read {} entries",
                    sv.getStreamID(), maxPos == Long.MAX_VALUE ? "MAX" : maxPos, entries.length);
            Arrays.stream(entries)
                    .filter(m -> m.getType() == DataType.DATA)
                    .filter(m -> m.getPayload(runtime) instanceof SMREntry ||
// LEFT //                            m.getPayload(runtime) instanceof TXEntry || m.getPayload(runtime) instanceof TXLambdaReferenceEntry ||
// LEFT //                            m.getPayload(runtime) instanceof OptimizedTXEntry)
                    .forEach(m -> applyUpdate(m.getGlobalAddress(), (LogEntry) m.getPayload(runtime), obj));
// END sync(P-P-long-long)//        }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cf60c-37b9e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_87a03-cd6fa
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c69ae-f4b48
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_c69ae_f4b48\rev_rev_left_c69ae-rev_right_f4b48\src\main\java\org\corfudb\infrastructure\SequencerServer.java
Different Spacing: false
Left editions: [220, 228]
Right editions: []
Merged body: 
// START handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//@Override
    public synchronized void handleMessage(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {
        switch (msg.getMsgType()) {
            case TOKEN_REQ: {
                TokenRequest req = ((CorfuPayloadMsg<TokenRequest>) msg).getPayload();
                if (req.getNumTokens() == 0) {
                    long max = 0L;
                    boolean hit = false;
                    ImmutableMap.Builder<UUID, Long> streamsLastIssued = ImmutableMap.builder();
                    for (UUID id : req.getStreams()) {
                        lastLocalOffsetMap.compute(id, (k, v) -> {
                            if (v == null) {
                                streamsLastIssued.put(k, -1L);
                                return null;
                            }
                            streamsLastIssued.put(k, v);
                            return v;
                        });
                        Long lastIssued = lastIssuedMap.get(id);
                        if (lastIssued != null) {
                            hit = true;
                        }
                        max = Math.max(max, lastIssued == null ? Long.MIN_VALUE : lastIssued);
                    }
                    if (!hit) {
                        max = -1L; //no token ever issued
                    }
                    if (req.getStreams().size() == 0) {
                        max = globalIndex.get() - 1;
                    }
                    r.sendResponse(ctx, msg, CorfuMsgType.TOKEN_RES.payloadMsg(
                                    new TokenResponse(max, Collections.emptyMap(), streamsLastIssued.build())));
                } else {
                    long thisIssue = globalIndex.getAndAdd(req.getNumTokens());
                    if (req.getStreams() == null) {
                        r.sendResponse(ctx, msg, CorfuMsgType.TOKEN_RES.payloadMsg(
                                new TokenResponse(thisIssue, Collections.emptyMap(), Collections.emptyMap())));
                        return;
                    }
                    if (req.getTxnResolution()) {
                        // Then also need a read timestamp.
                        long timestamp = req.getReadTimestamp();
                        if (timestamp != -1L) {
                            AtomicBoolean abort = new AtomicBoolean(false);
                            for (UUID id : req.getStreams()) {
                                if (abort.get())
                                    break;
                                lastIssuedMap.compute(id, (k, v) -> {
                                    if (v == null) {
                                        return null;
                                    } else {
                                        if (v > timestamp) {
// LEFT //                                            log.debug("Rejecting request due to {} > {} on stream {}", v, timestamp, id);
                                            abort.set(true);
                                        }
                                    }
                                    return v;
                                });
                            }
                            if (abort.get()) {
// LEFT //                                globalIndex.getAndAdd(-req.getNumTokens());
                                r.sendResponse(ctx, msg, CorfuMsgType.TOKEN_RES.payloadMsg(
                                        new TokenResponse(-1L, Collections.emptyMap(), Collections.emptyMap())));
                                return;
                            }
                        }
                    }

                    ImmutableMap.Builder<UUID, Long> mb = ImmutableMap.builder();
                    ImmutableMap.Builder<UUID, Long> localAddresses = ImmutableMap.builder();
                    for (UUID id : req.getStreams()) {
                        lastIssuedMap.compute(id, (k, v) -> {
                            if (v == null) {
                                mb.put(k, -1L);
                                return thisIssue + req.getNumTokens() - 1;
                            }
                            mb.put(k, v);
                            return Math.max(thisIssue + req.getNumTokens() - 1, v);
                        });
                        if (((CorfuPayloadMsg<TokenRequest>) msg).getPayload().getReplexOverwrite() ||
                                !((CorfuPayloadMsg<TokenRequest>) msg).getPayload().getOverwrite()) {
                            lastLocalOffsetMap.compute(id, (k, v) -> {
                                if (v == null) {
                                    localAddresses.put(k, 0L);
                                    return 0L;
                                }
                                localAddresses.put(k, v + req.getNumTokens());
                                return v + req.getNumTokens();
                            });
                        }
                    }
                    r.sendResponse(ctx, msg, CorfuMsgType.TOKEN_RES.payloadMsg(
                            new TokenResponse(thisIssue,
                                    mb.build(),
                                    localAddresses.build())));
                }
            }
            break;
            default:
                log.warn("Unknown message type {} passed to handler!", msg.getMsgType());
                throw new RuntimeException("Unsupported message passed to handler!");
        }
// END handleMessage(CorfuMsg-CorfuMsg-ChannelHandlerContext-ChannelHandlerContext-IServerRouter-IServerRouter)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a9e1a-c18f2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c18f2-aef87
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f1cd5-b1885
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1fbc6-3a617
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3b32a-b3142
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\CorfuDB\revisions\rev_3b32a_b3142\rev_rev_left_3b32a-rev_right_b3142\src\test\java\org\corfudb\runtime\collections\SMRMapTest.java
Different Spacing: false
Left editions: []
Right editions: [363]
Merged body: 
// START modificationDuringTransactionCausesAbort({FormalParametersInternal})//@Test
    @SuppressWarnings("unchecked")
    public void modificationDuringTransactionCausesAbort()
            throws Exception {
        Map<String, String> testMap = getRuntime().getObjectsView()
                .open(CorfuRuntime.getStreamID("A"), SMRMap.class);
        assertThat(testMap.put("a", "z"));
        getRuntime().getObjectsView().TXBegin();
        assertThat(testMap.put("a", "a"))
                .isEqualTo("z");
        assertThat(testMap.put("a", "b"))
                .isEqualTo("a");
        assertThat(testMap.get("a"))
                .isEqualTo("b");
        CompletableFuture cf = CompletableFuture.runAsync(() -> {
            Map<String, String> testMap2 = getRuntime().getObjectsView()
                    .open(UUID.nameUUIDFromBytes("A".getBytes()), SMRMap.class, null,
// RIGHT //                            EnumSet.of(ObjectOpenOptions.NO_CACHE), SerializerType.JSON);
            testMap2.put("a", "f");
        });
        cf.join();
        assertThatThrownBy(() -> getRuntime().getObjectsView().TXEnd())
                .isInstanceOf(TransactionAbortedException.class);
// END modificationDuringTransactionCausesAbort({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b3142-169bd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_599d9-a9a90
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d4d44-bc2a9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c0107-74eb7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_54847-d9150
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_212f4-7b62f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_de212-3d11f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_27ab4-0ed61
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7de2b-dbeea
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5ad04-c9a17
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_82363-f7a43
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_38ad9-4bd00
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4bd00-62f0b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_09367-25b98
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_32ec4-7a50a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7a50a-3575b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_72041-3575b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_91a99-653cd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9792c-ef2a1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ef2a1-ed303
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a7ab8-9e185
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9e185-e37ca
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4c85a-034de
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bea55-41fc6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a9586-73bfe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cf804-a1624
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_617ab-62c90
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4e85e-fb8a8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8bdfe-170b7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_170b7-c90c4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_aee25-ac491
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ac491-1b582
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fd2b8-46b3f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58190-fabf7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b3bbb-2f594
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_99107-2f594
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2f594-ff394
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cd1cc-697ee
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_697ee-43edd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_64a84-f719f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bf102-f719f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f719f-3d44e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e4afd-fefca
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fefca-42624
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_de4e8-c1111
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8926c-6b1b3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_83c39-ea2fb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ea2fb-7a94d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c449c-3b6a7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7c74d-16fc1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3e4c0-94eb8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_94eb8-12714
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ca44c-fa749
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_468ae-f7430
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7558d-507b9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_22749-9d2fc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ce74b-f087f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_06910-cddc9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cddc9-056b4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_53d81-5c2f5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5c2f5-536a7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35a8a-05b59
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f9f86-c158a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c158a-75f4c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fdb1b-3ca86
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b0732-3ca86
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3ca86-08284
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d3759-702f3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_967ef-80d38
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_80d38-d66cc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e9213-d6a6e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8cb94-9b119
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cd5f7-65c4c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ebefd-4dbf0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a35b8-8fef9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_828e3-2846d
#MS_XXX_MS#

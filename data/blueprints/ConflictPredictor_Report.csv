#MS_XXX_MS#
Merge scenario: rev_cb5c9-6339d
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_cb5c9_6339d\rev_rev_left_cb5c9-rev_right_6339d\blueprints-neo4j-graph\src\main\java\com\tinkerpop\blueprints\impls\neo4j\Neo4jGraph.java
Different Spacing: false
Left editions: []
Right editions: [365, 366]
Merged body: 
// START getVertex(Object-Object)//public Vertex getVertex(final Object id) {
        if (null == id)
            throw ExceptionFactory.vertexIdCanNotBeNull();

        try {
            final Long longId;
            if (id instanceof Long)
                longId = (Long) id;
// RIGHT //            else if (id instanceof Number)
// RIGHT //                longId = ((Number) id).longValue();
            else
                longId = Double.valueOf(id.toString()).longValue();
            return new Neo4jVertex(this.rawGraph.getNodeById(longId), this);
        } catch (NotFoundException e) {
            return null;
        } catch (NumberFormatException e) {
            return null;
        }
// END getVertex(Object-Object)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_cb5c9_6339d\rev_rev_left_cb5c9-rev_right_6339d\blueprints-neo4j-graph\src\main\java\com\tinkerpop\blueprints\impls\neo4j\Neo4jGraph.java
Different Spacing: false
Left editions: [209]
Right editions: []
Merged body: 
// START freshLoad({FormalParametersInternal})//private void freshLoad() {
        // remove reference node in a single transaction
        try {
// LEFT //            this.autoStartTransaction();
            this.removeVertex(this.getVertex(0));
            this.stopTransaction(Conclusion.SUCCESS);
        } catch (Exception e) {
            this.stopTransaction(Conclusion.FAILURE);
        }
// END freshLoad({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_cb5c9_6339d\rev_rev_left_cb5c9-rev_right_6339d\blueprints-test\src\main\java\com\tinkerpop\blueprints\KeyIndexableGraphTestSuite.java
Different Spacing: false
Left editions: [139, 152, 164]
Right editions: []
Merged body: 
// START testReIndexingOfElements({FormalParametersInternal})//public void testReIndexingOfElements() {
        KeyIndexableGraph graph = (KeyIndexableGraph) graphTest.generateGraph();
// LEFT //        if (graph.getFeatures().supportsVertexKeyIndex) {
            Vertex vertex = graph.addVertex(null);
            vertex.setProperty("name", "marko");
            if (!graph.getFeatures().isWrapper)
                assertTrue(graph.getVertices("name", "marko") instanceof PropertyFilteredIterable);
            assertEquals(count(graph.getVertices("name", "marko")), 1);
            assertEquals(graph.getVertices("name", "marko").iterator().next(), vertex);
            graph.createKeyIndex("name", Vertex.class);
            assertFalse(graph.getVertices("name", "marko") instanceof PropertyFilteredIterable);
            assertEquals(count(graph.getVertices("name", "marko")), 1);
            assertEquals(graph.getVertices("name", "marko").iterator().next(), vertex);
        }

// LEFT //        if (graph.getFeatures().supportsEdgeKeyIndex) {
            Edge edge = graph.addEdge(null, graph.addVertex(null), graph.addVertex(null), "knows");
            edge.setProperty("date", 2012);
            if (!graph.getFeatures().isWrapper)
                assertTrue(graph.getEdges("date", 2012) instanceof PropertyFilteredIterable);
            assertEquals(count(graph.getEdges("date", 2012)), 1);
            assertEquals(graph.getEdges("date", 2012).iterator().next(), edge);
            graph.createKeyIndex("date", Edge.class);
            assertFalse(graph.getEdges("date", 2012) instanceof PropertyFilteredIterable);
            assertEquals(count(graph.getEdges("date", 2012)), 1);
            assertEquals(graph.getEdges("date", 2012).iterator().next(), edge);
        }
// LEFT //        graph.shutdown();
// END testReIndexingOfElements({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_55458-adcfc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0fb7a-23e10
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b0bc7-409a5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_07faf-3a18d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e3f50-77a7f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77a7f-e3f50
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_91792-8b227
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_01c39-3b407
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_45910-fc494
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_17955-57d5b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3afed-a0540
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6de4d-5378c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8c2d8-a12cc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e976b-a12cc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_866af-c7c21
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a1366-a9d14
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b4f3d-8347b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_55511-eed83
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_84438-777f9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e8ee2-e9def
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8e4bb-b8e32
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_092c4-28c39
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_59d9b-9dc03
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0f057-0dc08
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f2f8c-e7eb9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9ed50-b769e
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_9ed50_b769e\rev_rev_left_9ed50-rev_right_b769e\blueprints-dex-graph\src\main\java\com\tinkerpop\blueprints\impls\dex\DexGraph.java
Different Spacing: true
Left editions: []
Right editions: []
Merged body: 
// START shutdown({FormalParametersInternal})//@Override
    public void shutdown() {
        stopTransaction(Conclusion.SUCCESS);
        
        db.close();
        dex.close();
// END shutdown({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_9ed50_b769e\rev_rev_left_9ed50-rev_right_b769e\blueprints-dex-graph\src\main\java\com\tinkerpop\blueprints\impls\dex\DexGraph.java
Different Spacing: true
Left editions: []
Right editions: []
Merged body: 
// START autoStartTransaction({FormalParametersInternal})//void autoStartTransaction() {
        if (sessionData.get().session == null) {
            sessionData.get().session = db.newSession();
            //System.out.println("> th=" + Thread.currentThread().getId() + " starts tx with sess=" + sess);
        } else {
            assert !sessionData.get().session.isClosed();
        }
// END autoStartTransaction({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_9ed50_b769e\rev_rev_left_9ed50-rev_right_b769e\blueprints-dex-graph\src\main\java\com\tinkerpop\blueprints\impls\dex\DexGraph.java
Different Spacing: true
Left editions: []
Right editions: []
Merged body: 
// START stopTransaction(Conclusion-Conclusion)//@Override
    public void stopTransaction(Conclusion conclusion) {
        if (sessionData.get().session == null) {
            // already closed session
            return;
        }
        if (Conclusion.FAILURE == conclusion) {
            throw new UnsupportedOperationException("FAILURE conclusion is not supported");
        }
        //
        // Close Session
        //
        closeAllSessionCollections();
        if (sessionData.get().session != null && !sessionData.get().session.isClosed()) {
            sessionData.get().session.close();
        }
        sessionData.get().session = null;
        
        //System.out.println("< th=" + Thread.currentThread().getId() + " ends tx with sess=" + sess);
// END stopTransaction(Conclusion-Conclusion)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_665db-0d5eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_720b1-a8654
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31861-04e60
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_38a29-d64df
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0e308-d5276
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2158f-a5a87
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fcd34-ef948
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_851cc-97b0d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_74e1c-96173
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f2d38-ca64c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3f5f9-1a5bc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16999-952b0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4e4c0-b98bb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_29eb4-19780
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58507-a6aad
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ec13a-efbb2
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_ec13a_efbb2\rev_rev_left_ec13a-rev_right_efbb2\blueprints-core\src\main\java\com\tinkerpop\blueprints\util\wrappers\event\listener\EdgeRemovedEvent.java
Different Spacing: false
Left editions: [35]
Right editions: [37]
Merged body: 
// START fireEvent(Iterator<GraphChangedListener>-Iterator<GraphChangedListener>)//@Override
// LEFT //    public void fireEvent(final Iterator<GraphChangedListener> eventListeners) {
        while (eventListeners.hasNext()) {
// RIGHT //            eventListeners.next().edgeRemoved(edge, props);
        }
// END fireEvent(Iterator<GraphChangedListener>-Iterator<GraphChangedListener>)//    }

#CP_===_CP#
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_ec13a_efbb2\rev_rev_left_ec13a-rev_right_efbb2\blueprints-core\src\main\java\com\tinkerpop\blueprints\util\wrappers\event\listener\VertexRemovedEvent.java
Different Spacing: false
Left editions: [44, 45, 46, 47, 48]
Right editions: []
Merged body: 
// START fireEvent(Iterator<GraphChangedListener>-Iterator<GraphChangedListener>)//// LEFT //@Override
// LEFT //    public void fireEvent(final Iterator<GraphChangedListener> eventListeners) {
// LEFT //        while (eventListeners.hasNext()) {
// LEFT //            eventListeners.next().vertexRemoved(vertex, props);
// LEFT //        }
// END fireEvent(Iterator<GraphChangedListener>-Iterator<GraphChangedListener>)//    }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3d426-e49ba
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5b0ea-ca557
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_67cb8-4130e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4130e-dee98
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a89b9-d2764
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2107d-b41b2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a525e-3702d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dc8eb-81fbb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7d285-197a3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7d3cf-64a26
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6a496-ee120
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_83e9e-b0406
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_91049-caa41
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_af74c-adccb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_90238-8ec17
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bf1d3-e8df2
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_bf1d3_e8df2\rev_rev_left_bf1d3-rev_right_e8df2\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: [153, 187, 188]
Right editions: [162, 164, 165, 175, 178, 184, 185, 190, 191]
Merged body: 
// START edges({FormalParametersInternal})//@Override
    public Iterable<Edge> edges() {
// LEFT //        if (maximum == 0)
            return Collections.emptyList();

        if (((OrientBaseGraph) graph).isUseLightweightEdges())
            return super.edges();

        final StringBuilder text = new StringBuilder();

        // GO DIRECTLY AGAINST E CLASS AND SUB-CLASSES
// RIGHT //		text.append(QUERY_SELECT_FROM);

// RIGHT //		if (((OrientBaseGraph) graph).isUseClassForEdgeLabel()
// RIGHT //				&& labels != null && labels.length > 0) {
            // FILTER PER CLASS SAVING CHECKING OF LABEL PROPERTY
            if (labels.length == 1)
                // USE THE CLASS NAME
                text.append(OrientBaseGraph.encodeClassName(labels[0]));
            else {
                // MULTIPLE CLASSES NOT SUPPORTED DIRECTLY: CREATE A SUB-QUERY
                return super.edges();
            }
        } else
// RIGHT //			text.append(OrientEdge.CLASS_NAME);

        // APPEND ALWAYS WHERE 1=1 TO MAKE CONCATENATING EASIER
// RIGHT //		text.append(QUERY_WHERE);

        manageFilters(text);
        if (!((OrientBaseGraph) graph).isUseClassForEdgeLabel())
            manageLabels(text);

// RIGHT //		final OSQLSynchQuery<OIdentifiable> query = new OSQLSynchQuery<OIdentifiable>(
// RIGHT //				text.toString());

// LEFT //        if (maximum > 0 && maximum < Long.MAX_VALUE)
// LEFT //            query.setLimit((int) maximum);

// RIGHT //		return new OrientElementIterable<Edge>(((OrientBaseGraph) graph),
// RIGHT //				((OrientBaseGraph) graph).getRawGraph().query(query));
// END edges({FormalParametersInternal})//    }

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_bf1d3_e8df2\rev_rev_left_bf1d3-rev_right_e8df2\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: []
Right editions: [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208]
Merged body: 
// START manageLabels(StringBuilder-StringBuilder)//private void manageLabels(final StringBuilder text) {
// RIGHT //		if (labels != null && labels.length > 0) {
// RIGHT //			// APPEND LABELS
// RIGHT //			text.append(QUERY_LABEL_BEGIN);
// RIGHT //			for (int i = 0; i < labels.length; ++i) {
// RIGHT //				if (i > 0)
// RIGHT //					text.append(QUERY_SEPARATOR);
// RIGHT //				text.append(QUERY_STRING);
// RIGHT //				text.append(labels[i]);
// RIGHT //				text.append(QUERY_STRING);
// RIGHT //			}
// RIGHT //			text.append(QUERY_LABEL_END);
// RIGHT //		}
// END manageLabels(StringBuilder-StringBuilder)//// RIGHT //	}
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_bf1d3_e8df2\rev_rev_left_bf1d3-rev_right_e8df2\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: [153, 187, 188]
Right editions: [162, 164, 165, 175, 178, 184, 185, 190, 191]
Merged body: 
// START edges({FormalParametersInternal})//@Override
    public Iterable<Edge> edges() {
// LEFT //        if (maximum == 0)
            return Collections.emptyList();

        if (((OrientBaseGraph) graph).isUseLightweightEdges())
            return super.edges();

        final StringBuilder text = new StringBuilder();

        // GO DIRECTLY AGAINST E CLASS AND SUB-CLASSES
// RIGHT //		text.append(QUERY_SELECT_FROM);

// RIGHT //		if (((OrientBaseGraph) graph).isUseClassForEdgeLabel()
// RIGHT //				&& labels != null && labels.length > 0) {
            // FILTER PER CLASS SAVING CHECKING OF LABEL PROPERTY
            if (labels.length == 1)
                // USE THE CLASS NAME
                text.append(OrientBaseGraph.encodeClassName(labels[0]));
            else {
                // MULTIPLE CLASSES NOT SUPPORTED DIRECTLY: CREATE A SUB-QUERY
                return super.edges();
            }
        } else
// RIGHT //			text.append(OrientEdge.CLASS_NAME);

        // APPEND ALWAYS WHERE 1=1 TO MAKE CONCATENATING EASIER
// RIGHT //		text.append(QUERY_WHERE);

        manageFilters(text);
        if (!((OrientBaseGraph) graph).isUseClassForEdgeLabel())
            manageLabels(text);

// RIGHT //		final OSQLSynchQuery<OIdentifiable> query = new OSQLSynchQuery<OIdentifiable>(
// RIGHT //				text.toString());

// LEFT //        if (maximum > 0 && maximum < Long.MAX_VALUE)
// LEFT //            query.setLimit((int) maximum);

// RIGHT //		return new OrientElementIterable<Edge>(((OrientBaseGraph) graph),
// RIGHT //				((OrientBaseGraph) graph).getRawGraph().query(query));
// END edges({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_bf1d3_e8df2\rev_rev_left_bf1d3-rev_right_e8df2\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: []
Right editions: [212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251]
Merged body: 
// START manageFilters(StringBuilder-StringBuilder)//private void manageFilters(final StringBuilder text) {
// RIGHT //		for (HasContainer has : hasContainers) {
// RIGHT //			text.append(QUERY_FILTER_AND);

// RIGHT //			text.append(has.key);
// RIGHT //			text.append(SPACE);
// RIGHT //			switch (has.compare) {
// RIGHT //			case EQUAL:
// RIGHT //				if (has.value == null)
// RIGHT //					text.append(OPERATOR_IS);
// RIGHT //				else
// RIGHT //					text.append(OPERATOR_EQUALS);
// RIGHT //				break;
// RIGHT //			case GREATER_THAN:
// RIGHT //				text.append(OPERATOR_GT);
// RIGHT //				break;
// RIGHT //			case GREATER_THAN_EQUAL:
// RIGHT //				text.append(OPERATOR_GTE);
// RIGHT //				break;
// RIGHT //			case LESS_THAN:
// RIGHT //				text.append(OPERATOR_LT);
// RIGHT //				break;
// RIGHT //			case LESS_THAN_EQUAL:
// RIGHT //				text.append(OPERATOR_LET);
// RIGHT //				break;
// RIGHT //			case NOT_EQUAL:
// RIGHT //				if (has.value == null)
// RIGHT //					text.append(OPERATOR_IS_NOT);
// RIGHT //				else
// RIGHT //					text.append(OPERATOR_DIFFERENT);
// RIGHT //				break;
// RIGHT //			}
// RIGHT //			text.append(SPACE);

// RIGHT //			if (has.value instanceof String)
// RIGHT //				text.append(QUERY_STRING);
// RIGHT //			text.append(has.value);
// RIGHT //			if (has.value instanceof String)
// RIGHT //				text.append(QUERY_STRING);
// RIGHT //		}
// END manageFilters(StringBuilder-StringBuilder)//// RIGHT //	}
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_bf1d3_e8df2\rev_rev_left_bf1d3-rev_right_e8df2\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: [153, 187, 188]
Right editions: [162, 164, 165, 175, 178, 184, 185, 190, 191]
Merged body: 
// START edges({FormalParametersInternal})//@Override
    public Iterable<Edge> edges() {
// LEFT //        if (maximum == 0)
            return Collections.emptyList();

        if (((OrientBaseGraph) graph).isUseLightweightEdges())
            return super.edges();

        final StringBuilder text = new StringBuilder();

        // GO DIRECTLY AGAINST E CLASS AND SUB-CLASSES
// RIGHT //		text.append(QUERY_SELECT_FROM);

// RIGHT //		if (((OrientBaseGraph) graph).isUseClassForEdgeLabel()
// RIGHT //				&& labels != null && labels.length > 0) {
            // FILTER PER CLASS SAVING CHECKING OF LABEL PROPERTY
            if (labels.length == 1)
                // USE THE CLASS NAME
                text.append(OrientBaseGraph.encodeClassName(labels[0]));
            else {
                // MULTIPLE CLASSES NOT SUPPORTED DIRECTLY: CREATE A SUB-QUERY
                return super.edges();
            }
        } else
// RIGHT //			text.append(OrientEdge.CLASS_NAME);

        // APPEND ALWAYS WHERE 1=1 TO MAKE CONCATENATING EASIER
// RIGHT //		text.append(QUERY_WHERE);

        manageFilters(text);
        if (!((OrientBaseGraph) graph).isUseClassForEdgeLabel())
            manageLabels(text);

// RIGHT //		final OSQLSynchQuery<OIdentifiable> query = new OSQLSynchQuery<OIdentifiable>(
// RIGHT //				text.toString());

// LEFT //        if (maximum > 0 && maximum < Long.MAX_VALUE)
// LEFT //            query.setLimit((int) maximum);

// RIGHT //		return new OrientElementIterable<Edge>(((OrientBaseGraph) graph),
// RIGHT //				((OrientBaseGraph) graph).getRawGraph().query(query));
// END edges({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_69b1d-4e284
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f0d87-e39b7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c044c-351da
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_69cee-fe0e0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78a82-ef921
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6a851-49d8a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c9682-d6b8e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_942f7-8dec8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_561cf-2b018
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_76f5c-3934f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d0f1e-d649f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9408a-91d82
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d7fbb-91d82
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_98345-f8723
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4987e-7b1ec
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4fa2d-264a7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1eb56-085f4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16c25-d3de4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_11f5f-a14ca
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d984c-a8e8c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f3e8d-38c85
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0ef54-c78f2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_33026-c78f2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f4f35-f6129
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d725a-3b4ba
#CP_===_CP#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_d725a_3b4ba\rev_rev_left_d725a-rev_right_3b4ba\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: [391, 392, 393, 394, 395, 396, 397, 398, 399, 400]
Right editions: []
Merged body: 
// START generateFilterValue(StringBuilder-StringBuilder-Object-Object)//protected void generateFilterValue(final StringBuilder text,
			final Object iValue) {
		if (iValue instanceof String)
			text.append(QUERY_STRING);
// LEFT //		
// LEFT //		final Object value;
// LEFT //		
// LEFT //		if( iValue instanceof Date )
// LEFT //			value = ((Date) iValue).getTime();
// LEFT //		else 
// LEFT //			value = iValue;
// LEFT //		
// LEFT //		text.append(value);
// LEFT //		
		if (iValue instanceof String)
			text.append(QUERY_STRING);
// END generateFilterValue(StringBuilder-StringBuilder-Object-Object)//	}
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\download\ssmerge\blueprints\revisions\rev_d725a_3b4ba\rev_rev_left_d725a-rev_right_3b4ba\blueprints-orient-graph\src\main\java\com\tinkerpop\blueprints\impls\orient\OrientGraphQuery.java
Different Spacing: false
Left editions: []
Right editions: [316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337]
Merged body: 
// START manageFilters(StringBuilder-StringBuilder)//@SuppressWarnings("unchecked")
	protected void manageFilters(final StringBuilder text) {
		boolean firstPredicate = true;
		for (HasContainer has : hasContainers) {
			if (!firstPredicate)
				text.append(QUERY_FILTER_AND);
			else
				firstPredicate = false;

			if (has.predicate instanceof Contains) {
				// IN AND NOT_IN
				if (has.predicate == Contains.NOT_IN) {
					text.append(OPERATOR_NOT);
					text.append(PARENTHESIS_BEGIN);
				}
// RIGHT //                text.append(has.key);
// RIGHT //                
// RIGHT //			    if (has.value instanceof String) {
// RIGHT //			        text.append(OPERATOR_LIKE);
// RIGHT //                    generateFilterValue(text, has.value);			        
// RIGHT //			    }
// RIGHT //			    else {
// RIGHT //			        text.append(OPERATOR_IN);
// RIGHT //    				text.append(COLLECTION_BEGIN);

// RIGHT //    				boolean firstItem = true;
// RIGHT //    				for (Object o : (Collection<Object>) has.value) {
// RIGHT //    					if (!firstItem)
// RIGHT //    						text.append(QUERY_SEPARATOR);
// RIGHT //    					else
// RIGHT //    						firstItem = false;
// RIGHT //    					generateFilterValue(text, o);
// RIGHT //    				}

// RIGHT //    				text.append(COLLECTION_END);
// RIGHT //			    }
// RIGHT //

				if (has.predicate == Contains.NOT_IN)
					text.append(PARENTHESIS_END);
			} else {
				// ANY OTHER OPERATORS
				text.append(has.key);
				text.append(SPACE);

				if (has.predicate instanceof com.tinkerpop.blueprints.Compare) {
					final com.tinkerpop.blueprints.Compare compare = (com.tinkerpop.blueprints.Compare) has.predicate;
					switch (compare) {
					case EQUAL:
						if (has.value == null)
							// IS
							text.append(OPERATOR_IS);
						else
							// EQUALS
							text.append(OPERATOR_EQUALS);
						break;
					case GREATER_THAN:
						text.append(OPERATOR_GT);
						break;
					case GREATER_THAN_EQUAL:
						text.append(OPERATOR_GTE);
						break;
					case LESS_THAN:
						text.append(OPERATOR_LT);
						break;
					case LESS_THAN_EQUAL:
						text.append(OPERATOR_LET);
						break;
					case NOT_EQUAL:
						if (has.value == null)
							text.append(OPERATOR_IS_NOT);
						else
							text.append(OPERATOR_DIFFERENT);
						break;
					}
					text.append(SPACE);
					generateFilterValue(text, has.value);
				}

				if (has.value instanceof Collection<?>)
					text.append(PARENTHESIS_END);
			}
		}
// END manageFilters(StringBuilder-StringBuilder)//	}
Edition adds call: 1
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b9aeb-ce1f0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2525c-198e9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_46c22-58b06
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_75545-44cc7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4f96f-8c8a9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_00573-da687
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31b90-beb54
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_56339-c7e93
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3cb22-1174d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c0811-cd0fe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_593f4-725d7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4f735-a2be6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_30e3c-f0737
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fd1fc-08fd0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_942a3-47d2b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3f897-5a205
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e7f8d-18283
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8a1ff-d5a20
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b8495-06d33
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cbaee-ccc76
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_80023-1b5a7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_175a7-30ee0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_25bc6-b12d1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1af6b-49200
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e0ff7-6f6ce
#CP_===_CP#
Type: EditSameMC
File: C:\download\ssmerge\blueprints\revisions\rev_e0ff7_6f6ce\rev_rev_left_e0ff7-rev_right_6f6ce\blueprints-neo4j2-graph\src\main\java\com\tinkerpop\blueprints\impls\neo4j2\Neo4j2EdgeIterable.java
Different Spacing: false
Left editions: [57]
Right editions: [52]
Merged body: 
// START iterator({FormalParametersInternal})//public Iterator<Neo4j2Edge> iterator() {
// RIGHT //        graph.autoStartTransaction(false);
        return new Iterator<Neo4j2Edge>() {
            private final Iterator<Relationship> itty = relationships.iterator();

            public void remove() {
// LEFT //                throw new UnsupportedOperationException();
            }

            public Neo4j2Edge next() {
                graph.autoStartTransaction(false);
                return new Neo4j2Edge(this.itty.next(), graph);
            }

            public boolean hasNext() {
                graph.autoStartTransaction(false);
                return this.itty.hasNext();
            }
        };
// END iterator({FormalParametersInternal})//    }

#CP_===_CP#
#MS_XXX_MS#

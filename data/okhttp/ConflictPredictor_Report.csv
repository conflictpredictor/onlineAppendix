#MS_XXX_MS#
Merge scenario: rev_df778-99fb9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4c39c-2f5e2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ccb88-7bcdc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e9f1e-0c550
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4b7a4-49082
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4b7a4_49082\rev_rev_left_4b7a4-rev_right_49082\src\main\java\com\squareup\okhttp\internal\http\HttpURLConnectionImpl.java
Different Spacing: false
Left editions: []
Right editions: [513]
Merged body: 
// START processResponseHeaders({FormalParametersInternal})//private Retry processResponseHeaders() throws IOException {
        switch (getResponseCode()) {
        case HTTP_PROXY_AUTH:
            if (!usingProxy()) {
                throw new ProtocolException(
                        "Received HTTP_PROXY_AUTH (407) code while not using proxy");
            }
            // fall-through
        case HTTP_UNAUTHORIZED:
            boolean credentialsFound = HttpAuthenticator.processAuthHeader(getResponseCode(),
                    httpEngine.getResponseHeaders().getHeaders(), rawRequestHeaders, proxy, url);
            return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;

        case HTTP_MULT_CHOICE:
        case HTTP_MOVED_PERM:
        case HTTP_MOVED_TEMP:
        case HTTP_SEE_OTHER:
            if (!getInstanceFollowRedirects()) {
                return Retry.NONE;
            }
            if (++redirectionCount > MAX_REDIRECTS) {
// RIGHT //                throw new ProtocolException("Too many redirects: " + redirectionCount);
            }
            String location = getHeaderField("Location");
            if (location == null) {
                return Retry.NONE;
            }
            URL previousUrl = url;
            url = new URL(previousUrl, location);
            if (!previousUrl.getProtocol().equals(url.getProtocol())) {
                return Retry.NONE; // the scheme changed; don't retry.
            }
            if (previousUrl.getHost().equals(url.getHost())
                    && getEffectivePort(previousUrl) == getEffectivePort(url)) {
                return Retry.SAME_CONNECTION;
            } else {
                return Retry.DIFFERENT_CONNECTION;
            }

        default:
            return Retry.NONE;
        }
// END processResponseHeaders({FormalParametersInternal})//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4b7a4_49082\rev_rev_left_4b7a4-rev_right_49082\src\main\java\com\squareup\okhttp\internal\http\HttpURLConnectionImpl.java
Different Spacing: false
Left editions: [412, 413]
Right editions: []
Merged body: 
// START getResponse({FormalParametersInternal})//private HttpEngine getResponse() throws IOException {
        initHttpEngine();

        if (httpEngine.hasResponse()) {
            return httpEngine;
        }

        while (true) {
            if (!execute(true)) {
                continue;
            }

            Retry retry = processResponseHeaders();
            if (retry == Retry.NONE) {
                httpEngine.automaticallyReleaseConnectionToPool();
                return httpEngine;
            }

            /*
             * The first request was insufficient. Prepare for another...
             */
            String retryMethod = method;
            OutputStream requestBody = httpEngine.getRequestBody();

            /*
             * Although RFC 2616 10.3.2 specifies that a HTTP_MOVED_PERM
             * redirect should keep the same method, Chrome, Firefox and the
             * RI all issue GETs when following any redirect.
             */
            int responseCode = getResponseCode();
            if (responseCode == HTTP_MULT_CHOICE || responseCode == HTTP_MOVED_PERM
                    || responseCode == HTTP_MOVED_TEMP || responseCode == HTTP_SEE_OTHER) {
                retryMethod = "GET";
                requestBody = null;
            }

            if (requestBody != null && !(requestBody instanceof RetryableOutputStream)) {
                throw new HttpRetryException("Cannot retry streamed HTTP body",
                        httpEngine.getResponseCode());
            }

            if (retry == Retry.DIFFERENT_CONNECTION) {
                httpEngine.automaticallyReleaseConnectionToPool();
// LEFT //            } else if (retry == Retry.SAME_CONNECTION && httpEngine.getConnection() != null) {
// LEFT //                httpEngine.getConnection().setRecycled();
            }

            httpEngine.release(false);

            httpEngine = newHttpEngine(retryMethod, rawRequestHeaders,
                    httpEngine.getConnection(), (RetryableOutputStream) requestBody);
        }
// END getResponse({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1c599-2aaf0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_780a2-01006
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_af61b-923eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f38fe-cb7ad
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0ff5c-3bbe0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ab855-19d3b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8e867-35166
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_112d3-d9872
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9f092-58d0b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1dc3d-5345c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8f586-d7e24
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cc9e7-06e6b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_63099-550a4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8a322-812ba
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cee52-27861
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c1757-3108f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9a63d-d6681
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8e5ea-c7a90
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_17e54-efc95
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_99371-83e77
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_638ae-36959
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_365bf-98920
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_43a7c-29ab4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ef44b-32a71
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cf03b-f2a6a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_46fa5-d451e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c5f94-8ad6e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5c995-a31a5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8e458-f3a45
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d2020-57c0b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2a059-57653
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_839b7-3aa70
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_81c99-9eb27
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77368-c05cb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_92d38-ce40d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_132c4-c1458
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f18ed-ded43
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a26dd-2207d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d4e80-35816
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d587a-2d015
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b2293-15099
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4c8ce-cd165
#CP_===_CP#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4c8ce_cd165\rev_rev_left_4c8ce-rev_right_cd165\okhttp-protocols\src\main\java\com\squareup\okhttp\internal\bytes\GzipSource.java
Different Spacing: false
Left editions: [152]
Right editions: [178, 188]
Merged body: 
// START consumeHeader(Deadline-Deadline)//private void consumeHeader(Deadline deadline) throws IOException {
    // Read the 10-byte header. We peek at the flags byte first so we know if we
    // need to CRC the entire header. Then we read the magic ID1ID2 sequence.
    // We can skip everything else in the first 10 bytes.
    // +---+---+---+---+---+---+---+---+---+---+
    // |ID1|ID2|CM |FLG|     MTIME     |XFL|OS | (more-->)
    // +---+---+---+---+---+---+---+---+---+---+
    require(10, deadline);
// LEFT //    byte flags = buffer.getByte(3);
    boolean fhcrc = ((flags >> FHCRC) & 1) == 1;
    if (fhcrc) updateCrc(buffer, 0, 10);

    short id1id2 = buffer.readShort();
    checkEqual("ID1ID2", (short) 0x1f8b, id1id2);
    buffer.skip(8);

    // Skip optional extra fields.
    // +---+---+=================================+
    // | XLEN  |...XLEN bytes of "extra field"...| (more-->)
    // +---+---+=================================+
    if (((flags >> FEXTRA) & 1) == 1) {
      require(2, deadline);
      if (fhcrc) updateCrc(buffer, 0, 2);
      int xlen = buffer.readShortLe() & 0xffff;
      require(xlen, deadline);
      if (fhcrc) updateCrc(buffer, 0, xlen);
      buffer.skip(xlen);
    }

    // Skip an optional 0-terminated name.
    // +=========================================+
    // |...original file name, zero-terminated...| (more-->)
    // +=========================================+
    if (((flags >> FNAME) & 1) == 1) {
// RIGHT //      long index = OkBuffers.seek(buffer, (byte) 0, source, deadline);
      if (fhcrc) updateCrc(buffer, 0, index + 1);
      buffer.skip(index + 1);
    }

    // Skip an optional 0-terminated comment.
    // +===================================+
    // |...file comment, zero-terminated...| (more-->)
    // +===================================+
    if (((flags >> FCOMMENT) & 1) == 1) {
// RIGHT //      long index = OkBuffers.seek(buffer, (byte) 0, source, deadline);
      if (fhcrc) updateCrc(buffer, 0, index + 1);
      buffer.skip(index + 1);
    }

    // Confirm the optional header CRC.
    // +---+---+
    // | CRC16 |
    // +---+---+
    if (fhcrc) {
      checkEqual("FHCRC", buffer.readShortLe(), (short) crc.getValue());
      crc.reset();
    }
// END consumeHeader(Deadline-Deadline)//  }

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4c8ce_cd165\rev_rev_left_4c8ce-rev_right_cd165\okhttp-protocols\src\main\java\com\squareup\okhttp\internal\bytes\GzipSource.java
Different Spacing: false
Left editions: []
Right editions: [249]
Merged body: 
// START checkEqual(String-String-int-int-int-int)//private void checkEqual(String name, int expected, int actual) throws IOException {
    if (actual != expected) {
      throw new IOException(String.format(
// RIGHT //          "%s: actual 0x%08x != expected 0x%08x", name, actual, expected));
    }
// END checkEqual(String-String-int-int-int-int)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4c8ce_cd165\rev_rev_left_4c8ce-rev_right_cd165\okhttp-protocols\src\main\java\com\squareup\okhttp\internal\bytes\GzipSource.java
Different Spacing: false
Left editions: [152]
Right editions: [178, 188]
Merged body: 
// START consumeHeader(Deadline-Deadline)//private void consumeHeader(Deadline deadline) throws IOException {
    // Read the 10-byte header. We peek at the flags byte first so we know if we
    // need to CRC the entire header. Then we read the magic ID1ID2 sequence.
    // We can skip everything else in the first 10 bytes.
    // +---+---+---+---+---+---+---+---+---+---+
    // |ID1|ID2|CM |FLG|     MTIME     |XFL|OS | (more-->)
    // +---+---+---+---+---+---+---+---+---+---+
    require(10, deadline);
// LEFT //    byte flags = buffer.getByte(3);
    boolean fhcrc = ((flags >> FHCRC) & 1) == 1;
    if (fhcrc) updateCrc(buffer, 0, 10);

    short id1id2 = buffer.readShort();
    checkEqual("ID1ID2", (short) 0x1f8b, id1id2);
    buffer.skip(8);

    // Skip optional extra fields.
    // +---+---+=================================+
    // | XLEN  |...XLEN bytes of "extra field"...| (more-->)
    // +---+---+=================================+
    if (((flags >> FEXTRA) & 1) == 1) {
      require(2, deadline);
      if (fhcrc) updateCrc(buffer, 0, 2);
      int xlen = buffer.readShortLe() & 0xffff;
      require(xlen, deadline);
      if (fhcrc) updateCrc(buffer, 0, xlen);
      buffer.skip(xlen);
    }

    // Skip an optional 0-terminated name.
    // +=========================================+
    // |...original file name, zero-terminated...| (more-->)
    // +=========================================+
    if (((flags >> FNAME) & 1) == 1) {
// RIGHT //      long index = OkBuffers.seek(buffer, (byte) 0, source, deadline);
      if (fhcrc) updateCrc(buffer, 0, index + 1);
      buffer.skip(index + 1);
    }

    // Skip an optional 0-terminated comment.
    // +===================================+
    // |...file comment, zero-terminated...| (more-->)
    // +===================================+
    if (((flags >> FCOMMENT) & 1) == 1) {
// RIGHT //      long index = OkBuffers.seek(buffer, (byte) 0, source, deadline);
      if (fhcrc) updateCrc(buffer, 0, index + 1);
      buffer.skip(index + 1);
    }

    // Confirm the optional header CRC.
    // +---+---+
    // | CRC16 |
    // +---+---+
    if (fhcrc) {
      checkEqual("FHCRC", buffer.readShortLe(), (short) crc.getValue());
      crc.reset();
    }
// END consumeHeader(Deadline-Deadline)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3265d-33458
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5be60-41584
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ad0ff-e9d95
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8c154-68613
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ef370-6ad4d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_40c95-c24e4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bf976-2681b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_267ca-a562b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e6238-e40eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_85129-4fa46
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5b359-99e2d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2c473-98f60
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7f9ff-3585a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_11aa9-60ca8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8cf08-5f7c3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fda22-fbbc6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7a1c6-8f035
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_aec9b-6c92a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_739d8-abe9d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fd266-06f09
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7874d-57788
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bda55-bcf06
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_22678-6c57d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_71ff3-9c302
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4b433-b2420
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_37971-b8e50
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_61c86-62a7e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0365c-ff794
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a867d-9549f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_76fbd-58717
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_96099-09e73
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_09bb8-a9b4e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1b340-aca1f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_27690-d5d54
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65a03-92e42
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a76a1-0ee2c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a1f0b-550c5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58b71-770a1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d8c4d-ee2ed
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f74a8-73aaa
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_95f49-2bf8a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d0128-22a03
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d2df8-ed709
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_efa4f-efc79
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78229-b398a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_32c75-2ec20
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9598d-32264
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_848ad-0c837
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0f24a-3ae7f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_393ad-c5f1e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ae1e9-aa7e7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a889f-3469c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9375a-9bba2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6580d-6afd5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7295b-6171f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_eb40f-94f9a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_617f3-f2d5f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a53ce-1d9bb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e34ac-7d5c4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_53ff0-a1c08
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7f763-e2770
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_7f763_e2770\rev_rev_left_7f763-rev_right_e2770\okhttp-tests\src\test\java\com\squareup\okhttp\internal\http\CookiesTest.java
Different Spacing: false
Left editions: [391]
Right editions: []
Merged body: 
// START get(MockWebServer-MockWebServer-String-String)//private Map<String,List<String>> get(MockWebServer server, String path) throws Exception {
// LEFT //    URLConnection connection = new OkUrlFactory(client).open(server.getUrl(path));
    Map<String, List<String>> headers = connection.getHeaderFields();
    connection.getInputStream().close();
    return headers;
// END get(MockWebServer-MockWebServer-String-String)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_7f763_e2770\rev_rev_left_7f763-rev_right_e2770\okhttp-tests\src\test\java\com\squareup\okhttp\internal\http\CookiesTest.java
Different Spacing: false
Left editions: []
Right editions: [216]
Merged body: 
// START testQuotedAttributeValues({FormalParametersInternal})//@Test public void testQuotedAttributeValues() throws Exception {
    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
    CookieHandler.setDefault(cookieManager);
    MockWebServer server = new MockWebServer();
    server.play();

    server.enqueue(new MockResponse().addHeader("Set-Cookie2: a=\"android\"; "
        + "Comment=\"this cookie is delicious\"; "
        + "CommentURL=\"http://google.com/\"; "
        + "Discard; "
        + "Domain=\"" + server.getCookieDomain() + "\"; "
        + "Max-Age=\"60\"; "
        + "Path=\"/path\"; "
        + "Port=\"80,443," + server.getPort() + "\"; "
        + "Secure; "
        + "Version=\"1\""));
    get(server, "/path/foo");

    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();
    assertEquals(1, cookies.size());
    HttpCookie cookie = cookies.get(0);
    assertEquals("a", cookie.getName());
    assertEquals("android", cookie.getValue());
    assertEquals("this cookie is delicious", cookie.getComment());
    assertEquals("http://google.com/", cookie.getCommentURL());
    assertEquals(true, cookie.getDiscard());
// RIGHT //    assertTrue(server.getCookieDomain().equalsIgnoreCase(cookie.getDomain()));
    assertEquals(60, cookie.getMaxAge());
    assertEquals("/path", cookie.getPath());
    assertEquals("80,443," + server.getPort(), cookie.getPortlist());
    assertEquals(true, cookie.getSecure());
    assertEquals(1, cookie.getVersion());
// END testQuotedAttributeValues({FormalParametersInternal})//  }
Edition adds call: 0
#HAS_***REFERENCE_#
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_7f763_e2770\rev_rev_left_7f763-rev_right_e2770\okhttp-tests\src\test\java\com\squareup\okhttp\internal\http\CookiesTest.java
Different Spacing: false
Left editions: []
Right editions: [147]
Merged body: 
// START testRfc2109Response({FormalParametersInternal})//@Test public void testRfc2109Response() throws Exception {
    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
    CookieHandler.setDefault(cookieManager);
    MockWebServer server = new MockWebServer();
    server.play();

    server.enqueue(new MockResponse().addHeader("Set-Cookie: a=android; "
        + "Comment=this cookie is delicious; "
        + "Domain=" + server.getCookieDomain() + "; "
        + "Max-Age=60; "
        + "Path=/path; "
        + "Secure; "
        + "Version=1"));
    get(server, "/path/foo");

    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();
    assertEquals(1, cookies.size());
    HttpCookie cookie = cookies.get(0);
    assertEquals("a", cookie.getName());
    assertEquals("android", cookie.getValue());
    assertEquals("this cookie is delicious", cookie.getComment());
    assertEquals(null, cookie.getCommentURL());
    assertEquals(false, cookie.getDiscard());
// RIGHT //    assertTrue(server.getCookieDomain().equalsIgnoreCase(cookie.getDomain()));
    assertEquals(60, cookie.getMaxAge());
    assertEquals("/path", cookie.getPath());
    assertEquals(true, cookie.getSecure());
    assertEquals(1, cookie.getVersion());
// END testRfc2109Response({FormalParametersInternal})//  }
Edition adds call: 0
#HAS_***REFERENCE_#
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_7f763_e2770\rev_rev_left_7f763-rev_right_e2770\okhttp-tests\src\test\java\com\squareup\okhttp\internal\http\CookiesTest.java
Different Spacing: false
Left editions: []
Right editions: [181]
Merged body: 
// START testRfc2965Response({FormalParametersInternal})//@Test public void testRfc2965Response() throws Exception {
    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
    CookieHandler.setDefault(cookieManager);
    MockWebServer server = new MockWebServer();
    server.play();

    server.enqueue(new MockResponse().addHeader("Set-Cookie2: a=android; "
        + "Comment=this cookie is delicious; "
        + "CommentURL=http://google.com/; "
        + "Discard; "
        + "Domain=" + server.getCookieDomain() + "; "
        + "Max-Age=60; "
        + "Path=/path; "
        + "Port=\"80,443," + server.getPort() + "\"; "
        + "Secure; "
        + "Version=1"));
    get(server, "/path/foo");

    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();
    assertEquals(1, cookies.size());
    HttpCookie cookie = cookies.get(0);
    assertEquals("a", cookie.getName());
    assertEquals("android", cookie.getValue());
    assertEquals("this cookie is delicious", cookie.getComment());
    assertEquals("http://google.com/", cookie.getCommentURL());
    assertEquals(true, cookie.getDiscard());
// RIGHT //    assertTrue(server.getCookieDomain().equalsIgnoreCase(cookie.getDomain()));
    assertEquals(60, cookie.getMaxAge());
    assertEquals("/path", cookie.getPath());
    assertEquals("80,443," + server.getPort(), cookie.getPortlist());
    assertEquals(true, cookie.getSecure());
    assertEquals(1, cookie.getVersion());
// END testRfc2965Response({FormalParametersInternal})//  }
Edition adds call: 0
#HAS_***REFERENCE_#
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_7f763_e2770\rev_rev_left_7f763-rev_right_e2770\okhttp-tests\src\test\java\com\squareup\okhttp\internal\http\CookiesTest.java
Different Spacing: false
Left editions: []
Right editions: [116]
Merged body: 
// START testNetscapeResponse({FormalParametersInternal})//@Test
  public void testNetscapeResponse() throws Exception {
    CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
    CookieHandler.setDefault(cookieManager);
    MockWebServer server = new MockWebServer();
    server.play();

    server.enqueue(new MockResponse().addHeader("Set-Cookie: a=android; "
        + "expires=Fri, 31-Dec-9999 23:59:59 GMT; "
        + "path=/path; "
        + "domain=" + server.getCookieDomain() + "; "
        + "secure"));
    get(server, "/path/foo");

    List<HttpCookie> cookies = cookieManager.getCookieStore().getCookies();
    assertEquals(1, cookies.size());
    HttpCookie cookie = cookies.get(0);
    assertEquals("a", cookie.getName());
    assertEquals("android", cookie.getValue());
    assertEquals(null, cookie.getComment());
    assertEquals(null, cookie.getCommentURL());
    assertEquals(false, cookie.getDiscard());
// RIGHT //    assertTrue(server.getCookieDomain().equalsIgnoreCase(cookie.getDomain()));
    assertTrue(cookie.getMaxAge() > 100000000000L);
    assertEquals("/path", cookie.getPath());
    assertEquals(true, cookie.getSecure());
    assertEquals(0, cookie.getVersion());
// END testNetscapeResponse({FormalParametersInternal})//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1031c-84f9a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5bc7d-c3766
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fb93a-68fcc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d13f0-aaf26
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_804e8-b6b3d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e69e4-a3ce2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e52df-b3ecd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1b571-bfac3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a4d21-da1d7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bc08c-bf47e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c079c-8f1bc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_59b11-f80b1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d3607-3820b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5dcc4-5f1ab
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_41907-76705
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_18758-92b6f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2dc45-64b60
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_38718-7ec88
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_024ec-9678a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a72da-426c1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_17acc-d003d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d9f6c-7a3bb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7457d-d9534
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_361b3-122e9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f907b-cbd18
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_f907b_cbd18\rev_rev_left_f907b-rev_right_cbd18\okhttp\src\main\java\com\squareup\okhttp\Connection.java
Different Spacing: false
Left editions: []
Right editions: [498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 513]
Merged body: 
// START makeTunnel(Request-Request-int-int-int-int)//private void makeTunnel(Request request, int readTimeout, int writeTimeout)
      throws IOException {
    HttpConnection tunnelConnection = new HttpConnection(pool, this, socket);
    tunnelConnection.setTimeouts(readTimeout, writeTimeout);
    URL url = request.url();
    String requestLine = "CONNECT " + url.getHost() + ":" + url.getPort() + " HTTP/1.1";
    while (true) {
      tunnelConnection.writeRequest(request.headers(), requestLine);
      tunnelConnection.flush();
      Response response = tunnelConnection.readResponse().request(request).build();
// RIGHT //      // The response body from a CONNECT should be empty, but if it is not then we should consume
// RIGHT //      // it before proceeding.
// RIGHT //      long contentLength = OkHeaders.contentLength(response);
// RIGHT //      if (contentLength != -1) {
// RIGHT //        Source body = tunnelConnection.newFixedLengthSource(null, contentLength);
// RIGHT //        Util.skipAll(body, Integer.MAX_VALUE);
// RIGHT //      } else {
// RIGHT //        tunnelConnection.emptyResponseBody();
// RIGHT //      }

      switch (response.code()) {
        case HTTP_OK:
          // Assume the server won't send a TLS ServerHello until we send a TLS ClientHello. If that
          // happens, then we will have buffered bytes that are needed by the SSLSocket!
// RIGHT //          // This check is imperfect: it doesn't tell us whether a handshake will succeed, just that
// RIGHT //          // it will almost certainly fail because the proxy has sent unexpected data.
          if (tunnelConnection.bufferSize() > 0) {
            throw new IOException("TLS tunnel buffered too many bytes!");
          }
          return;

        case HTTP_PROXY_AUTH:
          request = OkHeaders.processAuthHeader(
              route.address.authenticator, response, route.proxy);
          if (request != null) continue;
          throw new IOException("Failed to authenticate with proxy");

        default:
          throw new IOException(
              "Unexpected response code for CONNECT: " + response.code());
      }
    }
// END makeTunnel(Request-Request-int-int-int-int)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_f907b_cbd18\rev_rev_left_f907b-rev_right_cbd18\okhttp\src\main\java\com\squareup\okhttp\Connection.java
Different Spacing: false
Left editions: [302, 303, 304, 305, 306]
Right editions: []
Merged body: 
// START upgradeToTls(Request-Request-int-int-int-int)//private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeout)
      throws IOException {
    Platform platform = Platform.get();

    // Make an SSL Tunnel on the first message pair of each SSL + proxy connection.
    if (tunnelRequest != null) {
      makeTunnel(tunnelRequest, readTimeout, writeTimeout);
    }

    // Create the wrapper over connected socket.
    socket = route.address.sslSocketFactory
        .createSocket(socket, route.address.uriHost, route.address.uriPort, true /* autoClose */);
    SSLSocket sslSocket = (SSLSocket) socket;

    // Configure the socket's ciphers, TLS versions, and extensions.
    route.connectionSpec.apply(sslSocket, route);

    // Force handshake. This can throw!
    sslSocket.startHandshake();

    // Verify that the socket's certificates are acceptable for the target host.
    if (!route.address.hostnameVerifier.verify(route.address.uriHost, sslSocket.getSession())) {
// LEFT //      X509Certificate cert = (X509Certificate) sslSocket.getSession().getPeerCertificates()[0];
// LEFT //      throw new IOException("Hostname " + route.address.uriHost + " not verified:"
// LEFT //          + "\n    certificate: " + CertificatePinner.pin(cert)
// LEFT //          + "\n    DN: " + cert.getSubjectDN().getName()
// LEFT //          + "\n    subjectAltNames: " + OkHostnameVerifier.allSubjectAltNames(cert));
    }

    // Check that the certificate pinner is satisfied by the certificates presented.
    route.address.certificatePinner.check(route.address.uriHost,
        sslSocket.getSession().getPeerCertificates());

    handshake = Handshake.get(sslSocket.getSession());

    String maybeProtocol;
    if (route.connectionSpec.supportsTlsExtensions()
        && (maybeProtocol = platform.getSelectedProtocol(sslSocket)) != null) {
      protocol = Protocol.get(maybeProtocol); // Throws IOE on unknown.
    }

    if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {
      sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream.
      spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, socket)
          .protocol(protocol).build();
      spdyConnection.sendConnectionPreface();
    } else {
      httpConnection = new HttpConnection(pool, this, socket);
    }
// END upgradeToTls(Request-Request-int-int-int-int)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c3495-9abf8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_daf24-789b5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bca58-28a26
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8c81c-e362a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_84305-a21a3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9b8af-13028
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8a040-b7803
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_98135-01d68
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_66864-117eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_61c27-e74e3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_41058-5e62e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_46edb-41bee
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_971bd-94db3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16f0a-cd6ee
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_37769-15c81
#CP_===_CP#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_37769_15c81\rev_rev_left_37769-rev_right_15c81\okhttp\src\main\java\com\squareup\okhttp\internal\http\SpdyTransport.java
Different Spacing: false
Left editions: []
Right editions: [235]
Merged body: 
// START readNameValueBlock(List<Header>-List<Header>-Protocol-Protocol)//public static Response.Builder readNameValueBlock(List<Header> headerBlock,
      Protocol protocol) throws IOException {
    String status = null;
    String version = "HTTP/1.1"; // :version present only in spdy/3.

    Headers.Builder headersBuilder = new Headers.Builder();
    headersBuilder.set(OkHeaders.SELECTED_PROTOCOL, protocol.toString());
// RIGHT //    for (int i = 0, size = headerBlock.size(); i < size; i++) {
      ByteString name = headerBlock.get(i).name;
      String values = headerBlock.get(i).value.utf8();
      for (int start = 0; start < values.length(); ) {
        int end = values.indexOf('\0', start);
        if (end == -1) {
          end = values.length();
        }
        String value = values.substring(start, end);
        if (name.equals(RESPONSE_STATUS)) {
          status = value;
        } else if (name.equals(VERSION)) {
          version = value;
        } else if (!isProhibitedHeader(protocol, name)) { // Don't write forbidden headers!
          headersBuilder.add(name.utf8(), value);
        }
        start = end + 1;
      }
    }
    if (status == null) throw new ProtocolException("Expected ':status' header not present");

    StatusLine statusLine = StatusLine.parse(version + " " + status);
    return new Response.Builder()
        .protocol(protocol)
        .code(statusLine.code)
        .message(statusLine.message)
        .headers(headersBuilder.build());
// END readNameValueBlock(List<Header>-List<Header>-Protocol-Protocol)//  }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e1ac2-1cabb
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: []
Right editions: [143, 144, 145, 146, 147]
Merged body: 
// START send404(SpdyStream-SpdyStream-String-String)//private void send404(SpdyStream stream, String path) throws IOException {
// RIGHT //    List<Header> responseHeaders = Arrays.asList(
// RIGHT //        new Header(":status", "404"),
// RIGHT //        new Header(":version", "HTTP/1.1"),
// RIGHT //        new Header("content-type", "text/plain")
// RIGHT //    );
    stream.reply(responseHeaders, true);
    BufferedSink out = Okio.buffer(stream.getSink());
    out.writeUtf8("Not found: " + path);
    out.close();
// END send404(SpdyStream-SpdyStream-String-String)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: [118]
Right editions: []
Merged body: 
// START receive(SpdyStream-SpdyStream)//@Override public void receive(final SpdyStream stream) throws IOException {
    List<Header> requestHeaders = stream.getRequestHeaders();
    String path = null;
// LEFT //    for (int i = 0, size = requestHeaders.size(); i < size; i++) {
      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {
        path = requestHeaders.get(i).value.utf8();
        break;
      }
    }

    if (path == null) {
      // TODO: send bad request error
      throw new AssertionError();
    }

    File file = new File(baseDirectory + path);

    if (file.isDirectory()) {
      serveDirectory(stream, file.list());
    } else if (file.exists()) {
      serveFile(stream, file);
    } else {
      send404(stream, path);
    }
// END receive(SpdyStream-SpdyStream)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: []
Right editions: [156, 157, 158, 159, 160]
Merged body: 
// START serveDirectory(SpdyStream-SpdyStream-String[]-String[])//private void serveDirectory(SpdyStream stream, String[] files) throws IOException {
// RIGHT //    List<Header> responseHeaders = Arrays.asList(
// RIGHT //        new Header(":status", "200"),
// RIGHT //        new Header(":version", "HTTP/1.1"),
// RIGHT //        new Header("content-type", "text/html; charset=UTF-8")
// RIGHT //    );
    stream.reply(responseHeaders, true);
    BufferedSink out = Okio.buffer(stream.getSink());
    for (String file : files) {
      out.writeUtf8("<a href='" + file + "'>" + file + "</a><br>");
    }
    out.close();
// END serveDirectory(SpdyStream-SpdyStream-String[]-String[])//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: [118]
Right editions: []
Merged body: 
// START receive(SpdyStream-SpdyStream)//@Override public void receive(final SpdyStream stream) throws IOException {
    List<Header> requestHeaders = stream.getRequestHeaders();
    String path = null;
// LEFT //    for (int i = 0, size = requestHeaders.size(); i < size; i++) {
      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {
        path = requestHeaders.get(i).value.utf8();
        break;
      }
    }

    if (path == null) {
      // TODO: send bad request error
      throw new AssertionError();
    }

    File file = new File(baseDirectory + path);

    if (file.isDirectory()) {
      serveDirectory(stream, file.list());
    } else if (file.exists()) {
      serveFile(stream, file);
    } else {
      send404(stream, path);
    }
// END receive(SpdyStream-SpdyStream)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: []
Right editions: [171, 172, 173, 174, 175, 176]
Merged body: 
// START serveFile(SpdyStream-SpdyStream-File-File)//private void serveFile(SpdyStream stream, File file) throws IOException {
// RIGHT //    List<Header> responseHeaders = Arrays.asList(
// RIGHT //        new Header(":status", "200"),
// RIGHT //        new Header(":version", "HTTP/1.1"),
// RIGHT //        new Header("content-type", contentType(file))
// RIGHT //    );
// RIGHT //    stream.reply(responseHeaders, true);
    Source source = Okio.source(file);
    try {
      BufferedSink out = Okio.buffer(stream.getSink());
      out.writeAll(source);
      out.close();
    } finally {
      Util.closeQuietly(source);
    }
// END serveFile(SpdyStream-SpdyStream-File-File)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_e1ac2_1cabb\rev_rev_left_e1ac2-rev_right_1cabb\mockwebserver\src\main\java\com\squareup\okhttp\internal\spdy\SpdyServer.java
Different Spacing: false
Left editions: [118]
Right editions: []
Merged body: 
// START receive(SpdyStream-SpdyStream)//@Override public void receive(final SpdyStream stream) throws IOException {
    List<Header> requestHeaders = stream.getRequestHeaders();
    String path = null;
// LEFT //    for (int i = 0, size = requestHeaders.size(); i < size; i++) {
      if (requestHeaders.get(i).name.equals(Header.TARGET_PATH)) {
        path = requestHeaders.get(i).value.utf8();
        break;
      }
    }

    if (path == null) {
      // TODO: send bad request error
      throw new AssertionError();
    }

    File file = new File(baseDirectory + path);

    if (file.isDirectory()) {
      serveDirectory(stream, file.list());
    } else if (file.exists()) {
      serveFile(stream, file);
    } else {
      send404(stream, path);
    }
// END receive(SpdyStream-SpdyStream)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e536b-0e199
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3f8aa-67ac2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9f595-a8327
#CP_===_CP#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_9f595_a8327\rev_rev_left_9f595-rev_right_a8327\okhttp-tests\src\test\java\com\squareup\okhttp\ConnectionPoolTest.java
Different Spacing: false
Left editions: [433, 439, 452, 465, 474, 482, 488, 496, 504, 510, 523]
Right editions: [441, 443, 444, 445, 446, 447, 448, 449, 454, 456, 457, 458, 459, 460, 461, 462, 467, 476, 484, 498, 512, 514, 515, 516, 517, 518, 519, 520]
Merged body: 
// START maxConnections({FormalParametersInternal})//@Test public void maxConnections() throws IOException, InterruptedException {
    // Pool should be empty.
    assertEquals(0, pool.getConnectionCount());

    // http A should be added to the pool.
    pool.recycle(httpA);
    assertEquals(1, pool.getConnectionCount());
    assertEquals(1, pool.getHttpConnectionCount());
// LEFT //    assertEquals(0, pool.getMultiplexedConnectionCount());

    // http B should be added to the pool.
    pool.recycle(httpB);
    assertEquals(2, pool.getConnectionCount());
    assertEquals(2, pool.getHttpConnectionCount());
// LEFT //    assertEquals(0, pool.getMultiplexedConnectionCount());

// RIGHT //    // http C should be added
    pool.recycle(httpC);
// RIGHT //    assertEquals(3, pool.getConnectionCount());
// RIGHT //    assertEquals(3, pool.getHttpConnectionCount());
// RIGHT //    assertEquals(0, pool.getSpdyConnectionCount());
// RIGHT //
// RIGHT //    pool.performCleanup();
// RIGHT //
// RIGHT //    // http A should be removed by cleanup.
    assertEquals(2, pool.getConnectionCount());
    assertEquals(2, pool.getHttpConnectionCount());
// LEFT //    assertEquals(0, pool.getMultiplexedConnectionCount());

// RIGHT //    // spdy A should be added
    pool.share(spdyA);
// RIGHT //    assertEquals(3, pool.getConnectionCount());
// RIGHT //    assertEquals(2, pool.getHttpConnectionCount());
// RIGHT //    assertEquals(1, pool.getSpdyConnectionCount());
// RIGHT //
// RIGHT //    pool.performCleanup();
// RIGHT //
// RIGHT //    // http B should be removed by cleanup.
    assertEquals(2, pool.getConnectionCount());
    assertEquals(1, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

// RIGHT //    // http C should be returned.
    Connection recycledHttpConnection = pool.get(httpAddress);
    recycledHttpConnection.setOwner(owner);
    assertNotNull(recycledHttpConnection);
    assertTrue(recycledHttpConnection.isAlive());
    assertEquals(1, pool.getConnectionCount());
    assertEquals(0, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

// RIGHT //    // spdy A will be returned but also kept in the pool.
    Connection sharedSpdyConnection = pool.get(spdyAddress);
    assertNotNull(sharedSpdyConnection);
    assertEquals(spdyA, sharedSpdyConnection);
    assertEquals(1, pool.getConnectionCount());
    assertEquals(0, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

// RIGHT //    // http C should be added to the pool
    pool.recycle(httpC);
    assertEquals(2, pool.getConnectionCount());
    assertEquals(1, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

    // An http connection should be removed from the pool.
    recycledHttpConnection = pool.get(httpAddress);
    assertNotNull(recycledHttpConnection);
    assertTrue(recycledHttpConnection.isAlive());
    assertEquals(1, pool.getConnectionCount());
    assertEquals(0, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

// RIGHT //    // spdy A will be returned but also kept in the pool.
    sharedSpdyConnection = pool.get(spdyAddress);
    assertEquals(spdyA, sharedSpdyConnection);
    assertNotNull(sharedSpdyConnection);
    assertEquals(1, pool.getConnectionCount());
    assertEquals(0, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

    // http D should be added to the pool.
    pool.recycle(httpD);
    assertEquals(2, pool.getConnectionCount());
    assertEquals(1, pool.getHttpConnectionCount());
// LEFT //    assertEquals(1, pool.getMultiplexedConnectionCount());

// RIGHT //    // http E should be added to the pool.
    pool.recycle(httpE);
// RIGHT //    assertEquals(3, pool.getConnectionCount());
// RIGHT //    assertEquals(2, pool.getHttpConnectionCount());
// RIGHT //    assertEquals(1, pool.getSpdyConnectionCount());
// RIGHT //
// RIGHT //    pool.performCleanup();
// RIGHT //
// RIGHT //    // spdy A should be removed from the pool by cleanup.
    assertEquals(2, pool.getConnectionCount());
    assertEquals(2, pool.getHttpConnectionCount());
// LEFT //    assertEquals(0, pool.getMultiplexedConnectionCount());
// END maxConnections({FormalParametersInternal})//  }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8cf76-0a4e5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8cf76-4d068
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58baa-95593
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_28460-03bb6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0dcf5-5f869
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a41ac-755bd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_452b3-c6503
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_64f2a-1d6f0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_95bed-e49dd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d4919-a9a1f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_db944-c2026
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f1307-96dec
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5123b-7361b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_607fb-7a279
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e2d5b-6f232
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_00a6b-9a567
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0dadd-43abb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4ae1b-9d4b4
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4ae1b_9d4b4\rev_rev_left_4ae1b-rev_right_9d4b4\mockwebserver\src\main\java\com\squareup\okhttp\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: []
Right editions: [821, 822, 823, 830, 831, 832, 834, 835, 836, 837, 839]
Merged body: 
// START throttledTransfer(MockResponse-MockResponse-Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-long-long)//private void throttledTransfer(MockResponse throttlePolicy, Socket socket, BufferedSource source,
// RIGHT //      BufferedSink sink, long byteCount) throws IOException {
// RIGHT //    if (byteCount == 0) return;
// RIGHT //
    Buffer buffer = new Buffer();
    int bytesPerPeriod = throttlePolicy.getThrottleBytesPerPeriod();
    long delayMs = throttlePolicy.getThrottleUnit().toMillis(throttlePolicy.getThrottlePeriod());

    while (!socket.isClosed()) {
      for (int b = 0; b < bytesPerPeriod; ) {
// RIGHT //        long toRead = Math.min(Math.min(2048, byteCount), bytesPerPeriod - b);
// RIGHT //        long read = source.read(buffer, toRead);
// RIGHT //        if (read == -1) return;

// RIGHT //        sink.write(buffer, read);
// RIGHT //        sink.flush();
// RIGHT //        b += read;
// RIGHT //        byteCount -= read;

// RIGHT //        if (byteCount == 0) return;
      }

      if (delayMs != 0) {
        try {
          Thread.sleep(delayMs);
        } catch (InterruptedException e) {
          throw new AssertionError();
        }
      }
    }
// END throttledTransfer(MockResponse-MockResponse-Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-long-long)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4ae1b_9d4b4\rev_rev_left_4ae1b-rev_right_9d4b4\mockwebserver\src\main\java\com\squareup\okhttp\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [653, 717]
Right editions: []
Merged body: 
// START readRequest(Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-int-int)//private RecordedRequest readRequest(Socket socket, BufferedSource source, BufferedSink sink,
      int sequenceNumber) throws IOException {
    String request;
    try {
      request = source.readUtf8LineStrict();
    } catch (IOException streamIsClosed) {
      return null; // no request because we closed the stream
    }
    if (request.length() == 0) {
      return null; // no request because the stream is exhausted
    }

// LEFT //    Headers.Builder headers = new Headers.Builder();
    long contentLength = -1;
    boolean chunked = false;
    boolean expectContinue = false;
    String header;
    while ((header = source.readUtf8LineStrict()).length() != 0) {
      headers.add(header);
      String lowercaseHeader = header.toLowerCase(Locale.US);
      if (contentLength == -1 && lowercaseHeader.startsWith("content-length:")) {
        contentLength = Long.parseLong(header.substring(15).trim());
      }
      if (lowercaseHeader.startsWith("transfer-encoding:")
          && lowercaseHeader.substring(18).trim().equals("chunked")) {
        chunked = true;
      }
      if (lowercaseHeader.startsWith("expect:")
          && lowercaseHeader.substring(7).trim().equals("100-continue")) {
        expectContinue = true;
      }
    }

    if (expectContinue) {
      sink.writeUtf8("HTTP/1.1 100 Continue\r\n");
      sink.writeUtf8("Content-Length: 0\r\n");
      sink.writeUtf8("\r\n");
      sink.flush();
    }

    boolean hasBody = false;
    TruncatingBuffer requestBody = new TruncatingBuffer(bodyLimit);
    List<Integer> chunkSizes = new ArrayList<>();
    MockResponse throttlePolicy = dispatcher.peek();
    if (contentLength != -1) {
      hasBody = contentLength > 0;
      throttledTransfer(throttlePolicy, socket, source, Okio.buffer(requestBody), contentLength);
    } else if (chunked) {
      hasBody = true;
      while (true) {
        int chunkSize = Integer.parseInt(source.readUtf8LineStrict().trim(), 16);
        if (chunkSize == 0) {
          readEmptyLine(source);
          break;
        }
        chunkSizes.add(chunkSize);
        throttledTransfer(throttlePolicy, socket, source, Okio.buffer(requestBody), chunkSize);
        readEmptyLine(source);
      }
    }

    if (request.startsWith("OPTIONS ")
        || request.startsWith("GET ")
        || request.startsWith("HEAD ")
        || request.startsWith("TRACE ")
        || request.startsWith("CONNECT ")) {
      if (hasBody) {
        throw new IllegalArgumentException("Request must not have a body: " + request);
      }
    } else if (!request.startsWith("POST ")
        && !request.startsWith("PUT ")
        && !request.startsWith("PATCH ")
        && !request.startsWith("DELETE ")) { // Permitted as spec is ambiguous.
      throw new UnsupportedOperationException("Unexpected method: " + request);
    }

// LEFT //    return new RecordedRequest(request, headers.build(), chunkSizes, requestBody.receivedByteCount,
        requestBody.buffer, sequenceNumber, socket);
// END readRequest(Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-int-int)//  }
Edition adds call: 0
#HAS_***REFERENCE_#
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4ae1b_9d4b4\rev_rev_left_4ae1b-rev_right_9d4b4\mockwebserver\src\main\java\com\squareup\okhttp\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [1020, 1022]
Right editions: []
Merged body: 
// START writeResponse(SpdyStream-SpdyStream-MockResponse-MockResponse)//private void writeResponse(SpdyStream stream, MockResponse response) throws IOException {
      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
        return;
      }
      List<Header> spdyHeaders = new ArrayList<>();
      String[] statusParts = response.getStatus().split(" ", 2);
      if (statusParts.length != 2) {
        throw new AssertionError("Unexpected status: " + response.getStatus());
      }
      // TODO: constants for well-known header names.
      spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));
      if (protocol == Protocol.SPDY_3) {
        spdyHeaders.add(new Header(Header.VERSION, statusParts[0]));
      }
// LEFT //      Headers headers = response.getHeaders();
      for (int i = 0, size = headers.size(); i < size; i++) {
// LEFT //        spdyHeaders.add(new Header(headers.name(i), headers.value(i)));
      }

      Buffer body = response.getBody();
      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();
      stream.reply(spdyHeaders, closeStreamAfterHeaders);
      pushPromises(stream, response.getPushPromises());
      if (body != null) {
        BufferedSink sink = Okio.buffer(stream.getSink());
        sleepIfDelayed(response);
        throttledTransfer(response, socket, body, sink, bodyLimit);
        sink.close();
      } else if (closeStreamAfterHeaders) {
        stream.close(ErrorCode.NO_ERROR);
      }
// END writeResponse(SpdyStream-SpdyStream-MockResponse-MockResponse)//    }
Edition adds call: 0
#HAS_***REFERENCE_#
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_4ae1b_9d4b4\rev_rev_left_4ae1b-rev_right_9d4b4\mockwebserver\src\main\java\com\squareup\okhttp\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [786, 788, 789, 790]
Right editions: []
Merged body: 
// START writeHttpResponse(Socket-Socket-BufferedSink-BufferedSink-MockResponse-MockResponse)//private void writeHttpResponse(Socket socket, BufferedSink sink, MockResponse response)
      throws IOException {
    sink.writeUtf8(response.getStatus());
    sink.writeUtf8("\r\n");

// LEFT //    Headers headers = response.getHeaders();
    for (int i = 0, size = headers.size(); i < size; i++) {
// LEFT //      sink.writeUtf8(headers.name(i));
// LEFT //      sink.writeUtf8(": ");
// LEFT //      sink.writeUtf8(headers.value(i));
      sink.writeUtf8("\r\n");
    }
    sink.writeUtf8("\r\n");
    sink.flush();

    Buffer body = response.getBody();
    if (body == null) return;
    sleepIfDelayed(response);
    throttledTransfer(response, socket, body, sink, Long.MAX_VALUE);
// END writeHttpResponse(Socket-Socket-BufferedSink-BufferedSink-MockResponse-MockResponse)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58dff-da95a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a5e13-53557
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6f1af-c46b6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_933da-6ca86
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_510af-ea565
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_69109-f7de6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_72826-62efd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b9b06-6a5a6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6a959-f695e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bd83d-52454
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ef4e9-c9b02
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2f502-9877d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_67168-285ac
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2c3cd-e97bb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_14732-e3d39
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c7803-0b69d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_84d87-515ae
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_74001-ab2db
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e2f3a-3a65d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_621d2-40486
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3ee53-c99ac
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_64193-24767
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f84b4-4db67
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_f84b4_4db67\rev_rev_left_f84b4-rev_right_4db67\okhttp\src\main\java\com\squareup\okhttp\internal\http\CacheStrategy.java
Different Spacing: false
Left editions: [98, 99, 102, 103]
Right editions: []
Merged body: 
// START isCacheable(Response-Response-Request-Request)//public static boolean isCacheable(Response response, Request request) {
    // Always go to network for uncacheable response codes (RFC 7231 section 6.1),
    // This implementation doesn't support caching partial content.
    switch (response.code()) {
      case HTTP_OK:
      case HTTP_NOT_AUTHORITATIVE:
      case HTTP_NO_CONTENT:
      case HTTP_MULT_CHOICE:
      case HTTP_MOVED_PERM:
      case HTTP_NOT_FOUND:
      case HTTP_BAD_METHOD:
      case HTTP_GONE:
      case HTTP_REQ_TOO_LONG:
      case HTTP_NOT_IMPLEMENTED:
      case HTTP_PERM_REDIRECT:
      // These codes can be cached unless headers forbid it.
      break;

      case HTTP_MOVED_TEMP:
      case HTTP_TEMP_REDIRECT:
        // These codes can only be cached with the right response headers.
// LEFT //        // http://tools.ietf.org/html/rfc7234#section-3
// LEFT //        // s-maxage is not checked because OkHttp is a private cache that should ignore s-maxage.
        if (response.header("Expires") != null
            || response.cacheControl().maxAgeSeconds() != -1
// LEFT //            || response.cacheControl().isPublic()
// LEFT //            || response.cacheControl().isPrivate()) {
          break;
        }
        // Fall-through.

      default:
        // All other codes cannot be cached.
        return false;
    }

    // A 'no-store' directive on request or response prevents the response from being cached.
    return !response.cacheControl().noStore() && !request.cacheControl().noStore();
// END isCacheable(Response-Response-Request-Request)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_f84b4_4db67\rev_rev_left_f84b4-rev_right_4db67\okhttp\src\main\java\com\squareup\okhttp\internal\http\CacheStrategy.java
Different Spacing: false
Left editions: []
Right editions: [288, 289, 290]
Merged body: 
// START getCandidate({FormalParametersInternal})//private CacheStrategy getCandidate() {
      // No cached response.
      if (cacheResponse == null) {
        return new CacheStrategy(request, null);
      }

      // Drop the cached response if it's missing a required handshake.
      if (request.isHttps() && cacheResponse.handshake() == null) {
        return new CacheStrategy(request, null);
      }

      // If this response shouldn't have been stored, it should never be used
      // as a response source. This check should be redundant as long as the
      // persistence store is well-behaved and the rules are constant.
      if (!isCacheable(cacheResponse, request)) {
        return new CacheStrategy(request, null);
      }

      CacheControl requestCaching = request.cacheControl();
      if (requestCaching.noCache() || hasConditions(request)) {
        return new CacheStrategy(request, null);
      }

      long ageMillis = cacheResponseAge();
      long freshMillis = computeFreshnessLifetime();

      if (requestCaching.maxAgeSeconds() != -1) {
        freshMillis = Math.min(freshMillis, SECONDS.toMillis(requestCaching.maxAgeSeconds()));
      }

      long minFreshMillis = 0;
      if (requestCaching.minFreshSeconds() != -1) {
        minFreshMillis = SECONDS.toMillis(requestCaching.minFreshSeconds());
      }

      long maxStaleMillis = 0;
      CacheControl responseCaching = cacheResponse.cacheControl();
      if (!responseCaching.mustRevalidate() && requestCaching.maxStaleSeconds() != -1) {
        maxStaleMillis = SECONDS.toMillis(requestCaching.maxStaleSeconds());
      }

      if (!responseCaching.noCache() && ageMillis + minFreshMillis < freshMillis + maxStaleMillis) {
        Response.Builder builder = cacheResponse.newBuilder();
        if (ageMillis + minFreshMillis >= freshMillis) {
          builder.addHeader("Warning", "110 HttpURLConnection \"Response is stale\"");
        }
        long oneDayMillis = 24 * 60 * 60 * 1000L;
        if (ageMillis > oneDayMillis && isFreshnessLifetimeHeuristic()) {
          builder.addHeader("Warning", "113 HttpURLConnection \"Heuristic expiration\"");
        }
        return new CacheStrategy(null, builder.build());
      }

      Request.Builder conditionalRequestBuilder = request.newBuilder();

// RIGHT //      if (etag != null) {
// RIGHT //        conditionalRequestBuilder.header("If-None-Match", etag);
// RIGHT //      } else if (lastModified != null) {
        conditionalRequestBuilder.header("If-Modified-Since", lastModifiedString);
      } else if (servedDate != null) {
        conditionalRequestBuilder.header("If-Modified-Since", servedDateString);
      }

      Request conditionalRequest = conditionalRequestBuilder.build();
      return hasConditions(conditionalRequest)
          ? new CacheStrategy(conditionalRequest, cacheResponse)
          : new CacheStrategy(conditionalRequest, null);
// END getCandidate({FormalParametersInternal})//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65961-c8f59
#CP_===_CP#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_65961_c8f59\rev_rev_left_65961-rev_right_c8f59\okhttp-tests\src\test\java\com\squareup\okhttp\CallTest.java
Different Spacing: false
Left editions: [848, 849]
Right editions: [857, 858]
Merged body: 
// START cleartextCallsFailWhenCleartextIsDisabled({FormalParametersInternal})//@Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {
    // Configure the client with only TLS configurations. No cleartext!
// LEFT //    client.setConnectionSpecs(
// LEFT //        Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));

    server.enqueue(new MockResponse());

    Request request = new Request.Builder().url(server.getUrl("/")).build();
    try {
      client.newCall(request).execute();
      fail();
// RIGHT //    } catch (UnknownServiceException expected) {
// RIGHT //      assertTrue(expected.getMessage().contains("no connection specs"));
    }
// END cleartextCallsFailWhenCleartextIsDisabled({FormalParametersInternal})//  }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4b037-ef47c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e9611-35bf0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cba15-7e5da
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2dc18-353ec
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f152f-fd162
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_200ae-a8a98
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8d0b2-0a673
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f6baa-c2572
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c724f-2a6b4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dbbb6-f78f7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ab3f9-8a1e6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_29379-0b2ef
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c6ecf-dab88
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_548bd-e90fe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fcaa7-f5dc9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7c134-96ba2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_57b26-1ab08
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d1c00-7576c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_05da8-9343b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7623d-2e07d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_71c4c-a7519
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_fab8a-bb473
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8888d-9338f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b40f9-60f54
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ea8ef-1abba
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_80901-2a4c1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_215e0-a075e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ca16a-3bcfa
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cf8dd-4e080
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_57ca6-71ead
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78e45-28434
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_951c6-b4e78
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_951c6_b4e78\rev_rev_left_951c6-rev_right_b4e78\okhttp\src\main\java\com\squareup\okhttp\HttpUrl.java
Different Spacing: false
Left editions: [1224]
Right editions: []
Merged body: 
// START decodeHexDigit(char-char)//// LEFT //static int decodeHexDigit(char c) {
    if (c >= '0' && c <= '9') return c - '0';
    if (c >= 'a' && c <= 'f') return c - 'a' + 10;
    if (c >= 'A' && c <= 'F') return c - 'A' + 10;
    return -1;
// END decodeHexDigit(char-char)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_951c6_b4e78\rev_rev_left_951c6-rev_right_b4e78\okhttp\src\main\java\com\squareup\okhttp\HttpUrl.java
Different Spacing: false
Left editions: []
Right editions: [957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022]
Merged body: 
// START decodeIpv6(String-String-int-int-int-int)//private static InetAddress decodeIpv6(String input, int pos, int limit) {
// RIGHT //      byte[] address = new byte[16];
// RIGHT //      int b = 0;
// RIGHT //      int compress = -1;
// RIGHT //      int groupOffset = -1;
// RIGHT //
// RIGHT //      for (int i = pos; i < limit; ) {
// RIGHT //        if (b == address.length) return null; // Too many groups.
// RIGHT //
// RIGHT //        // Read a delimiter.
// RIGHT //        if (i + 2 <= limit && input.regionMatches(i, "::", 0, 2)) {
// RIGHT //          // Compression "::" delimiter, which is anywhere in the input, including its prefix.
// RIGHT //          if (compress != -1) return null; // Multiple "::" delimiters.
// RIGHT //          i += 2;
// RIGHT //          b += 2;
// RIGHT //          compress = b;
// RIGHT //          if (i == limit) break;
// RIGHT //        } else if (b != 0) {
// RIGHT //          // Group separator ":" delimiter.
// RIGHT //          if (input.regionMatches(i, ":", 0, 1)) {
// RIGHT //            i++;
// RIGHT //          } else if (input.regionMatches(i, ".", 0, 1)) {
// RIGHT //            // If we see a '.', rewind to the beginning of the previous group and parse as IPv4.
// RIGHT //            if (!decodeIpv4Suffix(input, groupOffset, limit, address, b - 2)) return null;
// RIGHT //            b += 2; // We rewound two bytes and then added four.
// RIGHT //            break;
// RIGHT //          } else {
// RIGHT //            return null; // Wrong delimiter.
// RIGHT //          }
// RIGHT //        }
// RIGHT //
// RIGHT //        // Read a group, one to four hex digits.
// RIGHT //        int value = 0;
// RIGHT //        groupOffset = i;
// RIGHT //        for (; i < limit; i++) {
// RIGHT //          char c = input.charAt(i);
// RIGHT //          int hexDigit = decodeHexDigit(c);
// RIGHT //          if (hexDigit == -1) break;
// RIGHT //          value = (value << 4) + hexDigit;
// RIGHT //        }
// RIGHT //        int groupLength = i - groupOffset;
// RIGHT //        if (groupLength == 0 || groupLength > 4) return null; // Group is the wrong size.
// RIGHT //
// RIGHT //        // We've successfully read a group. Assign its value to our byte array.
// RIGHT //        address[b++] = (byte) ((value >>> 8) & 0xff);
// RIGHT //        address[b++] = (byte) (value & 0xff);
// RIGHT //      }
// RIGHT //
// RIGHT //      // All done. If compression happened, we need to move bytes to the right place in the
// RIGHT //      // address. Here's a sample:
// RIGHT //      //
// RIGHT //      //      input: "1111:2222:3333::7777:8888"
// RIGHT //      //     before: { 11, 11, 22, 22, 33, 33, 00, 00, 77, 77, 88, 88, 00, 00, 00, 00  }
// RIGHT //      //   compress: 6
// RIGHT //      //          b: 10
// RIGHT //      //      after: { 11, 11, 22, 22, 33, 33, 00, 00, 00, 00, 00, 00, 77, 77, 88, 88 }
// RIGHT //      //
// RIGHT //      if (b != address.length) {
// RIGHT //        if (compress == -1) return null; // Address didn't have compression or enough groups.
// RIGHT //        System.arraycopy(address, compress, address, address.length - (b - compress), b - compress);
// RIGHT //        Arrays.fill(address, compress, compress + (address.length - b), (byte) 0);
// RIGHT //      }
// RIGHT //
      try {
// RIGHT //        return InetAddress.getByAddress(address);
      } catch (UnknownHostException e) {
// RIGHT //        throw new AssertionError();
      }
// END decodeIpv6(String-String-int-int-int-int)//    }
Edition adds call: 1
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_db7d6-2b236
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0d8ce-80507
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f1d13-0b9be
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bc2aa-0ac24
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_037de-3bee7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cd3a9-282b4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77fb8-b2812
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_64505-eeec4
#CP_===_CP#
Type: EditSameMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_64505_eeec4\rev_rev_left_64505-rev_right_eeec4\mockwebserver\src\main\java\com\squareup\okhttp\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [766, 769, 779]
Right editions: [784, 785]
Merged body: 
// START readRequest(Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-int-int)//private RecordedRequest readRequest(Socket socket, BufferedSource source, BufferedSink sink,
      int sequenceNumber) throws IOException {
    String request;
    try {
      request = source.readUtf8LineStrict();
    } catch (IOException streamIsClosed) {
      return null; // no request because we closed the stream
    }
    if (request.length() == 0) {
      return null; // no request because the stream is exhausted
    }

    Headers.Builder headers = new Headers.Builder();
    long contentLength = -1;
    boolean chunked = false;
    boolean expectContinue = false;
    String header;
    while ((header = source.readUtf8LineStrict()).length() != 0) {
      headers.add(header);
      String lowercaseHeader = header.toLowerCase(Locale.US);
      if (contentLength == -1 && lowercaseHeader.startsWith("content-length:")) {
        contentLength = Long.parseLong(header.substring(15).trim());
      }
      if (lowercaseHeader.startsWith("transfer-encoding:")
          && lowercaseHeader.substring(18).trim().equals("chunked")) {
        chunked = true;
      }
      if (lowercaseHeader.startsWith("expect:")
          && lowercaseHeader.substring(7).trim().equals("100-continue")) {
        expectContinue = true;
      }
    }

    if (expectContinue) {
      sink.writeUtf8("HTTP/1.1 100 Continue\r\n");
      sink.writeUtf8("Content-Length: 0\r\n");
      sink.writeUtf8("\r\n");
      sink.flush();
    }

    boolean hasBody = false;
    TruncatingBuffer requestBody = new TruncatingBuffer(bodyLimit);
    List<Integer> chunkSizes = new ArrayList<>();
// LEFT //    MockResponse policy = dispatcher.peek();
    if (contentLength != -1) {
      hasBody = contentLength > 0;
// LEFT //      throttledTransfer(policy, socket, source, Okio.buffer(requestBody), contentLength, true);
    } else if (chunked) {
      hasBody = true;
      while (true) {
        int chunkSize = Integer.parseInt(source.readUtf8LineStrict().trim(), 16);
        if (chunkSize == 0) {
          readEmptyLine(source);
          break;
        }
        chunkSizes.add(chunkSize);
// LEFT //        throttledTransfer(policy, socket, source, Okio.buffer(requestBody), chunkSize, true);
        readEmptyLine(source);
      }
    }

// RIGHT //    String method = request.substring(0, request.indexOf(' '));
// RIGHT //    if (hasBody && !HttpMethod.permitsRequestBody(method)) {
        throw new IllegalArgumentException("Request must not have a body: " + request);
      }

    return new RecordedRequest(request, headers.build(), chunkSizes, requestBody.receivedByteCount,
        requestBody.buffer, sequenceNumber, socket);
// END readRequest(Socket-Socket-BufferedSource-BufferedSource-BufferedSink-BufferedSink-int-int)//  }

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58fc2-6e6c3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_eb4a0-b42e7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_79b0a-5bdcd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_035e3-78d3d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7b774-067aa
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5b60d-765a9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5dbce-92e64
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_264f3-ddc35
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_40aa8-84f35
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_19455-8e996
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31362-5a37e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1e16a-e4904
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3e618-f04c8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8089e-5b234
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dedcb-eea23
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a3946-af6eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bd275-75e69
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9b3b8-5c4f2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_403e1-d5178
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c429a-2a13f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c894f-347b3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d3437-a84e9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_26efb-e4dd6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3f3c7-f4feb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_87592-49a33
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6d2dc-38df7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8d71c-457fb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_52795-d7a09
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a4c44-cc216
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_90f84-0fae6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ed431-e31cf
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b6d27-c071f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cc1ad-390d0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_78d24-45260
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_53d50-dc050
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4350e-df41f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ffa06-1bf10
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a1260-68e3f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d6c21-432ca
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ffac7-16577
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4b25c-5bec1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_82820-b0f2d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5f22a-71ae4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_efc9d-c642b
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_efc9d_c642b\rev_rev_left_efc9d-rev_right_c642b\okhttp\src\main\java\com\squareup\okhttp\Cache.java
Different Spacing: false
Left editions: []
Right editions: [234]
Merged body: 
// START urlToKey(Request-Request)//private static String urlToKey(Request request) {
// RIGHT //    return Util.md5Hex(request.url().toString());
// END urlToKey(Request-Request)//  }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_efc9d_c642b\rev_rev_left_efc9d-rev_right_c642b\okhttp\src\main\java\com\squareup\okhttp\Cache.java
Different Spacing: false
Left editions: [259]
Right editions: []
Merged body: 
// START get(Request-Request)//Response get(Request request) {
    String key = urlToKey(request);
    DiskLruCache.Snapshot snapshot;
    Entry entry;
    try {
      snapshot = cache.get(key);
      if (snapshot == null) {
        return null;
      }
    } catch (IOException e) {
      // Give up because the cache cannot be read.
      return null;
    }

    try {
      entry = new Entry(snapshot.getSource(ENTRY_METADATA));
    } catch (IOException e) {
      Util.closeQuietly(snapshot);
      return null;
    }

// LEFT //    Response response = entry.response(snapshot);

    if (!entry.matches(request, response)) {
      Util.closeQuietly(response.body());
      return null;
    }

    return response;
// END get(Request-Request)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_efc9d_c642b\rev_rev_left_efc9d-rev_right_c642b\okhttp\src\main\java\com\squareup\okhttp\Cache.java
Different Spacing: false
Left editions: []
Right editions: [806]
Merged body: 
// START matches(Request-Request-Response-Response)//public boolean matches(Request request, Response response) {
// RIGHT //      return url.equals(request.url().toString())
          && requestMethod.equals(request.method())
          && OkHeaders.varyMatches(response, varyHeaders, request);
// END matches(Request-Request-Response-Response)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_efc9d_c642b\rev_rev_left_efc9d-rev_right_c642b\okhttp\src\main\java\com\squareup\okhttp\Cache.java
Different Spacing: false
Left editions: [259]
Right editions: []
Merged body: 
// START get(Request-Request)//Response get(Request request) {
    String key = urlToKey(request);
    DiskLruCache.Snapshot snapshot;
    Entry entry;
    try {
      snapshot = cache.get(key);
      if (snapshot == null) {
        return null;
      }
    } catch (IOException e) {
      // Give up because the cache cannot be read.
      return null;
    }

    try {
      entry = new Entry(snapshot.getSource(ENTRY_METADATA));
    } catch (IOException e) {
      Util.closeQuietly(snapshot);
      return null;
    }

// LEFT //    Response response = entry.response(snapshot);

    if (!entry.matches(request, response)) {
      Util.closeQuietly(response.body());
      return null;
    }

    return response;
// END get(Request-Request)//  }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_513fe-6711a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f5d0a-dcb3c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_548e3-ce3e7
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_92acf-d1f94
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_16254-0bfd6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_89f5a-9061a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3dd98-63e66
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f4b70-d77ed
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_47964-e7023
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31a6b-e9914
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d0675-f54ab
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5e52b-d9abe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0529c-e6dd5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b5970-112a5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_eac80-f2461
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4c214-f81b6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5adcb-7826b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c73df-d3675
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c9080-d662c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_20653-8ee07
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e072e-7f4ce
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7e691-0ea60
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_90954-2b291
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_37744-37595
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b113b-b8c59
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ef138-77347
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8def5-87e90
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_055af-c4dc8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e1342-75ebc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9708d-fc238
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f546b-35b19
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9ddcf-2b1f9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a2c1b-18b26
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_65423-cc70a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ec8c0-457f4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_417e0-44a95
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e2139-512f2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3b78b-881bf
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0accc-a1b66
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_806c0-8e6ae
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_704ce-aae1a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bb0d8-a2466
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_2c9fb-89969
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_14cb6-5cf91
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ba541-c63be
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_bd76e-d8552
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_081c7-ad103
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_312eb-ba51f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4505c-94bda
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3dc5a-ae5c3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_70670-bab89
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ed943-c9290
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dd4dd-8271d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8ddc5-3ec52
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c8c07-a18d4
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_63ae8-929bd
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77c0a-05e5c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e444d-943b5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_19c08-084b0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6133a-df73a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b1aae-ebd78
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8fa79-fcedc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_af796-d8213
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_66872-28439
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a73da-c6a57
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_3e161-5b8c0
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f5099-a5dc3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b3371-50ff1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35e29-a4d30
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8d51e-537df
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f98ff-1f58b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f4913-8688f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a8bed-1267c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_09f40-9710e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_56eb3-13cbf
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a3bca-576fe
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_58c3e-bd99d
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d600f-0c048
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_93c4c-d2539
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_60b57-fd509
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_ced24-591d5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5d393-27cc6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6dd8d-3f651
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35283-913f1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c25fb-45f93
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_41332-ba1ed
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_df0ff-404f6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d4de9-ef8a1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b2b4f-039bc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_61112-e6e72
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5f6a7-12d44
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e7188-508eb
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_63918-814d2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_643ee-ce695
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_37dab-5d70f
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_dedea-d3205
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c212d-d3543
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_c581f-5bb4c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_35656-a27af
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_8223e-49527
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_07309-94943
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_85b2a-578d8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_850d4-c8dbc
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d98cd-68c02
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b88bf-ef6e6
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_27808-731a2
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_d073f-48ee9
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cddb4-e3d59
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_525f9-116f5
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_da597-d6589
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_77405-3a1f3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_cd872-caec3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_1800c-a589b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_90021-219f2
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_90021_219f2\rev_rev_left_90021-rev_right_219f2\mockwebserver\src\main\java\okhttp3\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [1101, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1128, 1129, 1130]
Right editions: []
Merged body: 
// START readRequest(Http2Stream-Http2Stream)//private RecordedRequest readRequest(Http2Stream stream) throws IOException {
      List<Header> streamHeaders = stream.getRequestHeaders();
      Headers.Builder httpHeaders = new Headers.Builder();
      String method = "<:method omitted>";
      String path = "<:path omitted>";
// LEFT //      boolean readBody = true;
      for (int i = 0, size = streamHeaders.size(); i < size; i++) {
        ByteString name = streamHeaders.get(i).name;
        String value = streamHeaders.get(i).value.utf8();
        if (name.equals(Header.TARGET_METHOD)) {
          method = value;
        } else if (name.equals(Header.TARGET_PATH)) {
          path = value;
        } else if (protocol == Protocol.HTTP_2) {
          httpHeaders.add(name.utf8(), value);
        } else {
          throw new IllegalStateException();
        }
// LEFT //        if (name.utf8().equals("expect") && value.equalsIgnoreCase("100-continue")) {
// LEFT //          // Don't read the body unless we've invited the client to send it.
// LEFT //          readBody = false;
// LEFT //        }
// LEFT //      }
// LEFT //
// LEFT //      if (!readBody && dispatcher.peek().getSocketPolicy() == EXPECT_CONTINUE) {
// LEFT //        stream.sendResponseHeaders(Collections.singletonList(
// LEFT //            new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);
// LEFT //        stream.getConnection().flush();
// LEFT //        readBody = true;
      }

      Buffer body = new Buffer();
// LEFT //      if (readBody) {
// LEFT //        body.writeAll(stream.getSource());
// LEFT //      }

      String requestLine = method + ' ' + path + " HTTP/1.1";
      List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for HTTP/2.
      return new RecordedRequest(requestLine, httpHeaders.build(), chunkSizes, body.size(), body,
          sequenceNumber.getAndIncrement(), socket);
// END readRequest(Http2Stream-Http2Stream)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_90021_219f2\rev_rev_left_90021-rev_right_219f2\mockwebserver\src\main\java\okhttp3\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: []
Right editions: [1072, 1079, 1080, 1081, 1082]
Merged body: 
// START onStream(Http2Stream-Http2Stream)//@Override public void onStream(Http2Stream stream) throws IOException {
      MockResponse peekedResponse = dispatcher.peek();
      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {
        try {
          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);
          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));
          return;
        } catch (InterruptedException e) {
          throw new InterruptedIOException();
        }
      }

      RecordedRequest request = readRequest(stream);
      requestCount.incrementAndGet();
      requestQueue.add(request);
// RIGHT //
      MockResponse response;
      try {
        response = dispatcher.dispatch(request);
      } catch (InterruptedException e) {
        throw new AssertionError(e);
      }
// RIGHT //      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {
// RIGHT //        socket.close();
// RIGHT //        return;
// RIGHT //      }
      writeResponse(stream, response);
      if (logger.isLoggable(Level.INFO)) {
        logger.info(MockWebServer.this + " received request: " + request
            + " and responded: " + response + " protocol is " + protocol.toString());
      }

      if (response.getSocketPolicy() == DISCONNECT_AT_END) {
        Http2Connection connection = stream.getConnection();
        connection.shutdown(ErrorCode.NO_ERROR);
      }
// END onStream(Http2Stream-Http2Stream)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#CP_===_CP#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_90021_219f2\rev_rev_left_90021-rev_right_219f2\mockwebserver\src\main\java\okhttp3\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: [1162]
Right editions: []
Merged body: 
// START writeResponse(Http2Stream-Http2Stream-MockResponse-MockResponse)//private void writeResponse(Http2Stream stream, MockResponse response) throws IOException {
      Settings settings = response.getSettings();
      if (settings != null) {
        stream.getConnection().setSettings(settings);
      }

      if (response.getSocketPolicy() == NO_RESPONSE) {
        return;
      }
      List<Header> http2Headers = new ArrayList<>();
      String[] statusParts = response.getStatus().split(" ", 2);
      if (statusParts.length != 2) {
        throw new AssertionError("Unexpected status: " + response.getStatus());
      }
      // TODO: constants for well-known header names.
      http2Headers.add(new Header(Header.RESPONSE_STATUS, statusParts[1]));
      Headers headers = response.getHeaders();
      for (int i = 0, size = headers.size(); i < size; i++) {
        http2Headers.add(new Header(headers.name(i), headers.value(i)));
      }

      Buffer body = response.getBody();
      boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty();
// LEFT //      stream.sendResponseHeaders(http2Headers, closeStreamAfterHeaders);
      pushPromises(stream, response.getPushPromises());
      if (body != null) {
        BufferedSink sink = Okio.buffer(stream.getSink());
        sleepIfDelayed(response);
        throttledTransfer(response, socket, body, sink, bodyLimit, false);
        sink.close();
      } else if (closeStreamAfterHeaders) {
        stream.close(ErrorCode.NO_ERROR);
      }
// END writeResponse(Http2Stream-Http2Stream-MockResponse-MockResponse)//    }
Has references on the following methods: 
#HAS_***REFERENCE_#
Type: EditDiffMC
File: C:\Users\155 X-MX\Documents\dev\second_study\downloads\ssmerge\okhttp\revisions\rev_90021_219f2\rev_rev_left_90021-rev_right_219f2\mockwebserver\src\main\java\okhttp3\mockwebserver\MockWebServer.java
Different Spacing: false
Left editions: []
Right editions: [1072, 1079, 1080, 1081, 1082]
Merged body: 
// START onStream(Http2Stream-Http2Stream)//@Override public void onStream(Http2Stream stream) throws IOException {
      MockResponse peekedResponse = dispatcher.peek();
      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {
        try {
          dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);
          stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));
          return;
        } catch (InterruptedException e) {
          throw new InterruptedIOException();
        }
      }

      RecordedRequest request = readRequest(stream);
      requestCount.incrementAndGet();
      requestQueue.add(request);
// RIGHT //
      MockResponse response;
      try {
        response = dispatcher.dispatch(request);
      } catch (InterruptedException e) {
        throw new AssertionError(e);
      }
// RIGHT //      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {
// RIGHT //        socket.close();
// RIGHT //        return;
// RIGHT //      }
      writeResponse(stream, response);
      if (logger.isLoggable(Level.INFO)) {
        logger.info(MockWebServer.this + " received request: " + request
            + " and responded: " + response + " protocol is " + protocol.toString());
      }

      if (response.getSocketPolicy() == DISCONNECT_AT_END) {
        Http2Connection connection = stream.getConnection();
        connection.shutdown(ErrorCode.NO_ERROR);
      }
// END onStream(Http2Stream-Http2Stream)//    }
Edition adds call: 0
#HAS_***REFERENCE_#

#CP_===_CP#
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b336a-98443
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_04496-cbe7b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_87a3e-bb0f8
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_592d5-c7483
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0ed48-14b6c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_614f7-6a9db
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_15869-a96c3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_96901-6651a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e95a9-7c94c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b0a5a-c18b3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31bc8-81c74
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_417ec-c9496
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_214a7-ac00c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_82b57-379ed
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_31f04-60b1c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_5e460-9ca7b
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a5bcf-0bede
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_f4e48-cc12c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_b8c44-9beaa
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_e791f-29d56
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_304d2-8a9a3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_4ca52-f87d3
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_73fe9-66b40
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_0891a-3819e
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_6ab3e-db73c
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_19a7b-5f1a1
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_7cc8f-a9942
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_9bfe5-5fb5a
#MS_XXX_MS#
#MS_XXX_MS#
Merge scenario: rev_a792f-d73bc
#MS_XXX_MS#

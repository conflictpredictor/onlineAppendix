=========================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_49f88_a09c2\rev_49f88-a09c2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c3f48_a944a\rev_c3f48-a944a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a9d08_dd0fd\rev_a9d08-dd0fd.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f0a10_07e3a\rev_f0a10-07e3a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0d567_09c2b\rev_0d567-09c2b.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 1
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public void writeTo(Documentation documentation, Class<?> type, Type genericType, Annotation[] annotations,
                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)
            throws IOException, WebApplicationException {
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513122700820\fstmerge_var1_8727731469341958098
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(entityStream));
        bw.write(getStringRepresentation(documentation));
        bw.flush();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513122700820\fstmerge_base_5929194487491730121
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(entityStream));
        bw.write(getStringRepresentation(documentation).getBytes());
        bw.flush();
=======
        entityStream.write(getStringRepresentation(documentation).getBytes());
        entityStream.flush();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513122700820\fstmerge_var2_6628645048762424923
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_0d567_09c2b\rev_rev_left_0d567-rev_right_09c2b\modules\swagger-jaxrs\src\main\scala\com\wordnik\swagger\jaxrs\ApiHelpMessageBodyWriter.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_685a0_ebbd5\rev_685a0-ebbd5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_516b4_2ea3d\rev_516b4-2ea3d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d492e_04aa2\rev_d492e-04aa2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e8efe_6005a\rev_e8efe-6005a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4f3d1_0f668\rev_4f3d1-0f668.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8adc8_500ef\rev_8adc8-500ef.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5d858_3df1e\rev_5d858-3df1e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d298d_5ca8a\rev_d298d-5ca8a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_16e3c_882e1\rev_16e3c-882e1.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_560eb_58d91\rev_560eb-58d91.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b1911_52147\rev_b1911-52147.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_974c9_a8280\rev_974c9-a8280.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_08999_47703\rev_08999-47703.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f018a_798d3\rev_f018a-798d3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_52d21_0cd5a\rev_52d21-0cd5a.revisions
Conflict type: SameSignatureCM
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: smallMethod
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513123493194\fstmerge_var1_6149376176966271307
public static Long getUsername() {
    return (Long)userThreadLocal.get();
  }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513123493194\fstmerge_base_13832361696540578
=======
public static String getUsername() {
    return (String)userThreadLocal.get();
  }
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513123493194\fstmerge_var2_4988286873017503336

File path: C:\download\ssmerge\swagger-core\revisions\rev_52d21_0cd5a\rev_rev_left_52d21-rev_right_0cd5a\modules\swagger-oauth2-auth-server\src\main\scala\com\wordnik\swagger\auth\service\TokenScope.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_43668_d453e\rev_43668-d453e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f018a_14d08\rev_f018a-14d08.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7d577_a7489\rev_7d577-a7489.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4ccce_3b9a6\rev_4ccce-3b9a6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_bf0a4_fd46c\rev_bf0a4-fd46c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5369e_0b9b5\rev_5369e-0b9b5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_accfa_a00dd\rev_accfa-a00dd.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3a3c6_be323\rev_3a3c6-be323.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_47fc3_e76fa\rev_47fc3-e76fa.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4a0b4_f46bb\rev_4a0b4-f46bb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_00365_cce5c\rev_00365-cce5c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ef9b6_d6cca\rev_ef9b6-d6cca.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_684b9_b2479\rev_684b9-b2479.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_81b2b_69cdd\rev_81b2b-69cdd.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3515a_d8c80\rev_3515a-d8c80.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0937e_437de\rev_0937e-437de.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ce421_cba9d\rev_ce421-cba9d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2fc3f_44a89\rev_2fc3f-44a89.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_058bd_c98a5\rev_058bd-c98a5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d5ade_20cc9\rev_d5ade-20cc9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e0058_a087a\rev_e0058-a087a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_aa4ee_c4c8d\rev_aa4ee-c4c8d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b505c_8eb19\rev_b505c-8eb19.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_22998_3b57b\rev_22998-3b57b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_649ba_1e6f9\rev_649ba-1e6f9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7042c_abbe9\rev_7042c-abbe9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_eb281_9fc50\rev_eb281-9fc50.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_218a6_e4636\rev_218a6-e4636.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5a0f4_1485e\rev_5a0f4-1485e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2e65c_566de\rev_2e65c-566de.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d9f3d_e8570\rev_d9f3d-e8570.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fd6c7_935ae\rev_fd6c7-935ae.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513124896755\fstmerge_var1_3332719307752296614
public Model resolve(JavaType type) {
    final BeanDescription beanDesc = _mapper.getSerializationConfig().introspect(type);
    
    // Couple of possibilities for defining
    String name = _typeName(type, beanDesc);
    if("Object".equals(name)) {
	    return new ModelImpl();
    }
    
    if(type.isMapLikeType()) {
      return null;
    }

    // if processed already, return it or return null
    if(processedInnerTypes.contains(name))
      return innerTypes.get(name);

    // avoid recursion on failures
    processedInnerTypes.add(name);

    ModelImpl model = new ModelImpl()
      .name(name)
      .description(_description(beanDesc.getClassInfo()));

    // if XmlRootElement annotation, construct an Xml object and attach it to the model
    XmlRootElement rootAnnotation = beanDesc.getClassAnnotations().get(XmlRootElement.class);
    if(rootAnnotation != null && rootAnnotation.name() != null && !"".equals(rootAnnotation.name())) {
      Xml xml = new Xml()
        .name(rootAnnotation.name());
      if(rootAnnotation.namespace() != null && !"".equals(rootAnnotation.namespace()) && !"##default".equals(rootAnnotation.namespace()))
        xml.namespace(rootAnnotation.namespace());
      model.xml(xml);
    }

    ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
    // TODO
    if (apiModel != null) {
      if(apiModel.value() != null && !"".equals(apiModel.value())) {
        name = apiModel.value();
        model.setName(name);
      }
      Class<?> parent = apiModel.parent();
      if (parent != Void.class) {
        // model.setBaseModel(_typeName(_mapper.constructType(parent)));
      }
    }

    String disc = (apiModel == null) ? "" : apiModel.discriminator();
    if (disc.isEmpty()) {
      // longer method would involve AnnotationIntrospector.findTypeResolver(...) but:
      JsonTypeInfo typeInfo = beanDesc.getClassAnnotations().get(JsonTypeInfo.class);
      if (typeInfo != null) {
        disc = typeInfo.property();
      }
    }
    if (!disc.isEmpty()) {
      model.setDiscriminator(disc);
    }

    List<Property> props = new ArrayList<Property>();
    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
      Property property = null;
      String propName = propDef.getName();

      PropertyMetadata md = propDef.getMetadata();

      final AnnotatedMember member = propDef.getPrimaryMember();
      if(member != null) {
        JavaType propType = member.getType(beanDesc.bindingsForBeanType());
        property = resolveProperty(propType);

        if(property != null) {
          property.setName(propName);

          Boolean required = md.getRequired();
          if(required != null)
            property.setRequired(required);

          String description = _intr.findPropertyDescription(member);
          if(description != null && !"".equals(description))
            property.setDescription(description);

          Integer index = _intr.findPropertyIndex(member);
          if (index != null) {
            property.setPosition(index);
          }
          property.setExample(_findExampleValue(member));

          if(property != null) {
            // check for XML annotations
            XmlElementWrapper wrapper = member.getAnnotation(XmlElementWrapper.class);

            if(wrapper != null) {
              Xml xml = new Xml();
              xml.setWrapped(true);

              if(wrapper.name() != null && !"".equals(wrapper.name()))
                xml.setName(wrapper.name());
              if(wrapper.namespace() != null && !"".equals(wrapper.namespace()) && !"##default".equals(wrapper.namespace()))
                xml.setNamespace(wrapper.namespace());

              property.setXml(xml);
            }

            XmlElement element = member.getAnnotation(XmlElement.class);
            if(element != null) {
              if(element.name() != null && !"".equals(element.name())) {
                Xml xml = property.getXml();
                if(xml == null) {
                  xml = new Xml();
                  property.setXml(xml);
                }
                xml.setName(element.name());
              }
            }
          }

          props.add(property);
          // model.property(propName, property);
        }
      }
    }


    List<NamedType> nts = _intr.findSubtypes(beanDesc.getClassInfo());
    if (nts != null) {
      ArrayList<String> subtypeNames = new ArrayList<String>();
      for (NamedType subtype : nts) {
        Model subtypeModel = resolve(subtype.getType());

        if(subtypeModel instanceof ModelImpl && subtypeModel != null) {
          ModelImpl impl = (ModelImpl) subtypeModel;

          // remove shared properties defined in the parent
          if(model.getProperties() != null) {
            for(String propertyName : model.getProperties().keySet()) {
              if(impl.getProperties().containsKey(propertyName)) {
                impl.getProperties().remove(propertyName);
              }
            }
          }

          impl.setDiscriminator(null);
          innerTypes.put(impl.getName(), new ComposedModel()
            .parent(new RefModel(name))
            .child(impl));
        }
      }
    }

    Collections.sort(props, getPropertyComparator());

    Map<String, Property> modelProps = new LinkedHashMap<String, Property>();
    for (Property prop : props) {
      modelProps.put(prop.getName(), prop);
    }
    model.setProperties(modelProps);
    innerTypes.put(name, model);
    return model;
  }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513124896755\fstmerge_base_1593039920489881802
public Model resolve(JavaType type) {
    final BeanDescription beanDesc = _mapper.getSerializationConfig().introspect(type);
    
    // Couple of possibilities for defining
    final String name = _typeName(type, beanDesc);
    if("Object".equals(name)) {
	    return new ModelImpl();
    }
    
    if(type.isMapLikeType()) {
      return null;
    }

    // if processed already, return it or return null
    if(processedInnerTypes.contains(name))
      return innerTypes.get(name);

    // avoid recursion on failures
    processedInnerTypes.add(name);

    ModelImpl model = new ModelImpl()
      .name(name)
      .description(_description(beanDesc.getClassInfo()));

    // if XmlRootElement annotation, construct an Xml object and attach it to the model
    XmlRootElement rootAnnotation = beanDesc.getClassAnnotations().get(XmlRootElement.class);
    if(rootAnnotation != null && rootAnnotation.name() != null && !"".equals(rootAnnotation.name())) {
      Xml xml = new Xml()
        .name(rootAnnotation.name());
      if(rootAnnotation.namespace() != null && !"".equals(rootAnnotation.namespace()) && !"##default".equals(rootAnnotation.namespace()))
        xml.namespace(rootAnnotation.namespace());
      model.xml(xml);
    }

    ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
    // TODO
    if (apiModel != null) {
      Class<?> parent = apiModel.parent();
      if (parent != Void.class) {
        // model.setBaseModel(_typeName(_mapper.constructType(parent)));
      }
    }

    String disc = (apiModel == null) ? "" : apiModel.discriminator();
    if (disc.isEmpty()) {
      // longer method would involve AnnotationIntrospector.findTypeResolver(...) but:
      JsonTypeInfo typeInfo = beanDesc.getClassAnnotations().get(JsonTypeInfo.class);
      if (typeInfo != null) {
        disc = typeInfo.property();
      }
    }
    if (!disc.isEmpty()) {
      model.setDiscriminator(disc);
    }

    List<Property> props = new ArrayList<Property>();
    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
      Property property = null;
      String propName = propDef.getName();

      PropertyMetadata md = propDef.getMetadata();

      final AnnotatedMember member = propDef.getPrimaryMember();
      if(member != null) {
        JavaType propType = member.getType(beanDesc.bindingsForBeanType());
        property = resolveProperty(propType);

        if(property != null) {
          property.setName(propName);

          Boolean required = md.getRequired();
          if(required != null)
            property.setRequired(required);

          String description = _intr.findPropertyDescription(member);
          if(description != null && !"".equals(description))
            property.setDescription(description);

          Integer index = _intr.findPropertyIndex(member);
          if (index != null) {
            property.setPosition(index);
          }
          property.setExample(_findExampleValue(member));

          if(property != null) {
            // check for XML annotations
            XmlElementWrapper wrapper = member.getAnnotation(XmlElementWrapper.class);

            if(wrapper != null) {
              Xml xml = new Xml();
              xml.setWrapped(true);

              if(wrapper.name() != null && !"".equals(wrapper.name()))
                xml.setName(wrapper.name());
              if(wrapper.namespace() != null && !"".equals(wrapper.namespace()) && !"##default".equals(wrapper.namespace()))
                xml.setNamespace(wrapper.namespace());

              property.setXml(xml);
            }

            XmlElement element = member.getAnnotation(XmlElement.class);
            if(element != null) {
              if(element.name() != null && !"".equals(element.name())) {
                Xml xml = property.getXml();
                if(xml == null) {
                  xml = new Xml();
                  property.setXml(xml);
                }
                xml.setName(element.name());
              }
            }
          }

          props.add(property);
          // model.property(propName, property);
        }
      }
    }


    List<NamedType> nts = _intr.findSubtypes(beanDesc.getClassInfo());
    if (nts != null) {
      ArrayList<String> subtypeNames = new ArrayList<String>();
      for (NamedType subtype : nts) {
        Model subtypeModel = resolve(subtype.getType());

        if(subtypeModel instanceof ModelImpl && subtypeModel != null) {
          ModelImpl impl = (ModelImpl) subtypeModel;

          // remove shared properties defined in the parent
          if(model.getProperties() != null) {
            for(String propertyName : model.getProperties().keySet()) {
              if(impl.getProperties().containsKey(propertyName)) {
                impl.getProperties().remove(propertyName);
              }
            }
          }

          impl.setDiscriminator(null);
          innerTypes.put(impl.getName(), new ComposedModel()
            .parent(new RefModel(name))
            .child(impl));
        }
      }
    }

    Collections.sort(props, getPropertyComparator());

    Map<String, Property> modelProps = new LinkedHashMap<String, Property>();
    for (Property prop : props) {
      modelProps.put(prop.getName(), prop);
    }
    model.setProperties(modelProps);
    innerTypes.put(name, model);
    return model;
  }
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513124896755\fstmerge_var2_4063199953200367991

File path: C:\download\ssmerge\swagger-core\revisions\rev_fd6c7_935ae\rev_rev_left_fd6c7-rev_right_935ae\modules\swagger-core\src\main\java\com\wordnik\swagger\jackson\ModelResolver.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a0c7b_96e0f\rev_a0c7b-96e0f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b2adc_31475\rev_b2adc-31475.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c9ff4_6fbb9\rev_c9ff4-6fbb9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_857f4_fc45d\rev_857f4-fc45d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d9aa0_06830\rev_d9aa0-06830.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ebc2f_bfd12\rev_ebc2f-bfd12.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2c412_39ce9\rev_2c412-39ce9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a3258_d7920\rev_a3258-d7920.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_98f18_d0a98\rev_98f18-d0a98.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c2113_b0909\rev_c2113-b0909.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_20152_b7ec5\rev_20152-b7ec5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fde0f_203a4\rev_fde0f-203a4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1d240_b5961\rev_1d240-b5961.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0c704_4e217\rev_0c704-4e217.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_793b7_242f2\rev_793b7-242f2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_81b35_96321\rev_81b35-96321.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b45cc_2a6ac\rev_b45cc-2a6ac.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f23e2_32f02\rev_f23e2-32f02.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c4260_26f9e\rev_c4260-26f9e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c5aa9_8c15d\rev_c5aa9-8c15d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c6eda_e9b90\rev_c6eda-e9b90.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e7036_40d5e\rev_e7036-40d5e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_279a6_e9ac8\rev_279a6-e9ac8.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126036600\fstmerge_var1_5947092316910447339
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126036600\fstmerge_base_7200932347027521859
@GET
  @Path("/{petId}")
  @ApiOperation(value = "Find pet by ID", 
    notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
    response = Pet.class)
  @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
      @ApiResponse(code = 404, message = "Pet not found") })
  public Response getPetById(
      @ApiParam(value = "ID of pet that needs to be fetched", allowableValues = "range[1,5]", required = true) @PathParam("petId") String petId)
      throws NotFoundException {
    Pet pet = petData.getPetbyId(ru.getLong(0, 100000, 0, petId));
    if (null != pet) {
      return Response.ok().entity(pet).build();
    } else {
      throw new NotFoundException(404, "Pet not found");
    }
  }
=======
@GET
  @Path("/{petId}")
  @ApiOperation(value = "Find pet by ID", 
    notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions"
  )
  @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
      @ApiResponse(code = 404, message = "Pet not found") })
  public Pet getPetById(
      @ApiParam(value = "ID of pet that needs to be fetched", allowableValues = "range[1,5]", required = true) @PathParam("petId") String petId)
      throws NotFoundException {
    Pet pet = petData.getPetbyId(ru.getLong(0, 100000, 0, petId));
    if (null != pet) {
      return pet;
    } else {
      throw new NotFoundException(404, "Pet not found");
    }
  }
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126036600\fstmerge_var2_4852466692139586824

File path: C:\download\ssmerge\swagger-core\revisions\rev_279a6_e9ac8\rev_rev_left_279a6-rev_right_e9ac8\samples\java-jaxrs\src\main\java\com\wordnik\swagger\sample\resource\PetResource.java
Conflict type: ModifierList
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126099385\fstmerge_var1_6433625863438615254
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126099385\fstmerge_base_6418356981392192957
@Path("/owner")
@Api(value = "/owner", description = "Operations about the owners", position = 1)
=======
@Path("/owner")
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513126099385\fstmerge_var2_6799720250401903958
@Produces("application/json")
public

File path: C:\download\ssmerge\swagger-core\revisions\rev_279a6_e9ac8\rev_rev_left_279a6-rev_right_e9ac8\samples\java-jaxrs-subresource\src\main\java\com\wordnik\swagger\sample\resource\OwnerResource.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d588f_32eee\rev_d588f-32eee.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d9607_ef141\rev_d9607-ef141.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f7dc3_53107\rev_f7dc3-53107.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_070c8_cf85b\rev_070c8-cf85b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_34da0_5bad7\rev_34da0-5bad7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_eb45a_ce74c\rev_eb45a-ce74c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9c898_51f3b\rev_9c898-51f3b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fe1a9_02308\rev_fe1a9-02308.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_cf374_c60a9\rev_cf374-c60a9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d4426_0883e\rev_d4426-0883e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_15c82_5c89f\rev_15c82-5c89f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5648a_b3b9f\rev_5648a-b3b9f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_53525_57d18\rev_53525-57d18.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6c17c_ef40d\rev_6c17c-ef40d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_96c46_7268e\rev_96c46-7268e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_60518_b7719\rev_60518-b7719.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8d84e_12768\rev_8d84e-12768.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8bc08_bd2bc\rev_8bc08-bd2bc.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_afd26_203df\rev_afd26-203df.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f3b17_2dcdd\rev_f3b17-2dcdd.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_acbb9_e2e45\rev_acbb9-e2e45.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f5af3_15020\rev_f5af3-15020.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5d8ff_4cee5\rev_5d8ff-4cee5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4bcae_a005a\rev_4bcae-a005a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4b1dd_c6683\rev_4b1dd-c6683.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a7c7d_52171\rev_a7c7d-52171.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_da48a_b0b15\rev_da48a-b0b15.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_132d9_d1318\rev_132d9-d1318.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c85de_428b8\rev_c85de-428b8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5e4e1_723da\rev_5e4e1-723da.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c7848_eaf37\rev_c7848-eaf37.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7222e_ee0b6\rev_7222e-ee0b6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3cd4c_a084c\rev_3cd4c-a084c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6440c_cfe4e\rev_6440c-cfe4e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_45f02_acfe8\rev_45f02-acfe8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c497e_a4484\rev_c497e-a4484.revisions
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131183571\fstmerge_var1_5159270497381477474
private static ObjectMapper m = Json.mapper();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131183571\fstmerge_base_6785786843074953600
static ObjectMapper m = Json.mapper();
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131183571\fstmerge_var2_7457143160123161589

File path: C:\download\ssmerge\swagger-core\revisions\rev_c497e_a4484\rev_rev_left_c497e-rev_right_a4484\modules\swagger-jaxrs\src\main\java\com\wordnik\swagger\jaxrs\Reader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7a956_fa590\rev_7a956-fa590.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2d26f_a5ea4\rev_2d26f-a5ea4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_62f91_a5ea4\rev_62f91-a5ea4.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public Model resolve(JavaType type, ModelConverterContext context, Iterator<ModelConverter> next) {
    final BeanDescription beanDesc = _mapper.getSerializationConfig().introspect(type);
    if (type.isEnumType()) {
      // TODO how to handle if model provided is simply an enum
    }

    // Couple of possibilities for defining
    String name = _typeName(type, beanDesc);

    if("Object".equals(name)) {
      return new ModelImpl();
    }
    if(type.isMapLikeType()) {
      return null;
    }

    final ModelImpl model = new ModelImpl().type(ModelImpl.OBJECT).name(name)
        .description(_description(beanDesc.getClassInfo()));

    // if XmlRootElement annotation, construct an Xml object and attach it to the model
    XmlRootElement rootAnnotation = beanDesc.getClassAnnotations().get(XmlRootElement.class);
    if(rootAnnotation != null && !"".equals(rootAnnotation.name()) && !"##default".equals(rootAnnotation.name())) {
      LOGGER.debug(rootAnnotation.toString());
      Xml xml = new Xml()
        .name(rootAnnotation.name());
      if(rootAnnotation.namespace() != null && !"".equals(rootAnnotation.namespace()) && !"##default".equals(rootAnnotation.namespace()))
        xml.namespace(rootAnnotation.namespace());
      model.xml(xml);
    }

<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131518727\fstmerge_var1_7399722203127804692
    ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
    // TODO
    if (apiModel != null) {
      if(apiModel.value() != null && !"".equals(apiModel.value())) {
        name = apiModel.value();
        model.setName(name);

      }

      if(StringUtils.isNotEmpty( apiModel.reference())) {
        model.setReference(apiModel.reference());
      }

      Class<?> parent = apiModel.parent();
      if (parent != Void.class) {
        // model.setBaseModel(_typeName(_mapper.constructType(parent)));
      }
    }

||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131518727\fstmerge_base_8310259803131803494
    ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
    // TODO
    if (apiModel != null) {
      if(apiModel.value() != null && !"".equals(apiModel.value())) {
        name = apiModel.value();
        model.setName(name);
      }
      Class<?> parent = apiModel.parent();
      if (parent != Void.class) {
        // model.setBaseModel(_typeName(_mapper.constructType(parent)));
      }
    }

=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131518727\fstmerge_var2_4396387623723351565
    // see if @JsonIgnoreProperties exist
    Set<String> propertiesToIgnore = new HashSet<String>();
    JsonIgnoreProperties ignoreProperties = beanDesc.getClassAnnotations().get(JsonIgnoreProperties.class);
    if(ignoreProperties != null) {
      propertiesToIgnore.addAll(Arrays.asList(ignoreProperties.value()));
    }

    final ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
    String disc = (apiModel == null) ? "" : apiModel.discriminator();
    if (disc.isEmpty()) {
      // longer method would involve AnnotationIntrospector.findTypeResolver(...) but:
      JsonTypeInfo typeInfo = beanDesc.getClassAnnotations().get(JsonTypeInfo.class);
      if (typeInfo != null) {
        disc = typeInfo.property();
      }
    }
    if (!disc.isEmpty()) {
      model.setDiscriminator(disc);
    }

    List<Property> props = new ArrayList<Property>();
    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
      Property property = null;
      String propName = propDef.getName();
      Annotation[] annotations = null;

      // hack to avoid clobbering properties with get/is names
      // it's ugly but gets around https://github.com/swagger-api/swagger-core/issues/415
      if(propDef.getPrimaryMember() != null) {
        java.lang.reflect.Member member = propDef.getPrimaryMember().getMember();
        if(member != null) {
          String altName = member.getName();
          if(altName != null) {
            if(altName.startsWith("get")) {
              if(!Character.isUpperCase(altName.charAt(3))) {
                propName = altName;
              }
            }
            else if (altName.startsWith("is")) {
              if(!Character.isUpperCase(altName.charAt(2))) {
                propName = altName;
              }
            }
          }
        }
      }

      PropertyMetadata md = propDef.getMetadata();

      boolean hasSetter = false, hasGetter = false;
      if(propDef.getSetter() == null)
        hasSetter = false;
      else
        hasSetter = true;
      if(propDef.getGetter() != null) {
        JsonProperty pd = propDef.getGetter().getAnnotation(JsonProperty.class);
        if(pd != null)
          hasGetter = true;
      }
      Boolean isReadOnly = null;
      if(!hasSetter & hasGetter)
        isReadOnly = Boolean.TRUE;
      else
        isReadOnly = Boolean.FALSE;

      final AnnotatedMember member = propDef.getPrimaryMember();

      if(member != null && !propertiesToIgnore.contains(propName)) {
        List<Annotation> annotationList = new ArrayList<Annotation>();
        for(Annotation a : member.annotations())
          annotationList.add(a);

        annotations = annotationList.toArray(new Annotation[annotationList.size()]);

        ApiModelProperty mp = member.getAnnotation(ApiModelProperty.class);

        JavaType propType = member.getType(beanDesc.bindingsForBeanType());

        // allow override of name from annotation
        if(mp != null && !mp.name().isEmpty())
          propName = mp.name();

        if(mp != null && !mp.dataType().isEmpty()) {
          String or = mp.dataType();

          JavaType innerJavaType = null;
          LOGGER.debug("overriding datatype from " + propType + " to " + or);

          if(or.toLowerCase().startsWith("list[")) {
            String innerType = or.substring(5, or.length() - 1);
            ArrayProperty p = new ArrayProperty();
            Property primitiveProperty = getPrimitiveProperty(innerType);
            if(primitiveProperty != null)
              p.setItems(primitiveProperty);
            else {
              innerJavaType = getInnerType(innerType);
              p.setItems(context.resolveProperty(innerJavaType, annotations));
            }
            property = p;
          }
          else if(or.toLowerCase().startsWith("map[")) {
            int pos = or.indexOf(",");
            if(pos > 0) {
              String innerType = or.substring(pos + 1, or.length() - 1);
              MapProperty p = new MapProperty();
              Property primitiveProperty = getPrimitiveProperty(innerType);
              if(primitiveProperty != null)
                p.setAdditionalProperties(primitiveProperty);
              else {
                innerJavaType = getInnerType(innerType);
                p.setAdditionalProperties(context.resolveProperty(innerJavaType, annotations));
              }
              property = p;
            }
          }
          else {
            Property primitiveProperty = getPrimitiveProperty(or);
            if(primitiveProperty != null)
              property = primitiveProperty;
            else {
              innerJavaType = getInnerType(or);
              property = context.resolveProperty(innerJavaType, annotations);
            }
          }
          if(innerJavaType != null) {
            context.resolve(innerJavaType);
          }
        }

        // no property from override, construct from propType
        if(property == null) {
          if( mp != null && StringUtils.isNotEmpty(mp.reference())){
            property = new RefProperty( mp.reference());
          } else {
            property = context.resolveProperty(propType, annotations);
          }
        }

        if(property != null) {
          property.setName(propName);

          if (mp != null && !mp.access().isEmpty()) {
            property.setAccess(mp.access());
          }

          Boolean required = md.getRequired();
          if(required != null)
            property.setRequired(required);

          String description = _intr.findPropertyDescription(member);
          if(description != null && !"".equals(description))
            property.setDescription(description);

          Integer index = _intr.findPropertyIndex(member);
          if (index != null) {
            property.setPosition(index);
          }
          property.setDefault(_findDefaultValue(member));
          property.setExample(_findExampleValue(member));
          property.setReadOnly(_findReadOnly(member));
          
          if(property.getReadOnly() == null) {
            if(isReadOnly)
              property.setReadOnly(isReadOnly);
          }

          if(property instanceof StringProperty) {
            if(mp != null) {
              String allowableValues = mp.allowableValues();
              LOGGER.debug("allowableValues " + allowableValues);
              if(!"".equals(allowableValues)) {
                String[] parts = allowableValues.split(",");
                LOGGER.debug("found " + parts.length + " parts");
                for(String part : parts) {
                  if(property instanceof StringProperty) {
                    StringProperty sp = (StringProperty) property;
                    sp._enum(part.trim());
                    LOGGER.debug("added enum value " + part);
                  }          
                }
              }
            }
          }

          if(property != null) {
            // check for XML annotations
            XmlElementWrapper wrapper = member.getAnnotation(XmlElementWrapper.class);

            if(wrapper != null) {
              Xml xml = new Xml();
              xml.setWrapped(true);

              if(wrapper.name() != null) {
                if("##default".equals(wrapper.name()))
                  xml.setName(propName);
                else if(!"".equals(wrapper.name()))
                  xml.setName(wrapper.name());
              }
              if(wrapper.namespace() != null && !"".equals(wrapper.namespace()) && !"##default".equals(wrapper.namespace()))
                xml.setNamespace(wrapper.namespace());

              property.setXml(xml);
            }

            XmlElement element = member.getAnnotation(XmlElement.class);
            if(element != null) {
              if(!element.name().isEmpty()) {
                // don't set Xml object if name is same
                if(!element.name().equals(propName) && !"##default".equals(element.name())) {
                  Xml xml = property.getXml();
                  if(xml == null) {
                    xml = new Xml();
                    property.setXml(xml);
                  }
                  xml.setName(element.name());
                }
              }
            }
            XmlAttribute attr = member.getAnnotation(XmlAttribute.class);
            if(attr != null) {
              if(!"".equals(attr.name())) {
                // don't set Xml object if name is same
                if(!attr.name().equals(propName) && !"##default".equals(attr.name())) {
                  Xml xml = property.getXml();
                  if(xml == null) {
                    xml = new Xml();
                    property.setXml(xml);
                  }
                  xml.setName(attr.name());
                }
              }
            }
            
          }
          applyBeanValidatorAnnotations(property, annotations);
          props.add(property);
        }
      }
    }

    if (!resolveSubtypes(model, beanDesc, context)) {
      model.setDiscriminator(null);
    }

    Collections.sort(props, getPropertyComparator());

    Map<String, Property> modelProps = new LinkedHashMap<String, Property>();
    for (Property prop : props) {
      modelProps.put(prop.getName(), prop);
    }
    model.setProperties(modelProps);
    return model;
  }

File path: C:\download\ssmerge\swagger-core\revisions\rev_62f91_a5ea4\rev_rev_left_62f91-rev_right_a5ea4\modules\swagger-core\src\main\java\com\wordnik\swagger\jackson\ModelResolver.java
Conflict type: EditSameMC
Number of Conflicts: 2
Different Spacing: 0
Consecutive Lines: 1
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 2, 0, 0
Conflict body: 
public Operation parseMethod(Method method) {
    Operation operation = new Operation();

    ApiOperation apiOperation = getAnnotation(method, ApiOperation.class);
    ApiResponses responseAnnotation = getAnnotation(method, ApiResponses.class);

    String operationId = method.getName();
    String responseContainer = null;

    Type responseType = null;
    Map<String,Property> defaultResponseHeaders = new HashMap<String, Property>();

    if(apiOperation != null) {
      if(apiOperation.hidden())
        return null;
      if(!"".equals(apiOperation.nickname()))
        operationId = method.getName();

      defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

      operation
        .summary(apiOperation.value())
        .description(apiOperation.notes());

      if(apiOperation.response() != null && !isVoid(apiOperation.response()))
        responseType = apiOperation.response();
      if(!"".equals(apiOperation.responseContainer()))
        responseContainer = apiOperation.responseContainer();
      if(apiOperation.authorizations()!= null) {
        List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
        for(Authorization auth : apiOperation.authorizations()) {
          if(auth.value() != null && !"".equals(auth.value())) {
            SecurityRequirement security = new SecurityRequirement();
            security.setName(auth.value());
            AuthorizationScope[] scopes = auth.scopes();
            for(AuthorizationScope scope : scopes) {
              if(scope.scope() != null && !"".equals(scope.scope())) {
                security.addScope(scope.scope());
              }
            }
            securities.add(security);
          }
        }
        if(securities.size() > 0) {
          for(SecurityRequirement sec : securities)
            operation.security(sec);
        }
      }
      if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
        operation.consumes(apiOperation.consumes());
      }
      if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
        operation.produces(apiOperation.produces());
      }
    }

<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_var1_7564047319675811537
    if( apiOperation != null && StringUtils.isNotEmpty( apiOperation.responseReference() )){
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      response.schema( new RefProperty( apiOperation.responseReference() ));
      operation.addResponse(String.valueOf(apiOperation.code()), response);
    }
    else if(responseClass == null ) {
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_base_540805105144514410
    if(responseClass == null) {
=======
    if(responseType == null) {
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_var2_2375353122751657980
      // pick out response from method declaration
      LOGGER.debug("picking up response class from method " + method);
      responseType = method.getGenericReturnType();
    }
    if(isValidResponse(responseType)) {
      int responseCode = 200;
      if (apiOperation != null) {
        responseCode = apiOperation.code();
      }
      if(isPrimitive(responseType)) {
        Property property = ModelConverters.getInstance().readAsProperty(responseType);
        if(property != null) {
          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(responseProperty)
            .headers(defaultResponseHeaders));
        }
      } else {
        Map<String, Model> models = ModelConverters.getInstance().read(responseType);
        if(models.size() == 0) {
          Property p = ModelConverters.getInstance().readAsProperty(responseType);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(p)
            .headers(defaultResponseHeaders));
        }
        for(String key: models.keySet()) {
          Model model = models.get( key );
          Property property = StringUtils.isNotEmpty( model.getReference() ) ?
                  new RefProperty( model.getReference() ) :
                  new RefProperty().asDefault(key);

          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(responseProperty)
            .headers(defaultResponseHeaders));
          swagger.model(key, models.get(key));
        }
        models = ModelConverters.getInstance().readAll(responseType);
        for(String key: models.keySet()) {
          swagger.model(key, models.get(key));
        }
      }
    }

    operation.operationId(operationId);

    Annotation annotation;
    if (apiOperation != null && apiOperation.consumes() != null && apiOperation.consumes().isEmpty()) {
      annotation = getAnnotation(method, Consumes.class);
      if(annotation != null) {
        String[] apiConsumes = ((Consumes)annotation).value();
        for(String mediaType: apiConsumes)
          operation.consumes(mediaType);
      }
    }

    if (apiOperation != null && apiOperation.produces() != null && apiOperation.produces().isEmpty()) {
      annotation = getAnnotation(method, Produces.class);
      if(annotation != null) {
        String[] apiProduces = ((Produces)annotation).value();
        for(String mediaType: apiProduces)
          operation.produces(mediaType);
      }
    }

    List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
    if(responseAnnotation != null) {
      for(ApiResponse apiResponse: responseAnnotation.value()) {
        Map<String,Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

        Response response = new Response()
          .description(apiResponse.message())
          .headers(responseHeaders);

        if(apiResponse.code() == 0)
          operation.defaultResponse(response);
        else
          operation.response(apiResponse.code(), response);

<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_var1_7564047319675811537
        responseClass = apiResponse.response();

        if( StringUtils.isNotEmpty( apiResponse.reference() )){
          response.schema( new RefProperty( apiResponse.reference() ));
        }
        else if(responseClass != null && !responseClass.equals(java.lang.Void.class)) {
          Map<String, Model> models = ModelConverters.getInstance().read(responseClass);
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_base_540805105144514410
        responseClass = apiResponse.response();
        if(responseClass != null && !responseClass.equals(java.lang.Void.class)) {
          Map<String, Model> models = ModelConverters.getInstance().read(responseClass);
=======
        responseType = apiResponse.response();
        if(responseType != null && !isVoid(responseType)) {
          Map<String, Model> models = ModelConverters.getInstance().read(responseType);
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131534236\fstmerge_var2_2375353122751657980
          for(String key: models.keySet()) {
            Model model = models.get( key );
            Property property = StringUtils.isNotEmpty( model.getReference() ) ?
                    new RefProperty( model.getReference() ) :
                    new RefProperty().asDefault(key);

            Property responseProperty = ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property);
            response.schema(responseProperty);

            if( StringUtils.isEmpty(model.getReference())) {
              swagger.model(key, models.get(key));
            }
          }
          models = ModelConverters.getInstance().readAll(responseType);
          for(String key: models.keySet()) {
            Model model = models.get(key);
            if( StringUtils.isEmpty(model.getReference())) {
              swagger.model(key, model);
            }
          }
        }
      }
    }
    boolean isDeprecated = false;
    annotation = method.getAnnotation(Deprecated.class);
    if(annotation != null)
      isDeprecated = true;

    boolean hidden = false;
    if(apiOperation != null)
      hidden = apiOperation.hidden();

    // process parameters
    Type[] genericParameterTypes = method.getGenericParameterTypes();
    Annotation[][] paramAnnotations = method.getParameterAnnotations();
    for(int i = 0; i < genericParameterTypes.length; i++) {
      Type type = genericParameterTypes[i];
      List<Parameter> parameters = getParameters(type,Arrays.asList(paramAnnotations[i]));

      for(Parameter parameter : parameters) {
        operation.parameter(parameter);
      }
    }

    if(operation.getResponses() == null) {
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      operation.defaultResponse(response);
    }
    return operation;
  }

File path: C:\download\ssmerge\swagger-core\revisions\rev_62f91_a5ea4\rev_rev_left_62f91-rev_right_a5ea4\modules\swagger-jaxrs\src\main\java\com\wordnik\swagger\jaxrs\Reader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_297dd_66d92\rev_297dd-66d92.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4cc76_66d92\rev_4cc76-66d92.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692472\fstmerge_var1_7327811426485031096
public AnnotationsHelper(Annotation[] annotations) {
      for (Annotation item : annotations) {
        if (item instanceof Context) {
          context = true;
        } else if (item instanceof ApiParam) {
          apiParam = new ApiParamWrapper((ApiParam) item);
        } else if (item instanceof ApiImplicitParam) {
          apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);
        }
      }
    }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692472\fstmerge_base_9119156682567147440
public AnnotationsHelper(Annotation[] annotations) {
      for (Annotation item : annotations) {
        if (item instanceof Context) {
          context = true;
        } else if (item instanceof ApiParam) {
          apiParam = (ApiParam) item;
        }
      }
    }
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692472\fstmerge_var2_8887283694088386987

File path: C:\download\ssmerge\swagger-core\revisions\rev_4cc76_66d92\rev_rev_left_4cc76-rev_right_66d92\modules\swagger-jaxrs\src\main\java\com\wordnik\swagger\jaxrs\ParameterProcessor.java
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692785\fstmerge_var1_956743210674274265
public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, Class<?> cls, Annotation[] annotations, boolean isArray) {
    final AnnotationsHelper helper = new AnnotationsHelper(annotations);
    if (helper.isContext()) {
      return null;
    }
    final ParamWrapper<?> param = helper.getApiParam();
    if (parameter instanceof AbstractSerializableParameter) {
      final AbstractSerializableParameter<?> p = (AbstractSerializableParameter<?>) parameter;

      if (param.isRequired()) {
        p.setRequired(true);
      }
      if (StringUtils.isNotEmpty(param.getName())) {
        p.setName(param.getName());
      }
      if (StringUtils.isNotEmpty(param.getDescription())) {
        p.setDescription(param.getDescription());
      }
      if (StringUtils.isNotEmpty(param.getAccess())) {
        p.setAccess(param.getAccess());
      }
      if( StringUtils.isNotEmpty(param.getDataType()) ){
         p.setType(param.getDataType());
      }

      AllowableValues allowableValues = null;
      if (StringUtils.isNotEmpty(param.getAllowableValues())) {
        allowableValues = AllowableRangeValues.create(param.getAllowableValues());
        if (allowableValues == null) {
          allowableValues = AllowableEnumValues.create(param.getAllowableValues());
        }
      }

      final String defaultValue = param.getDefaultValue();
      if (param.isAllowMultiple() || isArray) {
        final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
        if (!defaultValue.isEmpty()) {
          args.put(PropertyBuilder.PropertyId.DEFAULT, defaultValue);
        }
        if (allowableValues != null) {
          processAllowedValues(allowableValues, true, args);
        }

        p.items(PropertyBuilder.build(p.getType(), p.getFormat(), args))
          .type(ArrayProperty.TYPE)
          .format(null)
          .collectionFormat("multi");
      } else {
        if (!defaultValue.isEmpty()) {
          p.setDefaultValue(defaultValue);
        }
        if (allowableValues != null) {
          processAllowedValues(allowableValues, false, p);
        }
      }
    } else {
      // must be a body param
      BodyParameter bp = new BodyParameter();
      bp.setRequired(param.isRequired());
      bp.setName(StringUtils.isNotEmpty(param.getName()) ? param.getName() : "body");
      if (StringUtils.isNotEmpty(param.getDescription())) {
        bp.setDescription(param.getDescription());
      }

      if(cls.isArray() || isArray) {
        final Class<?> innerType;
        if(isArray) {// array has already been detected
          innerType = cls;
        } else {
          innerType = cls.getComponentType();
        }
        Property innerProperty = ModelConverters.getInstance().readAsProperty(innerType);
        if(innerProperty == null) {
          Map<String, Model> models = ModelConverters.getInstance().read(innerType);
          if(models.size() > 0) {
            for(String name: models.keySet()) {
              if(name.indexOf("java.util") == -1) {
                bp.setSchema(
                  new ArrayModel().items(new RefProperty().asDefault(name)));
                if(swagger != null)
                  swagger.addDefinition(name, models.get(name));
              }
            }
          }
          models = ModelConverters.getInstance().readAll(innerType);
          if(swagger != null) {
            for(String key : models.keySet()) {
              swagger.model(key, models.get(key));
            }
          }
        }
        else {
          LOGGER.debug("found inner property " + innerProperty);
          bp.setSchema(new ArrayModel().items(innerProperty));

          // creation of ref property doesn't add model to definitions - do it now instead
          if( innerProperty instanceof RefProperty && swagger != null) {
              Map<String, Model> models = ModelConverters.getInstance().read(innerType);
              String name = ((RefProperty)innerProperty).getSimpleRef();
              swagger.addDefinition(name, models.get(name));

            LOGGER.debug("added model definition for RefProperty " + name);
          }
        }
      }
      else {
        Map<String, Model> models = ModelConverters.getInstance().read(cls);
        if(models.size() > 0) {
          for(String name: models.keySet()) {
            if(name.indexOf("java.util") == -1) {
              if(isArray)
                bp.setSchema(new ArrayModel().items(new RefProperty().asDefault(name)));
              else
                bp.setSchema(new RefModel().asDefault(name));
              if(swagger != null)
                swagger.addDefinition(name, models.get(name));
            }
          }
          models = ModelConverters.getInstance().readAll(cls);
          if(swagger != null) {
            for(String key : models.keySet()) {
              swagger.model(key, models.get(key));
            }
          }
        }
        else {
          Property prop = ModelConverters.getInstance().readAsProperty(cls);
          if(prop != null) {
            ModelImpl model = new ModelImpl();
            model.setType(prop.getType());
            model.setFormat(prop.getFormat());
            model.setDescription(prop.getDescription());
            bp.setSchema(model);
          }
        }
      }
      parameter = bp;
    }
    return parameter;
  }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692785\fstmerge_base_9126741839107174855
public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, Class<?> cls, Annotation[] annotations, boolean isArray) {
    final AnnotationsHelper helper = new AnnotationsHelper(annotations);
    if (helper.isContext()) {
      return null;
    }
    final ApiParam param = helper.getApiParam();
    if (parameter instanceof AbstractSerializableParameter) {
      final AbstractSerializableParameter<?> p = (AbstractSerializableParameter<?>) parameter;

      if (param.required()) {
        p.setRequired(true);
      }
      if (StringUtils.isNotEmpty(param.name())) {
        p.setName(param.name());
      }
      if (StringUtils.isNotEmpty(param.value())) {
        p.setDescription(param.value());
      }
      if (StringUtils.isNotEmpty(param.access())) {
        p.setAccess(param.access());
      }

      AllowableValues allowableValues = null;
      if (StringUtils.isNotEmpty(param.allowableValues())) {
        allowableValues = AllowableRangeValues.create(param.allowableValues());
        if (allowableValues == null) {
          allowableValues = AllowableEnumValues.create(param.allowableValues());
        }
      }

      final String defaultValue = param.defaultValue();
      if (param.allowMultiple() || isArray) {
        final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
        if (!defaultValue.isEmpty()) {
          args.put(PropertyBuilder.PropertyId.DEFAULT, defaultValue);
        }
        if (allowableValues != null) {
          processAllowedValues(allowableValues, true, args);
        }

        p.items(PropertyBuilder.build(p.getType(), p.getFormat(), args))
          .type(ArrayProperty.TYPE)
          .format(null)
          .collectionFormat("multi");
      } else {
        if (!defaultValue.isEmpty()) {
          p.setDefaultValue(defaultValue);
        }
        if (allowableValues != null) {
          processAllowedValues(allowableValues, false, p);
        }
      }
    } else {
      // must be a body param
      BodyParameter bp = new BodyParameter();
      bp.setRequired(param.required());
      bp.setName(StringUtils.isNotEmpty(param.name()) ? param.name() : "body");
      if (StringUtils.isNotEmpty(param.value())) {
        bp.setDescription(param.value());
      }

      if(cls.isArray() || isArray) {
        final Class<?> innerType;
        if(isArray) {// array has already been detected
          innerType = cls;
        } else {
          innerType = cls.getComponentType();
        }
        Property innerProperty = ModelConverters.getInstance().readAsProperty(innerType);
        if(innerProperty == null) {
          Map<String, Model> models = ModelConverters.getInstance().read(innerType);
          if(models.size() > 0) {
            for(String name: models.keySet()) {
              if(name.indexOf("java.util") == -1) {
                bp.setSchema(
                  new ArrayModel().items(new RefProperty().asDefault(name)));
                if(swagger != null)
                  swagger.addDefinition(name, models.get(name));
              }
            }
          }
          models = ModelConverters.getInstance().readAll(innerType);
          if(swagger != null) {
            for(String key : models.keySet()) {
              swagger.model(key, models.get(key));
            }
          }
        }
        else {
          LOGGER.debug("found inner property " + innerProperty);
          bp.setSchema(new ArrayModel().items(innerProperty));

          // creation of ref property doesn't add model to definitions - do it now instead
          if( innerProperty instanceof RefProperty && swagger != null) {
              Map<String, Model> models = ModelConverters.getInstance().read(innerType);
              String name = ((RefProperty)innerProperty).getSimpleRef();
              swagger.addDefinition(name, models.get(name));

            LOGGER.debug("added model definition for RefProperty " + name);
          }
        }
      }
      else {
        Map<String, Model> models = ModelConverters.getInstance().read(cls);
        if(models.size() > 0) {
          for(String name: models.keySet()) {
            if(name.indexOf("java.util") == -1) {
              if(isArray)
                bp.setSchema(new ArrayModel().items(new RefProperty().asDefault(name)));
              else
                bp.setSchema(new RefModel().asDefault(name));
              if(swagger != null)
                swagger.addDefinition(name, models.get(name));
            }
          }
          models = ModelConverters.getInstance().readAll(cls);
          if(swagger != null) {
            for(String key : models.keySet()) {
              swagger.model(key, models.get(key));
            }
          }
        }
        else {
          Property prop = ModelConverters.getInstance().readAsProperty(cls);
          if(prop != null) {
            ModelImpl model = new ModelImpl();
            model.setType(prop.getType());
            model.setFormat(prop.getFormat());
            model.setDescription(prop.getDescription());
            bp.setSchema(model);
          }
        }
      }
      parameter = bp;
    }
    return parameter;
  }
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131692785\fstmerge_var2_3196255692140764677

File path: C:\download\ssmerge\swagger-core\revisions\rev_4cc76_66d92\rev_rev_left_4cc76-rev_right_66d92\modules\swagger-jaxrs\src\main\java\com\wordnik\swagger\jaxrs\ParameterProcessor.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_255f9_b44b3\rev_255f9-b44b3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_44205_3b2c4\rev_44205-3b2c4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fbc78_3b06d\rev_fbc78-3b06d.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 1
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public Operation parseMethod(Method method) {
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131944165\fstmerge_var1_8537512337013340459
    return parseMethod(method, Collections.<Parameter> emptyList());
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131944165\fstmerge_base_1008300085313333895
    Operation operation = new Operation();

    ApiOperation apiOperation = getAnnotation(method, ApiOperation.class);
    ApiResponses responseAnnotation = getAnnotation(method, ApiResponses.class);

    String operationId = method.getName();
    String responseContainer = null;

    Type responseType = null;
    Map<String,Property> defaultResponseHeaders = new HashMap<String, Property>();

    if(apiOperation != null) {
      if(apiOperation.hidden())
        return null;
      if(!"".equals(apiOperation.nickname()))
        operationId = method.getName();

      defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

      operation
        .summary(apiOperation.value())
        .description(apiOperation.notes());

      if(apiOperation.response() != null && !isVoid(apiOperation.response()))
        responseType = apiOperation.response();
      if(!"".equals(apiOperation.responseContainer()))
        responseContainer = apiOperation.responseContainer();
      if(apiOperation.authorizations()!= null) {
        List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
        for(Authorization auth : apiOperation.authorizations()) {
          if(auth.value() != null && !"".equals(auth.value())) {
            SecurityRequirement security = new SecurityRequirement();
            security.setName(auth.value());
            AuthorizationScope[] scopes = auth.scopes();
            for(AuthorizationScope scope : scopes) {
              if(scope.scope() != null && !"".equals(scope.scope())) {
                security.addScope(scope.scope());
              }
            }
            securities.add(security);
          }
        }
        if(securities.size() > 0) {
          for(SecurityRequirement sec : securities)
            operation.security(sec);
        }
      }
      if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
        operation.consumes(apiOperation.consumes());
      }
      if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
        operation.produces(apiOperation.produces());
      }
    }

    if( apiOperation != null && StringUtils.isNotEmpty( apiOperation.responseReference() )){
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      response.schema( new RefProperty( apiOperation.responseReference() ));
      operation.addResponse(String.valueOf(apiOperation.code()), response);
    }
    else if(responseType == null) {
      // pick out response from method declaration
      LOGGER.debug("picking up response class from method " + method);
      responseType = method.getGenericReturnType();
    }
    if(isValidResponse(responseType)) {
      int responseCode = 200;
      if (apiOperation != null) {
        responseCode = apiOperation.code();
      }
      if(isPrimitive(responseType)) {
        Property property = ModelConverters.getInstance().readAsProperty(responseType);
        if(property != null) {
          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(responseProperty)
            .headers(defaultResponseHeaders));
        }
      } else {
        Map<String, Model> models = ModelConverters.getInstance().read(responseType);
        if(models.size() == 0) {
          Property p = ModelConverters.getInstance().readAsProperty(responseType);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(p)
            .headers(defaultResponseHeaders));
        }
        for(String key: models.keySet()) {
          Model model = models.get( key );
          Property property = StringUtils.isNotEmpty( model.getReference() ) ?
                  new RefProperty( model.getReference() ) :
                  new RefProperty().asDefault(key);

          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
          operation.response(responseCode, new Response()
            .description(SUCCESSFUL_OPERATION)
            .schema(responseProperty)
            .headers(defaultResponseHeaders));
          swagger.model(key, models.get(key));
        }
        models = ModelConverters.getInstance().readAll(responseType);
        for(String key: models.keySet()) {
          swagger.model(key, models.get(key));
        }
      }
    }

    operation.operationId(operationId);

    Annotation annotation;
    if (apiOperation != null && apiOperation.consumes() != null && apiOperation.consumes().isEmpty()) {
      annotation = getAnnotation(method, Consumes.class);
      if(annotation != null) {
        String[] apiConsumes = ((Consumes)annotation).value();
        for(String mediaType: apiConsumes)
          operation.consumes(mediaType);
      }
    }

    if (apiOperation != null && apiOperation.produces() != null && apiOperation.produces().isEmpty()) {
      annotation = getAnnotation(method, Produces.class);
      if(annotation != null) {
        String[] apiProduces = ((Produces)annotation).value();
        for(String mediaType: apiProduces)
          operation.produces(mediaType);
      }
    }

    List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
    if(responseAnnotation != null) {
      for(ApiResponse apiResponse: responseAnnotation.value()) {
        Map<String,Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

        Response response = new Response()
          .description(apiResponse.message())
          .headers(responseHeaders);

        if(apiResponse.code() == 0)
          operation.defaultResponse(response);
        else
          operation.response(apiResponse.code(), response);

        responseType = apiResponse.response();

        if( StringUtils.isNotEmpty( apiResponse.reference() )){
          response.schema( new RefProperty( apiResponse.reference() ));
        }
        else if(responseType != null && !isVoid(responseType)) {
          Map<String, Model> models = ModelConverters.getInstance().read(responseType);
          for(String key: models.keySet()) {
            Model model = models.get( key );
            Property property = StringUtils.isNotEmpty( model.getReference() ) ?
                    new RefProperty( model.getReference() ) :
                    new RefProperty().asDefault(key);

            Property responseProperty = ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property);
            response.schema(responseProperty);

            if( StringUtils.isEmpty(model.getReference())) {
              swagger.model(key, models.get(key));
            }
          }
          models = ModelConverters.getInstance().readAll(responseType);
          for(String key: models.keySet()) {
            Model model = models.get(key);
            if( StringUtils.isEmpty(model.getReference())) {
              swagger.model(key, model);
            }
          }
        }
      }
    }
    boolean isDeprecated = false;
    annotation = method.getAnnotation(Deprecated.class);
    if(annotation != null)
      isDeprecated = true;

    boolean hidden = false;
    if(apiOperation != null)
      hidden = apiOperation.hidden();

    // process parameters
    Type[] genericParameterTypes = method.getGenericParameterTypes();
    Annotation[][] paramAnnotations = method.getParameterAnnotations();
    for(int i = 0; i < genericParameterTypes.length; i++) {
      Type type = genericParameterTypes[i];
      List<Parameter> parameters = getParameters(type,Arrays.asList(paramAnnotations[i]));

      for(Parameter parameter : parameters) {
        operation.parameter(parameter);
      }
    }

    if(operation.getResponses() == null) {
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      operation.defaultResponse(response);
    }
    return operation;
=======
    Operation operation = new Operation();

    ApiOperation apiOperation = getAnnotation(method, ApiOperation.class);
    ApiResponses responseAnnotation = getAnnotation(method, ApiResponses.class);

    String operationId = method.getName();
    String responseContainer = null;

    Type responseType = null;
    Map<String,Property> defaultResponseHeaders = new HashMap<String, Property>();

    if(apiOperation != null) {
      if(apiOperation.hidden())
        return null;
      if(!"".equals(apiOperation.nickname()))
        operationId = method.getName();

      defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

      operation
        .summary(apiOperation.value())
        .description(apiOperation.notes());

      if(apiOperation.response() != null && !isVoid(apiOperation.response()))
        responseType = apiOperation.response();
      if(!"".equals(apiOperation.responseContainer()))
        responseContainer = apiOperation.responseContainer();
      if(apiOperation.authorizations()!= null) {
        List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
        for(Authorization auth : apiOperation.authorizations()) {
          if(auth.value() != null && !"".equals(auth.value())) {
            SecurityRequirement security = new SecurityRequirement();
            security.setName(auth.value());
            AuthorizationScope[] scopes = auth.scopes();
            for(AuthorizationScope scope : scopes) {
              if(scope.scope() != null && !"".equals(scope.scope())) {
                security.addScope(scope.scope());
              }
            }
            securities.add(security);
          }
        }
        if(securities.size() > 0) {
          for(SecurityRequirement sec : securities)
            operation.security(sec);
        }
      }
      if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
        operation.consumes(apiOperation.consumes());
      }
      if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
        operation.produces(apiOperation.produces());
      }
    }

    if( apiOperation != null && StringUtils.isNotEmpty( apiOperation.responseReference() )){
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      response.schema( new RefProperty( apiOperation.responseReference() ));
      operation.addResponse(String.valueOf(apiOperation.code()), response);
    }
    else if(responseType == null) {
      // pick out response from method declaration
      LOGGER.debug("picking up response class from method " + method);
      responseType = method.getGenericReturnType();
    }
    if(isValidResponse(responseType)) {
      final Property property = ModelConverters.getInstance().readAsProperty(responseType);
      if (property != null) {
        final Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
        final int responseCode = apiOperation == null ? 200 : apiOperation.code();
        operation.response(responseCode, new Response().description(SUCCESSFUL_OPERATION).schema(responseProperty)
            .headers(defaultResponseHeaders));
        appendModels(responseType);
      }
    }

    operation.operationId(operationId);

    Annotation annotation;
    if (apiOperation != null && apiOperation.consumes() != null && apiOperation.consumes().isEmpty()) {
      annotation = getAnnotation(method, Consumes.class);
      if(annotation != null) {
        String[] apiConsumes = ((Consumes)annotation).value();
        for(String mediaType: apiConsumes)
          operation.consumes(mediaType);
      }
    }

    if (apiOperation != null && apiOperation.produces() != null && apiOperation.produces().isEmpty()) {
      annotation = getAnnotation(method, Produces.class);
      if(annotation != null) {
        String[] apiProduces = ((Produces)annotation).value();
        for(String mediaType: apiProduces)
          operation.produces(mediaType);
      }
    }

    List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
    if(responseAnnotation != null) {
      for(ApiResponse apiResponse: responseAnnotation.value()) {
        Map<String,Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

        Response response = new Response()
          .description(apiResponse.message())
          .headers(responseHeaders);

        if(apiResponse.code() == 0)
          operation.defaultResponse(response);
        else
          operation.response(apiResponse.code(), response);

        if( StringUtils.isNotEmpty( apiResponse.reference() )){
          response.schema( new RefProperty( apiResponse.reference() ));
        } else if (!isVoid(apiResponse.response())) {
          responseType = apiResponse.response();
          final Property property = ModelConverters.getInstance().readAsProperty(responseType);
          if (property != null) {
            response.schema(ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property));
            appendModels(responseType);
          }
        }
      }
    }
    boolean isDeprecated = false;
    annotation = method.getAnnotation(Deprecated.class);
    if(annotation != null)
      isDeprecated = true;

    boolean hidden = false;
    if(apiOperation != null)
      hidden = apiOperation.hidden();

    // process parameters
    Type[] genericParameterTypes = method.getGenericParameterTypes();
    Annotation[][] paramAnnotations = method.getParameterAnnotations();
    for(int i = 0; i < genericParameterTypes.length; i++) {
      Type type = genericParameterTypes[i];
      List<Parameter> parameters = getParameters(type,Arrays.asList(paramAnnotations[i]));

      for(Parameter parameter : parameters) {
        operation.parameter(parameter);
      }
    }

    if(operation.getResponses() == null) {
      Response response = new Response().description(SUCCESSFUL_OPERATION);
      operation.defaultResponse(response);
    }
    return operation;
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513131944165\fstmerge_var2_337042136512083038
  }

File path: C:\download\ssmerge\swagger-core\revisions\rev_fbc78_3b06d\rev_rev_left_fbc78-rev_right_3b06d\modules\swagger-jaxrs\src\main\java\io\swagger\jaxrs\Reader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_13e8b_377ad\rev_13e8b-377ad.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_71a04_06cfb\rev_71a04-06cfb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_33f1e_0a966\rev_33f1e-0a966.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8de27_42abc\rev_8de27-42abc.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_42abc_819bb\rev_42abc-819bb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7ab94_69409\rev_7ab94-69409.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_12b1b_69409\rev_12b1b-69409.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_69409_3ceac\rev_69409-3ceac.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b0a95_80f88\rev_b0a95-80f88.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_437ad_aebb8\rev_437ad-aebb8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3eb3e_9ef65\rev_3eb3e-9ef65.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9ef65_0028c\rev_9ef65-0028c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_af5f3_6a928\rev_af5f3-6a928.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4e125_da6ee\rev_4e125-da6ee.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9d7c2_c4e00\rev_9d7c2-c4e00.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_eb610_c4e00\rev_eb610-c4e00.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_359c5_1ddf1\rev_359c5-1ddf1.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_dacf8_88495\rev_dacf8-88495.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_88495_994e5\rev_88495-994e5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f96ae_df7c8\rev_f96ae-df7c8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1ac40_c0a4e\rev_1ac40-c0a4e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b11d8_0e6d8\rev_b11d8-0e6d8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8a10e_f382a\rev_8a10e-f382a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_95182_5829d\rev_95182-5829d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d1cb7_38673\rev_d1cb7-38673.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_38673_6d5ac\rev_38673-6d5ac.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c35a0_32f73\rev_c35a0-32f73.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_13f39_1edfb\rev_13f39-1edfb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_29bba_efb2c\rev_29bba-efb2c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ef712_10b59\rev_ef712-10b59.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_acf99_e47fb\rev_acf99-e47fb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4a467_c16f4\rev_4a467-c16f4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1e6e9_d9583\rev_1e6e9-d9583.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_47535_5a3f6\rev_47535-5a3f6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8481b_81383\rev_8481b-81383.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7155d_3c00d\rev_7155d-3c00d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fe71f_cea99\rev_fe71f-cea99.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_efca8_679f3\rev_efca8-679f3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_805b1_b431e\rev_805b1-b431e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fdf13_f25e7\rev_fdf13-f25e7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e2422_afdc0\rev_e2422-afdc0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_69dbf_e253a\rev_69dbf-e253a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_164db_166c0\rev_164db-166c0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7b369_7ecec\rev_7b369-7ecec.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2338e_a2a9a\rev_2338e-a2a9a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e8848_b3d67\rev_e8848-b3d67.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_23625_53437\rev_23625-53437.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_36a5d_0553c\rev_36a5d-0553c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e67e1_9f3d5\rev_e67e1-9f3d5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2e30c_142fe\rev_2e30c-142fe.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_90405_7e915\rev_90405-7e915.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b4fbe_253bd\rev_b4fbe-253bd.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public static Method findMethod(Method methodToFind, Class<?> cls) {
        String methodToSearch = methodToFind.getName();
        Class<?>[] soughtForParameterType = methodToFind.getParameterTypes();
        Type[] soughtForGenericParameterType = methodToFind.getGenericParameterTypes();
        for (Method method : cls.getMethods()) {
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513137890315\fstmerge_var1_7080254516656789208
            if (method.getName().equals(methodToSearch) && method.getReturnType().isAssignableFrom(methodToFind.getReturnType())) {
                Class<?>[] srcParameterTypes = method.getParameterTypes();
                Type[] srcGenericParameterTypes = method.getGenericParameterTypes();
                if (soughtForParameterType.length == srcParameterTypes.length &&
                        soughtForGenericParameterType.length == srcGenericParameterTypes.length) {
                    if (hasIdenticalParameters(srcParameterTypes, soughtForParameterType, srcGenericParameterTypes, soughtForGenericParameterType)) {
                        return method;
                    }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513137890315\fstmerge_base_4711607478262348313
            if (!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType())) {
                continue;
            }
            Class<?>[] pt = method.getParameterTypes();
            Type[] gpt = method.getGenericParameterTypes();
            for (int j = 0; j < pTypes.length; j++) {
                Class<?> parameterType = pTypes[j];
                if (!(pt[j].equals(parameterType) || (!gpt[j].equals(gpTypes[j]) && pt[j].isAssignableFrom(parameterType)))) {
                    continue methodLoop;
=======
            if (
            	!method.getName().equals(methodToSearch) || 
            	!method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) ||
            	method.getParameterTypes().length != pTypes.length
            	) {
                continue;
            }
            Class<?>[] pt = method.getParameterTypes();
            Type[] gpt = method.getGenericParameterTypes();
            for (int j = 0; j < pTypes.length; j++) {
                Class<?> parameterType = pTypes[j];
                if (!(pt[j].equals(parameterType) || (!gpt[j].equals(gpTypes[j]) && pt[j].isAssignableFrom(parameterType)))) {
                    continue methodLoop;
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513137890315\fstmerge_var2_7448246620842351297
                }
            }
        }
        return null;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_b4fbe_253bd\rev_rev_left_b4fbe-rev_right_253bd\modules\swagger-jaxrs\src\main\java\io\swagger\jaxrs\utils\ReflectionUtils.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_91593_24c41\rev_91593-24c41.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9eb55_d174a\rev_9eb55-d174a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fe2f4_033d5\rev_fe2f4-033d5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1b637_89a93\rev_1b637-89a93.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_15e4d_e5594\rev_15e4d-e5594.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5928a_22782\rev_5928a-22782.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a3c2f_1f47f\rev_a3c2f-1f47f.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public static boolean isType(String type, String format) {
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513138874241\fstmerge_var1_5664038318893465476
        boolean formatMatchStringType = "uri".equals(format) || "url".equals(format);
        if ("string".equals(type) && (format == null || formatMatchStringType)) {
            return true;
        } else {
            return false;
        }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513138874241\fstmerge_base_1086729827225490048
        boolean formatMatchStringType = "uri".equals(format) || "byte".equals(format) || "url".equals(format);
        if ("string".equals(type) && (format == null || formatMatchStringType)) {
            return true;
        } else {
            return false;
        }
=======
        return TYPE.equals(type) && (format == null || Format.fromName(format) != null);
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513138874241\fstmerge_var2_7284142681956729098
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_a3c2f_1f47f\rev_rev_left_a3c2f-rev_right_1f47f\modules\swagger-models\src\main\java\io\swagger\models\properties\StringProperty.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fa093_62678\rev_fa093-62678.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5a287_087d5\rev_5a287-087d5.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fc66d_ec8e4\rev_fc66d-ec8e4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0d7cc_cd458\rev_0d7cc-cd458.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_477ea_8bd31\rev_477ea-8bd31.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4a588_eebd2\rev_4a588-eebd2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e199b_cc4e4\rev_e199b-cc4e4.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
Property propertyFromNode(JsonNode node) {
        final String type = getString(node, PropertyBuilder.PropertyId.TYPE);
        final String format = getString(node, PropertyBuilder.PropertyId.FORMAT);
        final String description = getString(node, PropertyBuilder.PropertyId.DESCRIPTION);
        final Xml xml = getXml(node);

        JsonNode detailNode = node.get("$ref");
        if (detailNode != null) {
            return new RefProperty(detailNode.asText()).description(description);
        }

        if (ObjectProperty.isType(type)) {
            detailNode = node.get("additionalProperties");
            if (detailNode != null) {
                Property items = propertyFromNode(detailNode);
                if (items != null) {
                    return new MapProperty(items).description(description);
                }
            } else {
              detailNode = node.get("properties");
              Map<String, Property> properties = new HashMap<String, Property>();
              if(detailNode != null){
                  for(Iterator<Map.Entry<String,JsonNode>> iter = detailNode.fields(); iter.hasNext();){
                      Map.Entry<String,JsonNode> field = iter.next();
                      Property property = propertyFromNode(field.getValue());
                      properties.put(field.getKey(), property);
                  }
              }
              return new ObjectProperty(properties);
            }
        }
        if (ArrayProperty.isType(type)) {
            detailNode = node.get("items");
            if (detailNode != null) {
                Property subProperty = propertyFromNode(detailNode);
                return new ArrayProperty().items(subProperty).description(description);
            }
        }

        final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
        args.put(PropertyBuilder.PropertyId.TYPE, type);
        args.put(PropertyBuilder.PropertyId.FORMAT, format);
        args.put(PropertyBuilder.PropertyId.DESCRIPTION, description);
        args.put(PropertyBuilder.PropertyId.EXAMPLE, getString(node, PropertyBuilder.PropertyId.EXAMPLE));
        args.put(PropertyBuilder.PropertyId.ENUM, getEnum(node, PropertyBuilder.PropertyId.ENUM));
        args.put(PropertyBuilder.PropertyId.TITLE, getString(node, PropertyBuilder.PropertyId.TITLE));
        args.put(PropertyBuilder.PropertyId.DEFAULT, getString(node, PropertyBuilder.PropertyId.DEFAULT));
        args.put(PropertyBuilder.PropertyId.PATTERN, getString(node, PropertyBuilder.PropertyId.PATTERN));
        args.put(PropertyBuilder.PropertyId.DESCRIMINATOR, getString(node, PropertyBuilder.PropertyId.DESCRIMINATOR));
        args.put(PropertyBuilder.PropertyId.MIN_ITEMS, getInteger(node, PropertyBuilder.PropertyId.MIN_ITEMS));
        args.put(PropertyBuilder.PropertyId.MAX_ITEMS, getInteger(node, PropertyBuilder.PropertyId.MAX_ITEMS));
        args.put(PropertyBuilder.PropertyId.MIN_PROPERTIES, getInteger(node, PropertyBuilder.PropertyId.MIN_PROPERTIES));
        args.put(PropertyBuilder.PropertyId.MAX_PROPERTIES, getInteger(node, PropertyBuilder.PropertyId.MAX_PROPERTIES));
        args.put(PropertyBuilder.PropertyId.MIN_LENGTH, getInteger(node, PropertyBuilder.PropertyId.MIN_LENGTH));
        args.put(PropertyBuilder.PropertyId.MAX_LENGTH, getInteger(node, PropertyBuilder.PropertyId.MAX_LENGTH));
        args.put(PropertyBuilder.PropertyId.MINIMUM, getDouble(node, PropertyBuilder.PropertyId.MINIMUM));
        args.put(PropertyBuilder.PropertyId.MAXIMUM, getDouble(node, PropertyBuilder.PropertyId.MAXIMUM));
        args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM));
        args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM));
        args.put(PropertyBuilder.PropertyId.UNIQUE_ITEMS, getBoolean(node, PropertyBuilder.PropertyId.UNIQUE_ITEMS));
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513139632552\fstmerge_var1_6121182394787007818
        args.put(PropertyBuilder.PropertyId.VENDOR_EXTENSIONS, getVendorExtensions(node));
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513139632552\fstmerge_base_503312974068607338
=======
        args.put(PropertyBuilder.PropertyId.READ_ONLY, getBoolean(node, PropertyBuilder.PropertyId.READ_ONLY));
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513139632552\fstmerge_var2_3213598135278855590

        Property output = PropertyBuilder.build(type, format, args);
        if (output == null) {
            LOGGER.warn("no property from " + type + ", " + format + ", " + args);
            return null;
        }
        output.setDescription(description);
        return output;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_e199b_cc4e4\rev_rev_left_e199b-rev_right_cc4e4\modules\swagger-core\src\main\java\io\swagger\util\PropertyDeserializer.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_90ba7_12288\rev_90ba7-12288.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e688d_2a936\rev_e688d-2a936.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8ef72_82d30\rev_8ef72-82d30.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_35379_4e702\rev_35379-4e702.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8e9ec_92ef7\rev_8e9ec-92ef7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3fba6_2773d\rev_3fba6-2773d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2c855_ceda3\rev_2c855-ceda3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d5ab2_8b4ed\rev_d5ab2-8b4ed.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_535d2_13d2f\rev_535d2-13d2f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b05f3_5bd87\rev_b05f3-5bd87.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_21211_4851d\rev_21211-4851d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ade30_5cb81\rev_ade30-5cb81.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5c2f6_8404f\rev_5c2f6-8404f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ba0ec_818d2\rev_ba0ec-818d2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ef66a_14e7f\rev_ef66a-14e7f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b8269_41cee\rev_b8269-41cee.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_88725_bc1ec\rev_88725-bc1ec.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ee9f2_6714f\rev_ee9f2-6714f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0d59e_6c0ac\rev_0d59e-6c0ac.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_72b58_0567e\rev_72b58-0567e.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513140585467\fstmerge_var1_6714371876495263207
@Test (description = "convert a model with object properties")
    public void readModelWithObjectProperty() throws IOException {
        String json = "{" +
                "   \"properties\":{" +
                "      \"id\":{" +
                "         \"type\":\"string\"" +
                "      }," +
                "      \"someObject\":{" +
                "         \"type\":\"object\"," +
                "        \"x-foo\": \"vendor x\"," +
                "         \"properties\":{" +
                "            \"innerId\":{" +
                "               \"type\":\"string\"" +
                "            }" +
                "         }" +
                "      }" +
                "   }" +
                "}";

        ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);

        Property p = model.getProperties().get("someObject");
        assertTrue(p instanceof ObjectProperty);

        ObjectProperty op = (ObjectProperty) p;

        Property sp = op.getProperties().get("innerId");
        assertTrue(sp instanceof StringProperty);

        assertTrue(op.getVendorExtensions() != null);
        assertNotNull(op.getVendorExtensions().get("x-foo"));
        assertEquals(op.getVendorExtensions().get("x-foo"), "vendor x");
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513140585467\fstmerge_base_8991472419235340933
@org.junit.Test //(description = "convert a model with object properties")
    public void readModelWithObjectProperty() throws IOException {
        String json = "{\n\"properties\": {\n\"id\": {\n\"type\": \"string\"\n},\n\"someObject\": {\n\"type\": \"object\",\n\"properties\": {\n\"innerId\": {\n\"type\": \"string\"\n}\n}\n}\n}\n}";

        ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);

        Property p = model.getProperties().get("someObject");
        assertTrue(p instanceof ObjectProperty);

        ObjectProperty op = (ObjectProperty) p;

        Property sp = op.getProperties().get("innerId");
        assertTrue(sp instanceof StringProperty);
=======
@Test (description = "convert a model with object properties")
    public void readModelWithObjectProperty() throws IOException {
        String json = "{" +
                "   \"properties\":{" +
                "      \"id\":{" +
                "         \"type\":\"string\"" +
                "      }," +
                "      \"someObject\":{" +
                "         \"type\":\"object\"," +
                "         \"properties\":{" +
                "            \"innerId\":{" +
                "               \"type\":\"string\"" +
                "            }" +
                "         }" +
                "      }" +
                "   }" +
                "}";

        ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);

        Property p = model.getProperties().get("someObject");
        assertTrue(p instanceof ObjectProperty);

        ObjectProperty op = (ObjectProperty) p;

        Property sp = op.getProperties().get("innerId");
        assertTrue(sp instanceof StringProperty);
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513140585467\fstmerge_var2_5442155800414338629
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_72b58_0567e\rev_rev_left_72b58-rev_right_0567e\modules\swagger-core\src\test\java\io\swagger\ObjectPropertyTest.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2360a_19f81\rev_2360a-19f81.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0d8ae_1e294\rev_0d8ae-1e294.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c15a6_3afa0\rev_c15a6-3afa0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2713b_e7260\rev_2713b-e7260.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6423d_4a62d\rev_6423d-4a62d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_500c7_efd7e\rev_500c7-efd7e.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 1
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boolean readHidden, String[] parentConsumes, String[] parentProduces, Map<String, Tag> parentTags, List<Parameter> parentParameters) {
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513141220128\fstmerge_var1_1586727812462843329
        Api api = (Api) cls.getAnnotation(Api.class);
        Map<String, SecurityScope> globalScopes = new HashMap<String, SecurityScope>();

        Map<String, Tag> tags = new HashMap<String, Tag>();
        List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();

        String[] consumes = new String[0];
        String[] produces = new String[0];
        final Set<Scheme> globalSchemes = EnumSet.noneOf(Scheme.class);

        // only read if allowing hidden apis OR api is not marked as hidden
        final boolean readable = (api != null && readHidden) || (api != null && !api.hidden());
        if (readable) {
            // the value will be used as a tag for 2.0 UNLESS a Tags annotation is present
            Set<String> tagStrings = extractTags(api);
            for (String tagString : tagStrings) {
                Tag tag = new Tag().name(tagString);
                tags.put(tagString, tag);
            }
            if (parentTags != null) {
                tags.putAll(parentTags);
            }
            for (String tagName : tags.keySet()) {
                swagger.tag(tags.get(tagName));
            }

            if (!api.produces().isEmpty()) {
                produces = new String[]{api.produces()};
            } else if (cls.getAnnotation(Produces.class) != null) {
                produces = ((Produces) cls.getAnnotation(Produces.class)).value();
            }
            if (!api.consumes().isEmpty()) {
                consumes = new String[]{api.consumes()};
            } else if (cls.getAnnotation(Consumes.class) != null) {
                consumes = ((Consumes) cls.getAnnotation(Consumes.class)).value();
            }
            globalSchemes.addAll(parseSchemes(api.protocols()));
            Authorization[] authorizations = api.authorizations();

            for (Authorization auth : authorizations) {
                if (auth.value() != null && !"".equals(auth.value())) {
                    SecurityRequirement security = new SecurityRequirement();
                    security.setName(auth.value());
                    AuthorizationScope[] scopes = auth.scopes();
                    for (AuthorizationScope scope : scopes) {
                        if (scope.scope() != null && !"".equals(scope.scope())) {
                            security.addScope(scope.scope());
                        }
                    }
                    securities.add(security);
                }
            }
        }

        // allow reading the JAX-RS APIs without @Api annotation
        if (readable || (api == null && config.isScanAllResources())) {
            // merge consumes, produces

            // look for method-level annotated properties

            // handle sub-resources by looking at return type

            final List<Parameter> globalParameters = new ArrayList<Parameter>();

            // look for constructor-level annotated properties
            globalParameters.addAll(ReaderUtils.collectConstructorParameters(cls, swagger));

            // look for field-level annotated properties
            globalParameters.addAll(ReaderUtils.collectFieldParameters(cls, swagger));

            // parse the method
            final javax.ws.rs.Path apiPath = cls.getAnnotation(javax.ws.rs.Path.class);
            Method methods[] = cls.getMethods();
            for (Method method : methods) {
                if (ReflectionUtils.isOverriddenMethod(method, cls)) {
                    continue;
                }
                javax.ws.rs.Path methodPath = ReflectionUtils.getAnnotation(method, javax.ws.rs.Path.class);

                String operationPath = getPath(apiPath, methodPath, parentPath);
                Map<String, String> regexMap = new HashMap<String, String>();
                operationPath = PathUtils.parsePath(operationPath, regexMap);
                if (operationPath != null) {
                    if (isIgnored(operationPath)) {
                        continue;
                    }

                    final ApiOperation apiOperation = ReflectionUtils.getAnnotation(method, ApiOperation.class);
                    String httpMethod = extractOperationMethod(apiOperation, method, SwaggerExtensions.chain());

                    Operation operation = null;
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) { 
                        operation = parseMethod(cls, method, globalParameters);
                    }
                    if (operation == null) {
                        continue;
                    }
                    if (parentParameters != null) {
                        for (Parameter param : parentParameters) {
                            operation.parameter(param);
                        }
                    }
                    for (Parameter param : operation.getParameters()) {
                        if (regexMap.get(param.getName()) != null) {
                            String pattern = regexMap.get(param.getName());
                            param.setPattern(pattern);
                        }
                    }

                    if (apiOperation != null) {
                        for (Scheme scheme : parseSchemes(apiOperation.protocols())) {
                            operation.scheme(scheme);
                        }
                    }

                    if (operation.getSchemes() == null || operation.getSchemes().isEmpty()) {
                        for (Scheme scheme : globalSchemes) {
                            operation.scheme(scheme);
                        }
                    }

                    String[] apiConsumes = consumes;
                    if (parentConsumes != null) {
                        Set<String> both = new HashSet<String>(Arrays.asList(apiConsumes));
                        both.addAll(new HashSet<String>(Arrays.asList(parentConsumes)));
                        if (operation.getConsumes() != null) {
                            both.addAll(new HashSet<String>(operation.getConsumes()));
                        }
                        apiConsumes = both.toArray(new String[both.size()]);
                    }

                    String[] apiProduces = produces;
                    if (parentProduces != null) {
                        Set<String> both = new HashSet<String>(Arrays.asList(apiProduces));
                        both.addAll(new HashSet<String>(Arrays.asList(parentProduces)));
                        if (operation.getProduces() != null) {
                            both.addAll(new HashSet<String>(operation.getProduces()));
                        }
                        apiProduces = both.toArray(new String[both.size()]);
                    }
                    final Class<?> subResource = getSubResource(method);
                    if (subResource != null) {
                        read(subResource, operationPath, httpMethod, true, apiConsumes, apiProduces, tags, operation.getParameters());
                    }

                    // can't continue without a valid http method
                    httpMethod = httpMethod == null ? parentMethod : httpMethod;
                    if (httpMethod != null) {
                        if (apiOperation != null) {
                            boolean hasExplicitTag = false;
                            for (String tag : apiOperation.tags()) {
                                if (!"".equals(tag)) {
                                    operation.tag(tag);
                                    swagger.tag(new Tag().name(tag));
                                }
                            }

                            if (operation != null) {
                                addExtensionProperties(apiOperation.extensions(), operation.getVendorExtensions());
                            }
                        }
                        if (operation != null) {
                            if (operation.getConsumes() == null) {
                                for (String mediaType : apiConsumes) {
                                    operation.consumes(mediaType);
                                }
                            }
                            if (operation.getProduces() == null) {
                                for (String mediaType : apiProduces) {
                                    operation.produces(mediaType);
                                }
                            }

                            if (operation.getTags() == null) {
                                for (String tagString : tags.keySet()) {
                                    operation.tag(tagString);
                                }
                            }
                            // Only add global @Api securities if operation doesn't already have more specific securities
                            if (operation.getSecurity() == null) {
                                for (SecurityRequirement security : securities) {
                                    operation.security(security);
                                }
                            }

                            Path path = swagger.getPath(operationPath);
                            if (path == null) {
                                path = new Path();
                                swagger.path(operationPath, path);
                            }
                            path.set(httpMethod, operation);

                            readImplicitParameters(method, operation);
                        }
                    }
                }
            }
        }

        return swagger;
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513141220128\fstmerge_base_5127333953633542223
        Api api = (Api) cls.getAnnotation(Api.class);
        Map<String, SecurityScope> globalScopes = new HashMap<String, SecurityScope>();

        Map<String, Tag> tags = new HashMap<String, Tag>();
        List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();

        String[] consumes = new String[0];
        String[] produces = new String[0];
        final Set<Scheme> globalSchemes = EnumSet.noneOf(Scheme.class);

        // only read if allowing hidden apis OR api is not marked as hidden
        final boolean readable = (api != null && readHidden) || (api != null && !api.hidden());
        if (readable) {
            // the value will be used as a tag for 2.0 UNLESS a Tags annotation is present
            Set<String> tagStrings = extractTags(api);
            for (String tagString : tagStrings) {
                Tag tag = new Tag().name(tagString);
                tags.put(tagString, tag);
            }
            if (parentTags != null) {
                tags.putAll(parentTags);
            }
            for (String tagName : tags.keySet()) {
                swagger.tag(tags.get(tagName));
            }

            if (!api.produces().isEmpty()) {
                produces = new String[]{api.produces()};
            } else if (cls.getAnnotation(Produces.class) != null) {
                produces = ((Produces) cls.getAnnotation(Produces.class)).value();
            }
            if (!api.consumes().isEmpty()) {
                consumes = new String[]{api.consumes()};
            } else if (cls.getAnnotation(Consumes.class) != null) {
                consumes = ((Consumes) cls.getAnnotation(Consumes.class)).value();
            }
            globalSchemes.addAll(parseSchemes(api.protocols()));
            Authorization[] authorizations = api.authorizations();

            for (Authorization auth : authorizations) {
                if (auth.value() != null && !"".equals(auth.value())) {
                    SecurityRequirement security = new SecurityRequirement();
                    security.setName(auth.value());
                    AuthorizationScope[] scopes = auth.scopes();
                    for (AuthorizationScope scope : scopes) {
                        if (scope.scope() != null && !"".equals(scope.scope())) {
                            security.addScope(scope.scope());
                        }
                    }
                    securities.add(security);
                }
            }
        }

        // allow reading the JAX-RS APIs without @Api annotation
        if (readable || (api == null && config.isScanAllResources())) {
            // merge consumes, produces

            // look for method-level annotated properties

            // handle sub-resources by looking at return type

            final List<Parameter> globalParameters = new ArrayList<Parameter>();

            // look for constructor-level annotated properties
            globalParameters.addAll(ReaderUtils.collectConstructorParameters(cls, swagger));

            // look for field-level annotated properties
            globalParameters.addAll(ReaderUtils.collectFieldParameters(cls, swagger));

            // parse the method
            final javax.ws.rs.Path apiPath = cls.getAnnotation(javax.ws.rs.Path.class);
            Method methods[] = cls.getMethods();
            for (Method method : methods) {
                if (ReflectionUtils.isOverriddenMethod(method, cls)) {
                    continue;
                }
                javax.ws.rs.Path methodPath = getAnnotation(method, javax.ws.rs.Path.class);

                String operationPath = getPath(apiPath, methodPath, parentPath);
                Map<String, String> regexMap = new HashMap<String, String>();
                operationPath = PathUtils.parsePath(operationPath, regexMap);
                if (operationPath != null) {
                    if (isIgnored(operationPath)) {
                        continue;
                    }

                    final ApiOperation apiOperation = getAnnotation(method, ApiOperation.class);
                    String httpMethod = extractOperationMethod(apiOperation, method, SwaggerExtensions.chain());

                    Operation operation = null;
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) { 
                        operation = parseMethod(cls, method, globalParameters);
                    }
                    if (operation == null) {
                        continue;
                    }
                    if (parentParameters != null) {
                        for (Parameter param : parentParameters) {
                            operation.parameter(param);
                        }
                    }
                    for (Parameter param : operation.getParameters()) {
                        if (regexMap.get(param.getName()) != null) {
                            String pattern = regexMap.get(param.getName());
                            param.setPattern(pattern);
                        }
                    }

                    if (apiOperation != null) {
                        for (Scheme scheme : parseSchemes(apiOperation.protocols())) {
                            operation.scheme(scheme);
                        }
                    }

                    if (operation.getSchemes() == null || operation.getSchemes().isEmpty()) {
                        for (Scheme scheme : globalSchemes) {
                            operation.scheme(scheme);
                        }
                    }

                    String[] apiConsumes = consumes;
                    if (parentConsumes != null) {
                        Set<String> both = new HashSet<String>(Arrays.asList(apiConsumes));
                        both.addAll(new HashSet<String>(Arrays.asList(parentConsumes)));
                        if (operation.getConsumes() != null) {
                            both.addAll(new HashSet<String>(operation.getConsumes()));
                        }
                        apiConsumes = both.toArray(new String[both.size()]);
                    }

                    String[] apiProduces = produces;
                    if (parentProduces != null) {
                        Set<String> both = new HashSet<String>(Arrays.asList(apiProduces));
                        both.addAll(new HashSet<String>(Arrays.asList(parentProduces)));
                        if (operation.getProduces() != null) {
                            both.addAll(new HashSet<String>(operation.getProduces()));
                        }
                        apiProduces = both.toArray(new String[both.size()]);
                    }
                    final Class<?> subResource = getSubResource(method);
                    if (subResource != null) {
                        read(subResource, operationPath, httpMethod, true, apiConsumes, apiProduces, tags, operation.getParameters());
                    }

                    // can't continue without a valid http method
                    httpMethod = httpMethod == null ? parentMethod : httpMethod;
                    if (httpMethod != null) {
                        if (apiOperation != null) {
                            boolean hasExplicitTag = false;
                            for (String tag : apiOperation.tags()) {
                                if (!"".equals(tag)) {
                                    operation.tag(tag);
                                    swagger.tag(new Tag().name(tag));
                                }
                            }

                            if (operation != null) {
                                addExtensionProperties(apiOperation.extensions(), operation.getVendorExtensions());
                            }
                        }
                        if (operation != null) {
                            if (operation.getConsumes() == null) {
                                for (String mediaType : apiConsumes) {
                                    operation.consumes(mediaType);
                                }
                            }
                            if (operation.getProduces() == null) {
                                for (String mediaType : apiProduces) {
                                    operation.produces(mediaType);
                                }
                            }

                            if (operation.getTags() == null) {
                                for (String tagString : tags.keySet()) {
                                    operation.tag(tagString);
                                }
                            }
                            // Only add global @Api securities if operation doesn't already have more specific securities
                            if (operation.getSecurity() == null) {
                                for (SecurityRequirement security : securities) {
                                    operation.security(security);
                                }
                            }

                            Path path = swagger.getPath(operationPath);
                            if (path == null) {
                                path = new Path();
                                swagger.path(operationPath, path);
                            }
                            path.set(httpMethod, operation);

                            readImplicitParameters(method, operation);
                        }
                    }
                }
            }
        }

        return swagger;
=======
        return read(cls, parentPath, parentMethod, readHidden, parentConsumes, parentProduces, parentTags, parentParameters, new HashSet<Class<?>>());
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513141220128\fstmerge_var2_5066741249416616450
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_500c7_efd7e\rev_rev_left_500c7-rev_right_efd7e\modules\swagger-jaxrs\src\main\java\io\swagger\jaxrs\Reader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b5768_2506a\rev_b5768-2506a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ed60d_0d6c9\rev_ed60d-0d6c9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_40ba4_798eb\rev_40ba4-798eb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9ccad_6761d\rev_9ccad-6761d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f6542_0ffb0\rev_f6542-0ffb0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_646d3_be46b\rev_646d3-be46b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_69b95_c322b\rev_69b95-c322b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ddd3a_dc70b\rev_ddd3a-dc70b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_68903_91a4d\rev_68903-91a4d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5d0b8_4ddb6\rev_5d0b8-4ddb6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d492b_6de48\rev_d492b-6de48.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fc91c_16a8b\rev_fc91c-16a8b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e655e_5fe87\rev_e655e-5fe87.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_739b6_daa0a\rev_739b6-daa0a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ac4ec_41a6a\rev_ac4ec-41a6a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_468a3_ba0dc\rev_468a3-ba0dc.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_34309_a5126\rev_34309-a5126.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_feedc_83781\rev_feedc-83781.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_83781_798bf\rev_83781-798bf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_81ed7_48375\rev_81ed7-48375.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5576a_da61c\rev_5576a-da61c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_560af_f9909\rev_560af-f9909.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_75394_6b619\rev_75394-6b619.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ffa65_6999a\rev_ffa65-6999a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4b174_4e7a8\rev_4b174-4e7a8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_05475_deda3\rev_05475-deda3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6de2d_6f801\rev_6de2d-6f801.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a906d_62058\rev_a906d-62058.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a906d_941a0\rev_a906d-941a0.revisions
Conflict type: EditSameMC
Number of Conflicts: 2
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 2, 0, 0
Conflict body: 
public Model resolve(JavaType type, ModelConverterContext context, Iterator<ModelConverter> next) {
        if (type.isEnumType() || PrimitiveType.fromType(type) != null) {
            // We don't build models for primitive types
            return null;
        }

        final BeanDescription beanDesc = _mapper.getSerializationConfig().introspect(type);
        // Couple of possibilities for defining
        String name = _typeName(type, beanDesc);

        if ("Object".equals(name)) {
            return new ModelImpl();
        }

        final ModelImpl model = new ModelImpl().type(ModelImpl.OBJECT).name(name)
                .description(_description(beanDesc.getClassInfo()));

        if (!type.isContainerType()) {
            // define the model here to support self/cyclic referencing of models
            context.defineModel(name, model, type, null);
        }

        if (type.isContainerType()) {
            // We treat collections as primitive types, just need to add models for values (if any)
            context.resolve(type.getContentType());
            return null;
        }
        // if XmlRootElement annotation, construct an Xml object and attach it to the model
        XmlRootElement rootAnnotation = beanDesc.getClassAnnotations().get(XmlRootElement.class);
        if (rootAnnotation != null && !"".equals(rootAnnotation.name()) && !"##default".equals(rootAnnotation.name())) {
            LOGGER.debug(rootAnnotation.toString());
            Xml xml = new Xml()
                    .name(rootAnnotation.name());
            if (rootAnnotation.namespace() != null && !"".equals(rootAnnotation.namespace()) && !"##default".equals(rootAnnotation.namespace())) {
                xml.namespace(rootAnnotation.namespace());
            }
            model.xml(xml);
        }

        // see if @JsonIgnoreProperties exist
        Set<String> propertiesToIgnore = new HashSet<String>();
        JsonIgnoreProperties ignoreProperties = beanDesc.getClassAnnotations().get(JsonIgnoreProperties.class);
        if (ignoreProperties != null) {
            propertiesToIgnore.addAll(Arrays.asList(ignoreProperties.value()));
        }

        final ApiModel apiModel = beanDesc.getClassAnnotations().get(ApiModel.class);
        String disc = (apiModel == null) ? "" : apiModel.discriminator();

        if (apiModel != null && StringUtils.isNotEmpty(apiModel.reference())) {
            model.setReference(apiModel.reference());
        }

        if (disc.isEmpty()) {
            // longer method would involve AnnotationIntrospector.findTypeResolver(...) but:
            JsonTypeInfo typeInfo = beanDesc.getClassAnnotations().get(JsonTypeInfo.class);
            if (typeInfo != null) {
                disc = typeInfo.property();
            }
        }
        if (!disc.isEmpty()) {
            model.setDiscriminator(disc);
        }

        List<Property> props = new ArrayList<Property>();
        for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {
            Property property = null;
            String propName = propDef.getName();
            Annotation[] annotations = null;

            // hack to avoid clobbering properties with get/is names
            // it's ugly but gets around https://github.com/swagger-api/swagger-core/issues/415
            if (propDef.getPrimaryMember() != null) {
                java.lang.reflect.Member member = propDef.getPrimaryMember().getMember();
                if (member != null) {
                    String altName = member.getName();
                    if (altName != null) {
                        final int length = altName.length();
                        for (String prefix : Arrays.asList("get", "is")) {
                            final int offset = prefix.length();
                            if (altName.startsWith(prefix) && length > offset
                                    && !Character.isUpperCase(altName.charAt(offset))) {
                                propName = altName;
                                break;
                            }
                        }
                    }
                }
            }

            PropertyMetadata md = propDef.getMetadata();

            boolean hasSetter = false, hasGetter = false;
            if (propDef.getSetter() == null) {
                hasSetter = false;
            } else {
                hasSetter = true;
            }
            if (propDef.getGetter() != null) {
                JsonProperty pd = propDef.getGetter().getAnnotation(JsonProperty.class);
                if (pd != null) {
                    hasGetter = true;
                }
            }
            Boolean isReadOnly = null;
            if (!hasSetter & hasGetter) {
                isReadOnly = Boolean.TRUE;
            } else {
                isReadOnly = Boolean.FALSE;
            }

            final AnnotatedMember member = propDef.getPrimaryMember();

            if (member != null && !propertiesToIgnore.contains(propName)) {
                List<Annotation> annotationList = new ArrayList<Annotation>();
                for (Annotation a : member.annotations()) {
                    annotationList.add(a);
                }

                annotations = annotationList.toArray(new Annotation[annotationList.size()]);

                ApiModelProperty mp = member.getAnnotation(ApiModelProperty.class);

                if(mp != null && mp.readOnly()) {
                  isReadOnly = mp.readOnly();
                }

                JavaType propType = member.getType(beanDesc.bindingsForBeanType());

                // allow override of name from annotation
                if (mp != null && !mp.name().isEmpty()) {
                    propName = mp.name();
                }

                if (mp != null && !mp.dataType().isEmpty()) {
                    String or = mp.dataType();

                    JavaType innerJavaType = null;
                    LOGGER.debug("overriding datatype from " + propType + " to " + or);

                    if (or.toLowerCase().startsWith("list[")) {
                        String innerType = or.substring(5, or.length() - 1);
                        ArrayProperty p = new ArrayProperty();
                        Property primitiveProperty = PrimitiveType.createProperty(innerType);
                        if (primitiveProperty != null) {
                            p.setItems(primitiveProperty);
                        } else {
                            innerJavaType = getInnerType(innerType);
                            p.setItems(context.resolveProperty(innerJavaType, annotations));
                        }
                        property = p;
                    } else if (or.toLowerCase().startsWith("map[")) {
                        int pos = or.indexOf(",");
                        if (pos > 0) {
                            String innerType = or.substring(pos + 1, or.length() - 1);
                            MapProperty p = new MapProperty();
                            Property primitiveProperty = PrimitiveType.createProperty(innerType);
                            if (primitiveProperty != null) {
                                p.setAdditionalProperties(primitiveProperty);
                            } else {
                                innerJavaType = getInnerType(innerType);
                                p.setAdditionalProperties(context.resolveProperty(innerJavaType, annotations));
                            }
                            property = p;
                        }
                    } else {
                        Property primitiveProperty = PrimitiveType.createProperty(or);
                        if (primitiveProperty != null) {
                            property = primitiveProperty;
                        } else {
                            innerJavaType = getInnerType(or);
                            property = context.resolveProperty(innerJavaType, annotations);
                        }
                    }
                    if (innerJavaType != null) {
                        context.resolve(innerJavaType);
                    }
                }

                // no property from override, construct from propType
                if (property == null) {
                    if (mp != null && StringUtils.isNotEmpty(mp.reference())) {
                        property = new RefProperty(mp.reference());
                    } else if (member.getAnnotation(JsonIdentityInfo.class) != null) {
                        property = GeneratorWrapper.processJsonIdentity(propType, context, _mapper,
                                member.getAnnotation(JsonIdentityInfo.class),
                                member.getAnnotation(JsonIdentityReference.class));
                    }
                    if (property == null) {
                        property = context.resolveProperty(propType, annotations);
                    }
                }

                if (property != null) {
                    property.setName(propName);

                    if (mp != null && !mp.access().isEmpty()) {
                        property.setAccess(mp.access());
                    }

                    Boolean required = md.getRequired();
                    if (required != null) {
                        property.setRequired(required);
                    }

                    String description = _intr.findPropertyDescription(member);
                    if (description != null && !"".equals(description)) {
                        property.setDescription(description);
                    }

                    Integer index = _intr.findPropertyIndex(member);
                    if (index != null) {
                        property.setPosition(index);
                    }
                    property.setDefault(_findDefaultValue(member));
                    property.setExample(_findExampleValue(member));
                    property.setReadOnly(_findReadOnly(member));

                    if (property.getReadOnly() == null) {
                        if (isReadOnly) {
                            property.setReadOnly(isReadOnly);
                        }
                    }
                    if (mp != null) {
                        final AllowableValues allowableValues = AllowableValuesUtils.create(mp.allowableValues());
                        if (allowableValues != null) {
                            final Map<PropertyBuilder.PropertyId, Object> args = allowableValues.asPropertyArguments();
                            PropertyBuilder.merge(property, args);
                        }
                    }
                    JAXBAnnotationsHelper.apply(member, property);
                    applyBeanValidatorAnnotations(property, annotations);
                    props.add(property);
                }
            }
        }

<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_var1_7996436912232868783
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_base_8818948161353690748
        if (!resolveSubtypes(model, beanDesc, context)) {
            model.setDiscriminator(null);
        }

=======

>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_var2_925825304235549135
        Collections.sort(props, getPropertyComparator());

        Map<String, Property> modelProps = new LinkedHashMap<String, Property>();
        for (Property prop : props) {
            modelProps.put(prop.getName(), prop);
        }
        model.setProperties(modelProps);
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_var1_7996436912232868783

        if (!resolveSubtypes(model, beanDesc, context)) {
            model.setDiscriminator(null);
        }

||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_base_8818948161353690748
=======

        /**
         * This must be done after model.setProperties so that the model's set
         * of properties is available to filter from any subtypes
         **/
        if (!resolveSubtypes(model, beanDesc, context)) {
            model.setDiscriminator(null);
        }
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143177426\fstmerge_var2_925825304235549135
        return model;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_a906d_941a0\rev_rev_left_a906d-rev_right_941a0\modules\swagger-core\src\main\java\io\swagger\jackson\ModelResolver.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3c4c9_afa3c\rev_3c4c9-afa3c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c6ee7_e96fc\rev_c6ee7-e96fc.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6fc3a_262f8\rev_6fc3a-262f8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_43c7f_f1585\rev_43c7f-f1585.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_11e68_8ad52\rev_11e68-8ad52.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_00117_17587\rev_00117-17587.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 1
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public WebXMLReader(ServletConfig servletConfig) {
        apiVersion = servletConfig.getInitParameter("api.version");
        if (apiVersion == null) {
            apiVersion = "Swagger Server";
        }

<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143880144\fstmerge_var1_2241012741093340653
        basePath = servletConfig.getInitParameter("swagger.api.basepath");
        title = servletConfig.getInitParameter("swagger.api.title");
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143880144\fstmerge_base_6387522962216248693
        String shouldPrettyPrint = servletConfig.getInitParameter("swagger.pretty.print");
        if (shouldPrettyPrint != null) {
            scanner.setPrettyPrint(Boolean.parseBoolean(shouldPrettyPrint));
        }
        basePath = servletConfig.getInitParameter("swagger.api.basepath");
        title = servletConfig.getInitParameter("swagger.api.title");
=======
        String shouldPrettyPrint = servletConfig.getInitParameter("swagger.pretty.print");
        if (shouldPrettyPrint != null) {
            scanner.setPrettyPrint(Boolean.parseBoolean(shouldPrettyPrint));
        }

        // we support full base path (i.e full URL to the server) or just base path
        this.host = servletConfig.getInitParameter("swagger.api.host");
        String schemesString = servletConfig.getInitParameter("swagger.api.schemes");

        // split the CSV string and update the `schemes` variable
        if(schemesString != null) {
            String[] parts = schemesString.split(",");
            List<String> schemes = new ArrayList<String>();
            for(String scheme : parts) {
                String s = scheme.trim();
                if(!s.isEmpty()) {
                    schemes.add(s);
                }
            }
            this.schemes = schemes.toArray(new String[schemes.size()]);
        }
        this.title = servletConfig.getInitParameter("swagger.api.title");

>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513143880144\fstmerge_var2_7858688699981779850
        if (title == null) {
            title = "";
        }

        this.basePath = servletConfig.getInitParameter("swagger.api.basepath");
        if (basePath != null) {
            String[] parts = basePath.split("://");
            if (parts.length > 1) {
                int pos = parts[1].indexOf("/");
                if (pos >= 0) {
                    this.schemes = new String[]{parts[0]};
                    basePath = parts[1].substring(pos);
                    host = parts[1].substring(0, pos);
                } else {
                    this.schemes = new String[]{parts[0]};
                    basePath = null;
                    host = parts[1];
                }
            }
            else {
                // it is a proper basePath, nothing to do
            }
        }

        filterClass = servletConfig.getInitParameter("swagger.filter");
        if (filterClass != null) {
            try {
                SwaggerSpecFilter filter = (SwaggerSpecFilter) Class.forName(filterClass).newInstance();
                if (filter != null) {
                    FilterFactory.setFilter(filter);
                }
            } catch (Exception e) {
                LOGGER.error("failed to load filter", e);
            }
        }
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_00117_17587\rev_rev_left_00117-rev_right_17587\modules\swagger-jaxrs\src\main\java\io\swagger\jaxrs\config\WebXMLReader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d319d_cd85f\rev_d319d-cd85f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_914c1_422b9\rev_914c1-422b9.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_37547_d0f25\rev_37547-d0f25.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d90a3_353fe\rev_d90a3-353fe.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1064c_75b33\rev_1064c-75b33.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_50a02_42bfa\rev_50a02-42bfa.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a7645_83793\rev_a7645-83793.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_4e665_27103\rev_4e665-27103.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_cfa59_e1dcf\rev_cfa59-e1dcf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d2ba9_78834\rev_d2ba9-78834.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9a99b_6f238\rev_9a99b-6f238.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_74fa4_30886\rev_74fa4-30886.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0bfdc_a95ef\rev_0bfdc-a95ef.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b0bdc_77d0f\rev_b0bdc-77d0f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_aa6a4_94692\rev_aa6a4-94692.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e10dc_4fa16\rev_e10dc-4fa16.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c7ef0_c6922\rev_c7ef0-c6922.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513144912302\fstmerge_var1_57151349360380867
private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globalParameters) {
        Operation operation = new Operation();

        ApiOperation apiOperation = ReflectionUtils.getAnnotation(method, ApiOperation.class);
        ApiResponses responseAnnotation = ReflectionUtils.getAnnotation(method, ApiResponses.class);

        String operationId = method.getName();
        String responseContainer = null;

        Type responseType = null;
        Map<String, Property> defaultResponseHeaders = new HashMap<String, Property>();

        if (apiOperation != null) {
            if (apiOperation.hidden()) {
                return null;
            }
            if (!"".equals(apiOperation.nickname())) {
                operationId = apiOperation.nickname();
            }

            defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

            operation
                    .summary(apiOperation.value())
                    .description(apiOperation.notes());

            if (apiOperation.response() != null && !isVoid(apiOperation.response())) {
                responseType = apiOperation.response();
            }
            if (!"".equals(apiOperation.responseContainer())) {
                responseContainer = apiOperation.responseContainer();
            }
            if (apiOperation.authorizations() != null) {
                List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
                for (Authorization auth : apiOperation.authorizations()) {
                    if (auth.value() != null && !"".equals(auth.value())) {
                        SecurityRequirement security = new SecurityRequirement();
                        security.setName(auth.value());
                        AuthorizationScope[] scopes = auth.scopes();
                        for (AuthorizationScope scope : scopes) {
                            if (scope.scope() != null && !"".equals(scope.scope())) {
                                security.addScope(scope.scope());
                            }
                        }
                        securities.add(security);
                    }
                }
                if (securities.size() > 0) {
                    for (SecurityRequirement sec : securities) {
                        operation.security(sec);
                    }
                }
            }
            if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
                String[] consumesAr = ReaderUtils.splitContentValues(new String[] {apiOperation.consumes()});
                for (String consume: consumesAr) {
                    operation.consumes(consume);
                }
            }
            if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
                String[] producesAr = ReaderUtils.splitContentValues(new String[] {apiOperation.produces()});
                for (String produce: producesAr) {
                    operation.produces(produce);
                }
            }
        }

        if (apiOperation != null && StringUtils.isNotEmpty(apiOperation.responseReference())) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            response.schema(new RefProperty(apiOperation.responseReference()));
            operation.addResponse(String.valueOf(apiOperation.code()), response);
        } else if (responseType == null) {
            // pick out response from method declaration
            LOGGER.debug("picking up response class from method " + method);
            responseType = method.getGenericReturnType();
        }
        if (isValidResponse(responseType)) {
            final Property property = ModelConverters.getInstance().readAsProperty(responseType);
            if (property != null) {
                final Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
                final int responseCode = apiOperation == null ? 200 : apiOperation.code();
                operation.response(responseCode, new Response().description(SUCCESSFUL_OPERATION).schema(responseProperty)
                        .headers(defaultResponseHeaders));
                appendModels(responseType);
            }
        }

        operation.operationId(operationId);

        if (operation.getConsumes() == null || operation.getConsumes().isEmpty()) {
            final Consumes consumes = ReflectionUtils.getAnnotation(method, Consumes.class);
            if (consumes != null) {
                for (String mediaType : ReaderUtils.splitContentValues(consumes.value())) {
                    operation.consumes(mediaType);
                }
            }
        }

        if (operation.getProduces() == null || operation.getProduces().isEmpty()) {
            final Produces produces = ReflectionUtils.getAnnotation(method, Produces.class);
            if (produces != null) {
                for (String mediaType : ReaderUtils.splitContentValues(produces.value())) {
                    operation.produces(mediaType);
                }
            }
        }

        List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
        if (responseAnnotation != null) {
            apiResponses.addAll(Arrays.asList(responseAnnotation.value()));
        }

        Class<?>[] exceptionTypes = method.getExceptionTypes();
        for (Class<?> exceptionType : exceptionTypes) {
            ApiResponses exceptionResponses = ReflectionUtils.getAnnotation(exceptionType, ApiResponses.class);
            if (exceptionResponses != null) {
                apiResponses.addAll(Arrays.asList(exceptionResponses.value()));
            }
        }

        for (ApiResponse apiResponse : apiResponses) {
            Map<String, Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

            Response response = new Response()
                    .description(apiResponse.message())
                    .headers(responseHeaders);

            if (apiResponse.code() == 0) {
                operation.defaultResponse(response);
            } else {
                operation.response(apiResponse.code(), response);
            }

            if (StringUtils.isNotEmpty(apiResponse.reference())) {
                response.schema(new RefProperty(apiResponse.reference()));
            } else if (!isVoid(apiResponse.response())) {
                responseType = apiResponse.response();
                final Property property = ModelConverters.getInstance().readAsProperty(responseType);
                if (property != null) {
                    response.schema(ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property));
                    appendModels(responseType);
                }
            }
        }
        if (ReflectionUtils.getAnnotation(method, Deprecated.class) != null) {
            operation.setDeprecated(true);
        }

        // process parameters
        for (Parameter globalParameter : globalParameters) {
            operation.parameter(globalParameter);
        }

        Type[] genericParameterTypes = method.getGenericParameterTypes();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();
        for (int i = 0; i < genericParameterTypes.length; i++) {
            final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
            List<Parameter> parameters = getParameters(type, Arrays.asList(paramAnnotations[i]));

            for (Parameter parameter : parameters) {
                operation.parameter(parameter);
            }
        }

        if (operation.getResponses() == null) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            operation.defaultResponse(response);
        }
        return operation;
    }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513144912302\fstmerge_base_6576103420336361922
private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globalParameters) {
        Operation operation = new Operation();

        ApiOperation apiOperation = ReflectionUtils.getAnnotation(method, ApiOperation.class);
        ApiResponses responseAnnotation = ReflectionUtils.getAnnotation(method, ApiResponses.class);

        String operationId = method.getName();
        String responseContainer = null;

        Type responseType = null;
        Map<String, Property> defaultResponseHeaders = new HashMap<String, Property>();

        if (apiOperation != null) {
            if (apiOperation.hidden()) {
                return null;
            }
            if (!"".equals(apiOperation.nickname())) {
                operationId = apiOperation.nickname();
            }

            defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

            operation
                    .summary(apiOperation.value())
                    .description(apiOperation.notes());

            if (apiOperation.response() != null && !isVoid(apiOperation.response())) {
                responseType = apiOperation.response();
            }
            if (!"".equals(apiOperation.responseContainer())) {
                responseContainer = apiOperation.responseContainer();
            }
            if (apiOperation.authorizations() != null) {
                List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
                for (Authorization auth : apiOperation.authorizations()) {
                    if (auth.value() != null && !"".equals(auth.value())) {
                        SecurityRequirement security = new SecurityRequirement();
                        security.setName(auth.value());
                        AuthorizationScope[] scopes = auth.scopes();
                        for (AuthorizationScope scope : scopes) {
                            if (scope.scope() != null && !"".equals(scope.scope())) {
                                security.addScope(scope.scope());
                            }
                        }
                        securities.add(security);
                    }
                }
                if (securities.size() > 0) {
                    for (SecurityRequirement sec : securities) {
                        operation.security(sec);
                    }
                }
            }
            if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
                operation.consumes(apiOperation.consumes());
            }
            if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
                operation.produces(apiOperation.produces());
            }
        }

        if (apiOperation != null && StringUtils.isNotEmpty(apiOperation.responseReference())) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            response.schema(new RefProperty(apiOperation.responseReference()));
            operation.addResponse(String.valueOf(apiOperation.code()), response);
        } else if (responseType == null) {
            // pick out response from method declaration
            LOGGER.debug("picking up response class from method " + method);
            responseType = method.getGenericReturnType();
        }
        if (isValidResponse(responseType)) {
            final Property property = ModelConverters.getInstance().readAsProperty(responseType);
            if (property != null) {
                final Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
                final int responseCode = apiOperation == null ? 200 : apiOperation.code();
                operation.response(responseCode, new Response().description(SUCCESSFUL_OPERATION).schema(responseProperty)
                        .headers(defaultResponseHeaders));
                appendModels(responseType);
            }
        }

        operation.operationId(operationId);

        if (apiOperation != null && apiOperation.consumes() != null && apiOperation.consumes().isEmpty()) {
            final Consumes consumes = ReflectionUtils.getAnnotation(method, Consumes.class);
            if (consumes != null) {
                for (String mediaType : ReaderUtils.splitContentValues(consumes.value())) {
                    operation.consumes(mediaType);
                }
            }
        }

        if (apiOperation != null && apiOperation.produces() != null && apiOperation.produces().isEmpty()) {
            final Produces produces = ReflectionUtils.getAnnotation(method, Produces.class);
            if (produces != null) {
                for (String mediaType : ReaderUtils.splitContentValues(produces.value())) {
                    operation.produces(mediaType);
                }
            }
        }

        List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
        if (responseAnnotation != null) {
            apiResponses.addAll(Arrays.asList(responseAnnotation.value()));
        }

        Class<?>[] exceptionTypes = method.getExceptionTypes();
        for (Class<?> exceptionType : exceptionTypes) {
            ApiResponses exceptionResponses = ReflectionUtils.getAnnotation(exceptionType, ApiResponses.class);
            if (exceptionResponses != null) {
                apiResponses.addAll(Arrays.asList(exceptionResponses.value()));
            }
        }

        for (ApiResponse apiResponse : apiResponses) {
            Map<String, Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

            Response response = new Response()
                    .description(apiResponse.message())
                    .headers(responseHeaders);

            if (apiResponse.code() == 0) {
                operation.defaultResponse(response);
            } else {
                operation.response(apiResponse.code(), response);
            }

            if (StringUtils.isNotEmpty(apiResponse.reference())) {
                response.schema(new RefProperty(apiResponse.reference()));
            } else if (!isVoid(apiResponse.response())) {
                responseType = apiResponse.response();
                final Property property = ModelConverters.getInstance().readAsProperty(responseType);
                if (property != null) {
                    response.schema(ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property));
                    appendModels(responseType);
                }
            }
        }
        if (ReflectionUtils.getAnnotation(method, Deprecated.class) != null) {
            operation.setDeprecated(true);
        }

        // process parameters
        for (Parameter globalParameter : globalParameters) {
            operation.parameter(globalParameter);
        }

        Type[] genericParameterTypes = method.getGenericParameterTypes();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();
        for (int i = 0; i < genericParameterTypes.length; i++) {
            final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
            List<Parameter> parameters = getParameters(type, Arrays.asList(paramAnnotations[i]));

            for (Parameter parameter : parameters) {
                operation.parameter(parameter);
            }
        }

        if (operation.getResponses() == null) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            operation.defaultResponse(response);
        }
        return operation;
    }
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513144912302\fstmerge_var2_7372236328002996975

File path: C:\download\ssmerge\swagger-core\revisions\rev_c7ef0_c6922\rev_rev_left_c7ef0-rev_right_c6922\modules\swagger-jaxrs\src\main\java\io\swagger\jaxrs\Reader.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_62388_dc1d6\rev_62388-dc1d6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a4a1d_93a49\rev_a4a1d-93a49.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_18716_6e98f\rev_18716-6e98f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2c08a_12642\rev_2c08a-12642.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1fdf5_00c7f\rev_1fdf5-00c7f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d98de_3dc60\rev_d98de-3dc60.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_aee65_878c8\rev_aee65-878c8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_05670_cb5a8\rev_05670-cb5a8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_05670_a0244\rev_05670-a0244.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d2490_a73f4\rev_d2490-a73f4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c7c9a_e8265\rev_c7c9a-e8265.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3e6b3_c52f2\rev_3e6b3-c52f2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0c46e_8d706\rev_0c46e-8d706.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_54bb3_54e64\rev_54bb3-54e64.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b70a3_7a60e\rev_b70a3-7a60e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_46988_8db0f\rev_46988-8db0f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8db0f_3bbe3\rev_8db0f-3bbe3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f58db_e9f0b\rev_f58db-e9f0b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7a94c_96b9a\rev_7a94c-96b9a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f529c_964ff\rev_f529c-964ff.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9231b_bc681\rev_9231b-bc681.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9543d_3a79f\rev_9543d-3a79f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b47ab_699de\rev_b47ab-699de.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_92e6d_8bee0\rev_92e6d-8bee0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e42e6_adde6\rev_e42e6-adde6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_adde6_8e670\rev_adde6-8e670.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_33a8a_9fe0b\rev_33a8a-9fe0b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_03462_7878c\rev_03462-7878c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_68d44_a6423\rev_68d44-a6423.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_40374_6f9ed\rev_40374-6f9ed.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_94d73_6f9ed\rev_94d73-6f9ed.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d8a8a_065f6\rev_d8a8a-065f6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ba73b_b5140\rev_ba73b-b5140.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
Property propertyFromNode(JsonNode node) {
        final String type = getString(node, PropertyBuilder.PropertyId.TYPE);
        final String title = getString(node, PropertyBuilder.PropertyId.TITLE);
        final String format = getString(node, PropertyBuilder.PropertyId.FORMAT);

        String description = getString(node, PropertyBuilder.PropertyId.DESCRIPTION);

        JsonNode detailNode = node.get("$ref");
        if (detailNode != null) {
            return new RefProperty(detailNode.asText())
                    .description(description)
                    .title(title);
        }

        if (ObjectProperty.isType(type) || node.get("properties") != null) {
            detailNode = node.get("additionalProperties");
            if (detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)) {
                Property items = propertyFromNode(detailNode);
                if (items != null) {
                    MapProperty mapProperty = new MapProperty(items)
                            .description(description)
                            .title(title);
                    mapProperty.setMinProperties(getInteger(node, PropertyBuilder.PropertyId.MIN_PROPERTIES));
                    mapProperty.setMaxProperties(getInteger(node, PropertyBuilder.PropertyId.MAX_PROPERTIES));
                    mapProperty.setVendorExtensionMap(getVendorExtensions(node));
                    return mapProperty;
                }
            } else {
                detailNode = node.get("properties");
                String detailNodeType = null;
                Map<String, Property> properties = new LinkedHashMap<String, Property>();
                if(detailNode != null){
                    for(Iterator<Map.Entry<String,JsonNode>> iter = detailNode.fields(); iter.hasNext();){
                        Map.Entry<String,JsonNode> field = iter.next();
                        Property property = propertyFromNode(field.getValue());
                        if(property != null) {
                            properties.put(field.getKey(), property);
                        }
                        else {
                            if("type".equals(field.getKey()) && field.getValue() != null && "array".equals(field.getValue().asText())) {
                                detailNodeType = "array";
                            }
                            if(("description").equals(field.getKey()) && field.getValue().getNodeType().equals(JsonNodeType.STRING)) {
                                description = field.getValue().asText();
                            }
                        }
                    }
                }

                if("array".equals(detailNodeType)) {
                    ArrayProperty ap = new ArrayProperty()
                            .description(description)
                            .title(title);
                    PropertyBuilder.merge(ap, argsFromNode(detailNode));
                    ap.setDescription(description);

                    if(properties.keySet().size() == 1) {
                        String key = properties.keySet().iterator().next();
                        ap.setItems(properties.get(key));
                    }
                    ap.setVendorExtensionMap(getVendorExtensions(node));
                    return ap;
                }
                ObjectProperty objectProperty = new ObjectProperty(properties)
                        .description(description)
                        .title(title);
                objectProperty.setVendorExtensionMap(getVendorExtensions(node));

                List<String> required = getRequired(node, PropertyBuilder.PropertyId.REQUIRED);
                objectProperty.setRequiredProperties(required);

                return objectProperty;
            }
        }
        if (ArrayProperty.isType(type)) {
            detailNode = node.get("items");
            if (detailNode != null) {
                Property subProperty = propertyFromNode(detailNode);
                ArrayProperty arrayProperty = new ArrayProperty()
                        .items(subProperty)
                        .description(description)
                        .title(title);
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513148315188\fstmerge_var1_1041607784826276505
                arrayProperty.setMinItems(getInteger(node, PropertyBuilder.PropertyId.MIN_ITEMS));
                arrayProperty.setMaxItems(getInteger(node, PropertyBuilder.PropertyId.MAX_ITEMS));
                arrayProperty.setUniqueItems(getBoolean(node, PropertyBuilder.PropertyId.UNIQUE_ITEMS));
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513148315188\fstmerge_base_912567196308734290
=======
                PropertyBuilder.merge(arrayProperty, argsFromNode(node));
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513148315188\fstmerge_var2_114715168228340575
                arrayProperty.setVendorExtensionMap(getVendorExtensions(node));
                return arrayProperty;
            }
        }


        Map<PropertyBuilder.PropertyId, Object> args = argsFromNode(node);
        Property output = PropertyBuilder.build(type, format, args);
        if (output == null) {
            LOGGER.warn("no property from " + type + ", " + format + ", " + args);
            return null;
        }
        output.setDescription(description);

        return output;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_ba73b_b5140\rev_rev_left_ba73b-rev_right_b5140\modules\swagger-core\src\main\java\io\swagger\util\PropertyDeserializer.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a04ec_15435\rev_a04ec-15435.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_05b0b_944fb\rev_05b0b-944fb.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_8f294_2f4ca\rev_8f294-2f4ca.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a49d9_8ea60\rev_a49d9-8ea60.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5aae8_754a7\rev_5aae8-754a7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0ef53_6d5b0\rev_0ef53-6d5b0.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_24eb6_4e7a7\rev_24eb6-4e7a7.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 1
EditSameMCType: 0, 0, 1
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513150565686\fstmerge_var1_1380866841860452146
public AnnotationsHelper(List<Annotation> annotations) {
            String rsDefault = null;
            for (Annotation item : annotations) {
                if ("javax.ws.rs.core.Context".equals(item.annotationType().getName())) {
                    context = true;
                } else if (item instanceof ApiParam) {
                    apiParam = new ApiParamWrapper((ApiParam) item);
                } else if (item instanceof ApiImplicitParam) {
                    apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);
                } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {
                    try {
                        rsDefault = (String) item.getClass().getMethod("value").invoke(item);
                    } catch (Exception ex) {
                        LOGGER.error("Invocation of value method failed", ex);
                    }
                } else if (item instanceof Size) {
                    final Size size = (Size) item;
                    minItems = size.min();
                    maxItems = size.max();
                } else if (item instanceof NotNull) {
                    required = true;
                } else if (item instanceof Min) {
                    min = ((Min)item).value();
                } else if (item instanceof Max) {
                    max = ((Max)item).value();
                }
            }
            defaultValue = StringUtils.isNotEmpty(apiParam.getDefaultValue()) ? apiParam.getDefaultValue() : rsDefault;
            type = StringUtils.isNotEmpty(apiParam.getType()) ? apiParam.getType() : null;
            format = StringUtils.isNotEmpty(apiParam.getFormat()) ? apiParam.getFormat() : null;
        }
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513150565686\fstmerge_base_1761784142773588556
public AnnotationsHelper(List<Annotation> annotations) {
            String rsDefault = null;
            for (Annotation item : annotations) {
                if ("javax.ws.rs.core.Context".equals(item.annotationType().getName())) {
                    context = true;
                } else if (item instanceof ApiParam) {
                    apiParam = new ApiParamWrapper((ApiParam) item);
                } else if (item instanceof ApiImplicitParam) {
                    apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);
                } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {
                    try {
                        rsDefault = (String) item.getClass().getMethod("value").invoke(item);
                    } catch (Exception ex) {
                        LOGGER.error("Invocation of value method failed", ex);
                    }
                } else if (item instanceof Size) {
                    final Size size = (Size) item;
                    minItems = size.min();
                    maxItems = size.max();
                } else if (item instanceof NotNull) {
                    required = true;
                } else if (item instanceof Min) {
                    min = ((Min)item).value();
                } else if (item instanceof Max) {
                    max = ((Max)item).value();
                }
            }
            defaultValue = StringUtils.isNotEmpty(apiParam.getDefaultValue()) ? apiParam.getDefaultValue() : rsDefault;
        }
=======
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513150565686\fstmerge_var2_3237304438323665298

File path: C:\download\ssmerge\swagger-core\revisions\rev_24eb6_4e7a7\rev_rev_left_24eb6-rev_right_4e7a7\modules\swagger-core\src\main\java\io\swagger\util\ParameterProcessor.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_68de6_a6879\rev_68de6-a6879.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_07ebc_40c19\rev_07ebc-40c19.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9ff90_a55ed\rev_9ff90-a55ed.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0ed8d_ca27b\rev_0ed8d-ca27b.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 1
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, Type type, List<Annotation> annotations) {
        final AnnotationsHelper helper = new AnnotationsHelper(annotations, type);
        if (helper.isContext()) {
            return null;
        }
        final ParamWrapper<?> param = helper.getApiParam();
        if (param.isHidden()) {
            return null;
        }
        final String defaultValue = helper.getDefaultValue();
        if (parameter instanceof AbstractSerializableParameter) {
            final AbstractSerializableParameter<?> p = (AbstractSerializableParameter<?>) parameter;

            if (param.isRequired()) {
                p.setRequired(true);
            }
            if (StringUtils.isNotEmpty(param.getName())) {
                p.setName(param.getName());
            }
            if (StringUtils.isNotEmpty(param.getDescription())) {
                p.setDescription(param.getDescription());
            }
            if (StringUtils.isNotEmpty(param.getExample())) {
                p.setExample(param.getExample());
            }
            if (StringUtils.isNotEmpty(param.getAccess())) {
                p.setAccess(param.getAccess());
            }
            if (StringUtils.isNotEmpty(param.getDataType())) {
                if ("java.io.File".equalsIgnoreCase(param.getDataType())) {
                    p.setProperty(new FileProperty());
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151270360\fstmerge_var1_2649530126458968337
                } else {
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151270360\fstmerge_base_5095975142093819724
                }
                else {
=======
                } else if("long".equalsIgnoreCase(param.getDataType())) {
                    p.setProperty(new LongProperty());
                } else {
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151270360\fstmerge_var2_4084062677084991578
                    p.setType(param.getDataType());
                }
            }
            if (helper.getMin() != null || helper.getDecimalMin() != null) {
                p.setMinimum(helper.getMin() != null ? new Double(helper.getMin()) : helper.getDecimalMin());
                if (helper.isMinExclusive()) {
                    p.setExclusiveMinimum(true);
                }
            }

            if (helper.getMax() != null || helper.getDecimalMax() != null) {
                p.setMaximum(helper.getMax() != null ? new Double(helper.getMax()) : helper.getDecimalMax());
                if (helper.isMaxExclusive()) {
                    p.setExclusiveMaximum(true);
                }
            }

            if (helper.getMinItems() != null) {
                p.setMinItems(helper.getMinItems());
            }
            if (helper.getMaxItems() != null) {
                p.setMaxItems(helper.getMaxItems());
            }

            if (helper.getMinLength() != null) {
                p.setMinLength(helper.getMinLength());
            }
            if (helper.getMaxLength() != null) {
                p.setMaxLength(helper.getMaxLength());
            }

            if (helper.getPattern() != null) {
                p.setPattern(helper.getPattern());
            }

            if (helper.isRequired() != null) {
                p.setRequired(true);
            }
            if(helper.getType() != null) {
                p.setType(helper.getType());
            }
            if(helper.getFormat() != null) {
                p.setFormat(helper.getFormat());
            }

            AllowableValues allowableValues = AllowableValuesUtils.create(param.getAllowableValues());

            if (p.getItems() != null || param.isAllowMultiple()) {
                if (p.getItems() == null) {
                    // Convert to array
                    final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
                    args.put(PropertyBuilder.PropertyId.DEFAULT, p.getDefaultValue());
                    p.setDefaultValue(null);
                    args.put(PropertyBuilder.PropertyId.ENUM, p.getEnum());
                    p.setEnum(null);
                    args.put(PropertyBuilder.PropertyId.MINIMUM, p.getMinimum());
                    p.setMinimum(null);
                    args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, p.isExclusiveMinimum());
                    p.setExclusiveMinimum(null);
                    args.put(PropertyBuilder.PropertyId.MAXIMUM, p.getMaximum());
                    p.setMaximum(null);
                    args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, p.isExclusiveMaximum());
                    args.put(PropertyBuilder.PropertyId.MIN_LENGTH, p.getMinLength());
                    p.setMinLength(null);
                    args.put(PropertyBuilder.PropertyId.MAX_LENGTH, p.getMaxLength());
                    p.setMaxLength(null);
                    args.put(PropertyBuilder.PropertyId.PATTERN, p.getPattern());
                    p.setPattern(null);
                    args.put(PropertyBuilder.PropertyId.EXAMPLE, p.getExample());
                    p.setExclusiveMaximum(null);
                    Property items = PropertyBuilder.build(p.getType(), p.getFormat(), args);
                    p.type(ArrayProperty.TYPE).format(null).items(items);
                }

                final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
                if (StringUtils.isNotEmpty(defaultValue)) {
                    args.put(PropertyBuilder.PropertyId.DEFAULT, defaultValue);
                }

                /**
                 * Use jsr-303 annotations (and other bean validation annotations) if present. This essentially implies
                 * that the bean validation constraints now apply to the items and not to the parent collection/array.
                 * Although this  will work for swagger definition purposes, there is no default validator for many of
                 * the validator annotations when applied to a collection/array. For example, a @Min annotation applied
                 * to a List&gt;Long&lt; will result in a swagger definition which contains an array property with items
                 * of type number and having a 'minimum' validation constraint. However, there is no default bean
                 * validator for @Min when applied to a List&gt;Long&lt;, and the developer would need to implement such
                 * a validator themselves.
                 */

                if (helper.getMin() != null || helper.getDecimalMin() != null) {
                    args.put(PropertyBuilder.PropertyId.MINIMUM,
                            helper.getMin() != null ? new Double(helper.getMin()) : helper.getDecimalMin());
                    if (helper.isMinExclusive()) {
                        args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, true);
                    }
                }

                if (helper.getMax() != null || helper.getDecimalMax() != null) {
                    args.put(PropertyBuilder.PropertyId.MAXIMUM,
                            helper.getMax() != null ? new Double(helper.getMax()) : helper.getDecimalMax());
                    if (helper.isMaxExclusive()) {
                        args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, true);
                    }
                }

                if (helper.getMinLength() != null) {
                    args.put(PropertyBuilder.PropertyId.MIN_LENGTH, helper.getMinLength());
                }
                if (helper.getMaxLength() != null) {
                    args.put(PropertyBuilder.PropertyId.MAX_LENGTH, helper.getMaxLength());
                }
                if (helper.getPattern() != null) {
                    args.put(PropertyBuilder.PropertyId.PATTERN, helper.getPattern());
                }

                //Overwrite Bean validation values with allowable values if present
                if (allowableValues != null) {
                    args.putAll(allowableValues.asPropertyArguments());
                }
                PropertyBuilder.merge(p.getItems(), args);
            } else {
                if (StringUtils.isNotEmpty(defaultValue)) {
                    p.setDefaultValue(defaultValue);
                }

                //Overwrite Bean validation values with allowable values if present
                if (allowableValues != null) {
                    processAllowedValues(allowableValues, p);
                }
//                else {
//                    processJsr303Annotations(helper, p);
//                }
            }
        } else {
            // must be a body param
            BodyParameter bp = new BodyParameter();

            if (helper.getApiParam() != null) {
                ParamWrapper<?> pw = helper.getApiParam();

                if (pw instanceof ApiParamWrapper) {
                    ApiParamWrapper apiParam = (ApiParamWrapper) pw;
                    Example example = apiParam.getExamples();
                    if (example != null && example.value() != null) {
                        for (ExampleProperty ex : example.value()) {
                            String mediaType = ex.mediaType();
                            String value = ex.value();
                            if (!mediaType.isEmpty() && !value.isEmpty()) {
                                bp.example(mediaType.trim(), value.trim());
                            }
                        }
                    }
                } else if (pw instanceof ApiImplicitParamWrapper) {
                    ApiImplicitParamWrapper apiParam = (ApiImplicitParamWrapper) pw;
                    Example example = apiParam.getExamples();
                    if (example != null && example.value() != null) {
                        for (ExampleProperty ex : example.value()) {
                            String mediaType = ex.mediaType();
                            String value = ex.value();
                            if (!mediaType.isEmpty() && !value.isEmpty()) {
                                bp.example(mediaType.trim(), value.trim());
                            }
                        }
                    }
                }
            }
            bp.setRequired(param.isRequired());
            bp.setName(StringUtils.isNotEmpty(param.getName()) ? param.getName() : "body");

            if (StringUtils.isNotEmpty(param.getDescription())) {
                bp.setDescription(param.getDescription());
            }

            if (StringUtils.isNotEmpty(param.getAccess())) {
                bp.setAccess(param.getAccess());
            }

            final Property property = ModelConverters.getInstance().readAsProperty(type);
            if (property != null) {
                final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
                if (StringUtils.isNotEmpty(defaultValue)) {
                    args.put(PropertyBuilder.PropertyId.DEFAULT, defaultValue);
                }
                bp.setSchema(PropertyBuilder.toModel(PropertyBuilder.merge(property, args)));
                for (Map.Entry<String, Model> entry : ModelConverters.getInstance().readAll(type).entrySet()) {
                    swagger.addDefinition(entry.getKey(), entry.getValue());
                }
            }
            parameter = bp;
        }
        return parameter;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_0ed8d_ca27b\rev_rev_left_0ed8d-rev_right_ca27b\modules\swagger-core\src\main\java\io\swagger\util\ParameterProcessor.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a689f_649cf\rev_a689f-649cf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_6b51d_41cee\rev_6b51d-41cee.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_0e26b-54377.revisions
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151715433\fstmerge_var1_2803515805071955784
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151715433\fstmerge_base_100975173924375805
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151715433\fstmerge_var2_2004460651528557462

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\AbstractModel.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151739197\fstmerge_var1_5335258992663195602
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151739197\fstmerge_base_1492666956702151766
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151739197\fstmerge_var2_4852106406717107097

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\auth\AbstractSecuritySchemeDefinition.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151716306\fstmerge_var1_5334383016076887656
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151716306\fstmerge_base_8379388410901505818
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151716306\fstmerge_var2_1239895832496233019

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\ExternalDocs.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151717601\fstmerge_var1_7990115737996660885
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151717601\fstmerge_base_4587763236941598695
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151717601\fstmerge_var2_3537628812817414198

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\License.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151718618\fstmerge_var1_7592142392924694903
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151718618\fstmerge_base_3382130691600286235
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151718618\fstmerge_var2_8975660576732634207

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\Operation.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151741805\fstmerge_var1_5191918701025326138
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151741805\fstmerge_base_7663440487353815490
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151741805\fstmerge_var2_3512467598254879614

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\parameters\AbstractParameter.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151722722\fstmerge_var1_3457752287075122778
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151722722\fstmerge_base_1865874197313187457
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151722722\fstmerge_var2_4085810931205086089

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\Path.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151745336\fstmerge_var1_9039995572475729586
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151745336\fstmerge_base_2304016436461308379
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151745336\fstmerge_var2_3938779846450505174

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\properties\AbstractProperty.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151723690\fstmerge_var1_6109364196283777422
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151723690\fstmerge_base_7623980425779897911
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151723690\fstmerge_var2_2769710530028599800

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\Response.java
Conflict type: EditSameFd
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 0, 0, 0
Conflict body: 
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151738065\fstmerge_var1_5588715889091834341
private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151738065\fstmerge_base_1356608440919365522
private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151738065\fstmerge_var2_8523346202548440899

File path: C:\download\ssmerge\swagger-core\revisions\rev_0e26b_54377\rev_rev_left_0e26b-rev_right_54377\modules\swagger-models\src\main\java\io\swagger\models\Tag.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_84c80_f95e7\rev_84c80-f95e7.revisions
Conflict type: EditSameMC
Number of Conflicts: 1
Different Spacing: 0
Consecutive Lines: 0
Intersection: 0
Cause same signature: 
Possible renaming: 0
EditSameMCType: 1, 0, 0
Conflict body: 
Property propertyFromNode(JsonNode node) {
        final String type = getString(node, PropertyBuilder.PropertyId.TYPE);
        final String title = getString(node, PropertyBuilder.PropertyId.TITLE);
        final String format = getString(node, PropertyBuilder.PropertyId.FORMAT);

        String description = getString(node, PropertyBuilder.PropertyId.DESCRIPTION);

        JsonNode detailNode = node.get("$ref");
        if (detailNode != null) {
            return new RefProperty(detailNode.asText())
                    .description(description)
                    .title(title);
        }

        if (ObjectProperty.isType(type) || node.get("properties") != null) {
            detailNode = node.get("additionalProperties");
            if (detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)) {
                Property items = propertyFromNode(detailNode);
                if (items != null) {
                    MapProperty mapProperty = new MapProperty(items)
                            .description(description)
                            .title(title);
                    mapProperty.setMinProperties(getInteger(node, PropertyBuilder.PropertyId.MIN_PROPERTIES));
                    mapProperty.setMaxProperties(getInteger(node, PropertyBuilder.PropertyId.MAX_PROPERTIES));
                    mapProperty.setVendorExtensionMap(getVendorExtensions(node));
                    return mapProperty;
                }
            } else {
                detailNode = node.get("properties");
                String detailNodeType = null;
                Map<String, Property> properties = new LinkedHashMap<String, Property>();
                if(detailNode != null){
                    for(Iterator<Map.Entry<String,JsonNode>> iter = detailNode.fields(); iter.hasNext();){
                        Map.Entry<String,JsonNode> field = iter.next();
                        Property property = propertyFromNode(field.getValue());
                        if(property != null) {
                            properties.put(field.getKey(), property);
                        }
                        else {
                            if("type".equals(field.getKey()) && field.getValue() != null && "array".equals(field.getValue().asText())) {
                                detailNodeType = "array";
                            }
                            if(("description").equals(field.getKey()) && field.getValue().getNodeType().equals(JsonNodeType.STRING)) {
                                description = field.getValue().asText();
                            }
                        }
                    }
                }

                if("array".equals(detailNodeType)) {
                    ArrayProperty ap = new ArrayProperty()
                            .description(description)
                            .title(title);
                    PropertyBuilder.merge(ap, argsFromNode(detailNode));
                    ap.setDescription(description);

                    if(properties.keySet().size() == 1) {
                        String key = properties.keySet().iterator().next();
                        ap.setItems(properties.get(key));
                    }
                    ap.setVendorExtensionMap(getVendorExtensions(node));
                    return ap;
                }
                ObjectProperty objectProperty = new ObjectProperty(properties)
                        .description(description)
                        .title(title);
                objectProperty.setVendorExtensionMap(getVendorExtensions(node));

                List<String> required = getRequired(node, PropertyBuilder.PropertyId.REQUIRED);
                objectProperty.setRequiredProperties(required);

                return objectProperty;
            }
        }
        if (ArrayProperty.isType(type)) {
            detailNode = node.get("items");
            if (detailNode != null) {
                Property subProperty = propertyFromNode(detailNode);
                ArrayProperty arrayProperty = new ArrayProperty()
                        .items(subProperty)
                        .description(description)
                        .title(title);
                arrayProperty.setMinItems(getInteger(node, PropertyBuilder.PropertyId.MIN_ITEMS));
                arrayProperty.setMaxItems(getInteger(node, PropertyBuilder.PropertyId.MAX_ITEMS));
                arrayProperty.setUniqueItems(getBoolean(node, PropertyBuilder.PropertyId.UNIQUE_ITEMS));
<<<<<<< C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151805723\fstmerge_var1_4816177730752670425
                JsonNode example = getDetailNode( node, PropertyBuilder.PropertyId.EXAMPLE);
                if( example != null ) {
                    arrayProperty.setExample( Json.mapper().convertValue(example, Object.class));
                }

||||||| C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151805723\fstmerge_base_3421008119265693048
=======

                PropertyBuilder.merge(arrayProperty, argsFromNode(node));
>>>>>>> C:\Users\Italo\Documents\paola\workspaces\workspace_tese\conflictsanalyzer\fstmerge_tmp1513151805723\fstmerge_var2_4584690111174672
                arrayProperty.setVendorExtensionMap(getVendorExtensions(node));
                return arrayProperty;
            }
        }


        Map<PropertyBuilder.PropertyId, Object> args = argsFromNode(node);
        Property output = PropertyBuilder.build(type, format, args);
        if (output == null) {
            LOGGER.warn("no property from " + type + ", " + format + ", " + args);
            return null;
        }
        output.setDescription(description);

        return output;
    }

File path: C:\download\ssmerge\swagger-core\revisions\rev_84c80_f95e7\rev_rev_left_84c80-rev_right_f95e7\modules\swagger-core\src\main\java\io\swagger\util\PropertyDeserializer.java

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d7992_4c1e8\rev_d7992-4c1e8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_ff4c9_7ac5d\rev_ff4c9-7ac5d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_50d6d_33a24\rev_50d6d-33a24.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d6f87_9a6cf\rev_d6f87-9a6cf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_e661e_9a6cf\rev_e661e-9a6cf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3ab7f_356f2\rev_3ab7f-356f2.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7e497_42582\rev_7e497-42582.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_cb5c4_fd2ce\rev_cb5c4-fd2ce.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_155e1_41d67\rev_155e1-41d67.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_efd00_2f0ef\rev_efd00-2f0ef.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_c1431_b1cb6\rev_c1431-b1cb6.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_bb36f_2a271\rev_bb36f-2a271.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5faab_32a73\rev_5faab-32a73.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_38324_32901\rev_38324-32901.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_76465_35a75\rev_76465-35a75.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_1a945_0fb44\rev_1a945-0fb44.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_3b7b8_2135e\rev_3b7b8-2135e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_77d3d_76bb7\rev_77d3d-76bb7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_19bf2_8d430\rev_19bf2-8d430.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_93ee8_1ccb3\rev_93ee8-1ccb3.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5ba1f_c2517\rev_5ba1f-c2517.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b92f5_7944d\rev_b92f5-7944d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_46c26_5065c\rev_46c26-5065c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5b73d_7fdaf\rev_5b73d-7fdaf.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5c912_aedf7\rev_5c912-aedf7.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_791d4_9aa65\rev_791d4-9aa65.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_9d821_9a446\rev_9d821-9a446.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_5018e_e0f71\rev_5018e-e0f71.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_7a0a7_6435a\rev_7a0a7-6435a.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_88341_e6fde\rev_88341-e6fde.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d5614_ab02b\rev_d5614-ab02b.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_f53c8_52ce4\rev_f53c8-52ce4.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_fcc85_da00c\rev_fcc85-da00c.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_a9781_a497e\rev_a9781-a497e.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_65e6b_f2b48\rev_65e6b-f2b48.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_b5bb7_86b98\rev_b5bb7-86b98.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_05fd2_c5f5f\rev_05fd2-c5f5f.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_2362d_44e9d\rev_2362d-44e9d.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_d9599_fe5e8\rev_d9599-fe5e8.revisions

==================================================================================================================
Revision: C:\download\ssmerge\swagger-core\revisions\rev_15b14_71ef9\rev_15b14-71ef9.revisions

=========================================================